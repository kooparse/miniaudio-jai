//
// This file was auto-generated using the following command:
//
// jai generate.jai
//



MA_VERSION_MAJOR :: 0;
MA_VERSION_MINOR :: 11;
MA_VERSION_REVISION :: 18;

MA_SIZEOF_PTR :: 8;

MA_TRUE :: 1;
MA_FALSE :: 0;

MA_SIZE_MAX :: 0xFFFFFFFF;

MA_SIMD_ALIGNMENT :: 32;

MA_MIN_CHANNELS :: 1;

MA_MAX_CHANNELS :: 254;

MA_MAX_FILTER_ORDER :: 8;

MA_MAX_LOG_CALLBACKS :: 4;

MA_CHANNEL_INDEX_NULL :: 255;

MA_DATA_SOURCE_SELF_MANAGED_RANGE_AND_LOOP_POINT :: 0x00000001;

MA_DATA_FORMAT_FLAG_EXCLUSIVE_MODE :: 1 << 1;

MA_MAX_DEVICE_NAME_LENGTH :: 255;

ma_resource_manager_job :: ma_job;
ma_resource_manager_job_init :: ma_job_init;

ma_resource_manager_job_queue_config :: ma_job_queue_config;
ma_resource_manager_job_queue_config_init :: ma_job_queue_config_init;
ma_resource_manager_job_queue :: ma_job_queue;
ma_resource_manager_job_queue_get_heap_size :: ma_job_queue_get_heap_size;
ma_resource_manager_job_queue_init_preallocated :: ma_job_queue_init_preallocated;
ma_resource_manager_job_queue_init :: ma_job_queue_init;
ma_resource_manager_job_queue_uninit :: ma_job_queue_uninit;
ma_resource_manager_job_queue_post :: ma_job_queue_post;
ma_resource_manager_job_queue_next :: ma_job_queue_next;

MA_RESOURCE_MANAGER_MAX_JOB_THREAD_COUNT :: 64;

MA_MAX_NODE_BUS_COUNT :: 254;

MA_MAX_NODE_LOCAL_BUS_COUNT :: 2;

MA_NODE_BUS_COUNT_UNKNOWN :: 255;

MA_ENGINE_MAX_LISTENERS :: 4;

MA_LISTENER_INDEX_CLOSEST :: cast,trunc(ma_uint8) -1;

MA_SOUND_SOURCE_CHANNEL_COUNT :: 0xFFFFFFFF;

MA_MM_DENORMALS_ZERO_MASK :: 0x0040;
MA_MM_FLUSH_ZERO_MASK :: 0x8000;

MA_COINIT_VALUE :: 0;

MA_FLT_MAX :: 3.402823466e+38;

MA_PI :: 3.14159265358979323846264;

MA_PI_D :: 3.14159265358979323846264;

MA_TAU :: 6.28318530717958647693;

MA_TAU_D :: 6.28318530717958647693;

MA_DEFAULT_CHANNELS :: 2;

MA_DEFAULT_SAMPLE_RATE :: 48000;

MA_DEFAULT_PERIODS :: 3;

MA_DEFAULT_PERIOD_SIZE_IN_MILLISECONDS_LOW_LATENCY :: 10;

MA_DEFAULT_PERIOD_SIZE_IN_MILLISECONDS_CONSERVATIVE :: 100;

MA_DEFAULT_RESAMPLER_LPF_ORDER :: 4;

MA_DEFAULT_LCG_SEED :: 4321;

MA_LCG_M :: 2147483647;
MA_LCG_A :: 48271;
MA_LCG_C :: 0;

MA_DATA_CONVERTER_STACK_BUFFER_SIZE :: 4096;

MA_FENCE_COUNTER_MAX :: 0x7FFFFFFF;

MA_JOB_ID_NONE :: ~(cast(ma_uint64) 0);
MA_JOB_SLOT_NONE :: cast,trunc(ma_uint16) (~0);

MA_DEFAULT_PLAYBACK_DEVICE_NAME :: "Default Playback Device";
MA_DEFAULT_CAPTURE_DEVICE_NAME :: "Default Capture Device";

MA_DEVICE_OP_NONE__NULL :: 0;
MA_DEVICE_OP_START__NULL :: 1;
MA_DEVICE_OP_SUSPEND__NULL :: 2;
MA_DEVICE_OP_KILL__NULL :: 3;

MA_COREAUDIO_OUTPUT_BUS :: 0;
MA_COREAUDIO_INPUT_BUS :: 1;

MA_DEFAULT_DEVICE_JOB_QUEUE_CAPACITY :: 32;

MA_BIQUAD_FIXED_POINT_SHIFT :: 14;

MA_DEFAULT_SPEED_OF_SOUND :: 343.3;

MA_CHANNEL_CONVERTER_FIXED_POINT_SHIFT :: 12;

MA_PLANE_LEFT :: 0;
MA_PLANE_RIGHT :: 1;
MA_PLANE_FRONT :: 2;
MA_PLANE_BACK :: 3;
MA_PLANE_BOTTOM :: 4;
MA_PLANE_TOP :: 5;

MA_DATA_SOURCE_DEFAULT_RANGE_BEG :: 0;
MA_DATA_SOURCE_DEFAULT_RANGE_END :: ~(cast(ma_uint64) 0);
MA_DATA_SOURCE_DEFAULT_LOOP_POINT_BEG :: 0;
MA_DATA_SOURCE_DEFAULT_LOOP_POINT_END :: ~(cast(ma_uint64) 0);

MA_DR_WAV_VERSION_MAJOR :: 0;
MA_DR_WAV_VERSION_MINOR :: 13;
MA_DR_WAV_VERSION_REVISION :: 12;

MA_DR_WAVE_FORMAT_PCM :: 0x1;
MA_DR_WAVE_FORMAT_ADPCM :: 0x2;
MA_DR_WAVE_FORMAT_IEEE_FLOAT :: 0x3;
MA_DR_WAVE_FORMAT_ALAW :: 0x6;
MA_DR_WAVE_FORMAT_MULAW :: 0x7;
MA_DR_WAVE_FORMAT_DVI_ADPCM :: 0x11;
MA_DR_WAVE_FORMAT_EXTENSIBLE :: 0xFFFE;
MA_DR_WAV_SEQUENTIAL :: 0x00000001;
MA_DR_WAV_WITH_METADATA :: 0x00000002;

MA_DR_FLAC_VERSION_MAJOR :: 0;
MA_DR_FLAC_VERSION_MINOR :: 12;
MA_DR_FLAC_VERSION_REVISION :: 41;

MA_DR_FLAC_BUFFER_SIZE :: 4096;

MA_DR_FLAC_METADATA_BLOCK_TYPE_STREAMINFO :: 0;
MA_DR_FLAC_METADATA_BLOCK_TYPE_PADDING :: 1;
MA_DR_FLAC_METADATA_BLOCK_TYPE_APPLICATION :: 2;
MA_DR_FLAC_METADATA_BLOCK_TYPE_SEEKTABLE :: 3;
MA_DR_FLAC_METADATA_BLOCK_TYPE_VORBIS_COMMENT :: 4;
MA_DR_FLAC_METADATA_BLOCK_TYPE_CUESHEET :: 5;
MA_DR_FLAC_METADATA_BLOCK_TYPE_PICTURE :: 6;
MA_DR_FLAC_METADATA_BLOCK_TYPE_INVALID :: 127;
MA_DR_FLAC_PICTURE_TYPE_OTHER :: 0;
MA_DR_FLAC_PICTURE_TYPE_FILE_ICON :: 1;
MA_DR_FLAC_PICTURE_TYPE_OTHER_FILE_ICON :: 2;
MA_DR_FLAC_PICTURE_TYPE_COVER_FRONT :: 3;
MA_DR_FLAC_PICTURE_TYPE_COVER_BACK :: 4;
MA_DR_FLAC_PICTURE_TYPE_LEAFLET_PAGE :: 5;
MA_DR_FLAC_PICTURE_TYPE_MEDIA :: 6;
MA_DR_FLAC_PICTURE_TYPE_LEAD_ARTIST :: 7;
MA_DR_FLAC_PICTURE_TYPE_ARTIST :: 8;
MA_DR_FLAC_PICTURE_TYPE_CONDUCTOR :: 9;
MA_DR_FLAC_PICTURE_TYPE_BAND :: 10;
MA_DR_FLAC_PICTURE_TYPE_COMPOSER :: 11;
MA_DR_FLAC_PICTURE_TYPE_LYRICIST :: 12;
MA_DR_FLAC_PICTURE_TYPE_RECORDING_LOCATION :: 13;
MA_DR_FLAC_PICTURE_TYPE_DURING_RECORDING :: 14;
MA_DR_FLAC_PICTURE_TYPE_DURING_PERFORMANCE :: 15;
MA_DR_FLAC_PICTURE_TYPE_SCREEN_CAPTURE :: 16;
MA_DR_FLAC_PICTURE_TYPE_BRIGHT_COLORED_FISH :: 17;
MA_DR_FLAC_PICTURE_TYPE_ILLUSTRATION :: 18;
MA_DR_FLAC_PICTURE_TYPE_BAND_LOGOTYPE :: 19;
MA_DR_FLAC_PICTURE_TYPE_PUBLISHER_LOGOTYPE :: 20;

MA_DR_MP3_VERSION_MAJOR :: 0;
MA_DR_MP3_VERSION_MINOR :: 6;
MA_DR_MP3_VERSION_REVISION :: 37;

MA_DR_MP3_MAX_PCM_FRAMES_PER_MP3_FRAME :: 1152;
MA_DR_MP3_MAX_SAMPLES_PER_FRAME :: MA_DR_MP3_MAX_PCM_FRAMES_PER_MP3_FRAME*2;

MA_PINK_NOISE_BIN_SIZE :: 16;

MA_RESOURCE_MANAGER_PAGE_SIZE_IN_MILLISECONDS :: 1000;

MA_JOB_TYPE_RESOURCE_MANAGER_QUEUE_CAPACITY :: 1024;

MA_DEFAULT_HASH_SEED :: 42;

MA_DEFAULT_NODE_CACHE_CAP_IN_FRAMES_PER_BUS :: 480;

MA_NODE_OUTPUT_BUS_FLAG_HAS_READ :: 0x01;

MA_SEEK_TARGET_NONE :: ~cast(ma_uint64) 0;

MA_DR_WAV_MAX_SIMD_VECTOR_SIZE :: 32;
MA_DR_WAV_INT64_MIN :: cast(ma_int64) 0x80000000 << 32;
MA_DR_WAV_INT64_MAX :: ((cast(ma_int64) 0x7FFFFFFF) << 32) | 0xFFFFFFFF;

MA_DR_WAV_MAX_SAMPLE_RATE :: 384000;

MA_DR_WAV_MAX_CHANNELS :: 256;

MA_DR_WAV_MAX_BITS_PER_SAMPLE :: 64;

MA_DR_WAV_SMPL_BYTES :: 36;
MA_DR_WAV_SMPL_LOOP_BYTES :: 24;
MA_DR_WAV_INST_BYTES :: 7;
MA_DR_WAV_ACID_BYTES :: 24;
MA_DR_WAV_CUE_BYTES :: 4;
MA_DR_WAV_BEXT_BYTES :: 602;
MA_DR_WAV_BEXT_DESCRIPTION_BYTES :: 256;
MA_DR_WAV_BEXT_ORIGINATOR_NAME_BYTES :: 32;
MA_DR_WAV_BEXT_ORIGINATOR_REF_BYTES :: 32;
MA_DR_WAV_BEXT_RESERVED_BYTES :: 180;
MA_DR_WAV_BEXT_UMID_BYTES :: 64;
MA_DR_WAV_CUE_POINT_BYTES :: 24;
MA_DR_WAV_LIST_LABEL_OR_NOTE_BYTES :: 4;
MA_DR_WAV_LIST_LABELLED_TEXT_BYTES :: 20;
MA_DR_WAV_METADATA_ALIGNMENT :: 8;

MA_DR_FLAC_MAX_SIMD_VECTOR_SIZE :: 64;
MA_DR_FLAC_SUBFRAME_CONSTANT :: 0;
MA_DR_FLAC_SUBFRAME_VERBATIM :: 1;
MA_DR_FLAC_SUBFRAME_FIXED :: 8;
MA_DR_FLAC_SUBFRAME_LPC :: 32;
MA_DR_FLAC_SUBFRAME_RESERVED :: 255;
MA_DR_FLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE :: 0;
MA_DR_FLAC_RESIDUAL_CODING_METHOD_PARTITIONED_RICE2 :: 1;
MA_DR_FLAC_CHANNEL_ASSIGNMENT_INDEPENDENT :: 0;
MA_DR_FLAC_CHANNEL_ASSIGNMENT_LEFT_SIDE :: 8;
MA_DR_FLAC_CHANNEL_ASSIGNMENT_RIGHT_SIDE :: 9;
MA_DR_FLAC_CHANNEL_ASSIGNMENT_MID_SIDE :: 10;
MA_DR_FLAC_SEEKPOINT_SIZE_IN_BYTES :: 18;
MA_DR_FLAC_CUESHEET_TRACK_SIZE_IN_BYTES :: 36;
MA_DR_FLAC_CUESHEET_TRACK_INDEX_SIZE_IN_BYTES :: 12;

MA_DR_FLAC_BINARY_SEARCH_APPROX_COMPRESSION_RATIO :: 0.6;

MA_DR_FLAC_OGG_MAX_PAGE_SIZE :: 65307;
MA_DR_FLAC_OGG_CAPTURE_PATTERN_CRC32 :: 1605413199;

MA_DR_MP3_MAX_FREE_FORMAT_FRAME_SIZE :: 2304;

MA_DR_MP3_MAX_FRAME_SYNC_MATCHES :: 10;

MA_DR_MP3_MAX_L3_FRAME_PAYLOAD_BYTES :: MA_DR_MP3_MAX_FREE_FORMAT_FRAME_SIZE;
MA_DR_MP3_MAX_BITRESERVOIR_BYTES :: 511;
MA_DR_MP3_SHORT_BLOCK_TYPE :: 2;
MA_DR_MP3_STOP_BLOCK_TYPE :: 3;
MA_DR_MP3_MODE_MONO :: 3;
MA_DR_MP3_MODE_JOINT_STEREO :: 1;
MA_DR_MP3_HDR_SIZE :: 4;

MA_DR_MP3_BITS_DEQUANTIZER_OUT :: -1;
MA_DR_MP3_MAX_SCF :: 255 + MA_DR_MP3_BITS_DEQUANTIZER_OUT*4 - 210;

MA_DR_MP3_HAVE_SSE :: 0;
MA_DR_MP3_HAVE_SIMD :: 1;

MA_DR_MP3_HAVE_ARMV6 :: 0;

MA_DR_MP3_SEEK_LEADING_MP3_FRAMES :: 2;

MA_DR_MP3_MIN_DATA_CHUNK_SIZE :: 16384;

MA_DR_MP3_DATA_CHUNK_SIZE :: MA_DR_MP3_MIN_DATA_CHUNK_SIZE*4;

MA_DR_MP3_PI_D :: 3.14159265358979323846264;

MA_DR_MP3_DEFAULT_RESAMPLER_LPF_ORDER :: 2;

ma_int8 :: s8;
ma_uint8 :: u8;
ma_int16 :: s16;
ma_uint16 :: u16;
ma_int32 :: s32;
ma_uint32 :: u32;

ma_int64 :: s64;
ma_uint64 :: u64;

ma_uintptr :: ma_uint64;

ma_bool8 :: ma_uint8;
ma_bool32 :: ma_uint32;

/* These float types are not used universally by miniaudio. It's to simplify some macro expansion for atomic types. */
ma_float :: float;
ma_double :: float64;

ma_handle :: *void;
ma_ptr :: *void;

ma_proc :: #type () -> void #c_call;

ma_pthread_t :: pthread_t;
ma_pthread_mutex_t :: pthread_mutex_t;
ma_pthread_cond_t :: pthread_cond_t;

ma_wchar_win32 :: ma_uint16;

/*
Logging Levels
==============
Log levels are only used to give logging callbacks some context as to the severity of a log message
so they can do filtering. All log levels will be posted to registered logging callbacks. If you
don't want to output a certain log level you can discriminate against the log level in the callback.

MA_LOG_LEVEL_DEBUG
Used for debugging. Useful for debug and test builds, but should be disabled in release builds.

MA_LOG_LEVEL_INFO
Informational logging. Useful for debugging. This will never be called from within the data
callback.

MA_LOG_LEVEL_WARNING
Warnings. You should enable this in you development builds and action them when encounted. These
logs usually indicate a potential problem or misconfiguration, but still allow you to keep
running. This will never be called from within the data callback.

MA_LOG_LEVEL_ERROR
Error logging. This will be fired when an operation fails and is subsequently aborted. This can
be fired from within the data callback, in which case the device will be stopped. You should
always have this log level enabled.
*/
ma_log_level :: enum u32 {
    DEBUG   :: 4;
    INFO    :: 3;
    WARNING :: 2;
    ERROR   :: 1;
}

ma_channel :: ma_uint8;
_ma_channel_position :: enum u32 {
    NONE               :: 0;
    MONO               :: 1;
    FRONT_LEFT         :: 2;
    FRONT_RIGHT        :: 3;
    FRONT_CENTER       :: 4;
    LFE                :: 5;
    BACK_LEFT          :: 6;
    BACK_RIGHT         :: 7;
    FRONT_LEFT_CENTER  :: 8;
    FRONT_RIGHT_CENTER :: 9;
    BACK_CENTER        :: 10;
    SIDE_LEFT          :: 11;
    SIDE_RIGHT         :: 12;
    TOP_CENTER         :: 13;
    TOP_FRONT_LEFT     :: 14;
    TOP_FRONT_CENTER   :: 15;
    TOP_FRONT_RIGHT    :: 16;
    TOP_BACK_LEFT      :: 17;
    TOP_BACK_CENTER    :: 18;
    TOP_BACK_RIGHT     :: 19;
    AUX_0              :: 20;
    AUX_1              :: 21;
    AUX_2              :: 22;
    AUX_3              :: 23;
    AUX_4              :: 24;
    AUX_5              :: 25;
    AUX_6              :: 26;
    AUX_7              :: 27;
    AUX_8              :: 28;
    AUX_9              :: 29;
    AUX_10             :: 30;
    AUX_11             :: 31;
    AUX_12             :: 32;
    AUX_13             :: 33;
    AUX_14             :: 34;
    AUX_15             :: 35;
    AUX_16             :: 36;
    AUX_17             :: 37;
    AUX_18             :: 38;
    AUX_19             :: 39;
    AUX_20             :: 40;
    AUX_21             :: 41;
    AUX_22             :: 42;
    AUX_23             :: 43;
    AUX_24             :: 44;
    AUX_25             :: 45;
    AUX_26             :: 46;
    AUX_27             :: 47;
    AUX_28             :: 48;
    AUX_29             :: 49;
    AUX_30             :: 50;
    AUX_31             :: 51;
    LEFT               :: 2;
    RIGHT              :: 3;
    POSITION_COUNT     :: 52;
}

ma_result :: enum s32 {
    SUCCESS                        :: 0;
    ERROR                          :: -1;
    INVALID_ARGS                   :: -2;
    INVALID_OPERATION              :: -3;
    OUT_OF_MEMORY                  :: -4;
    OUT_OF_RANGE                   :: -5;
    ACCESS_DENIED                  :: -6;
    DOES_NOT_EXIST                 :: -7;
    ALREADY_EXISTS                 :: -8;
    TOO_MANY_OPEN_FILES            :: -9;
    INVALID_FILE                   :: -10;
    TOO_BIG                        :: -11;
    PATH_TOO_LONG                  :: -12;
    NAME_TOO_LONG                  :: -13;
    NOT_DIRECTORY                  :: -14;
    IS_DIRECTORY                   :: -15;
    DIRECTORY_NOT_EMPTY            :: -16;
    AT_END                         :: -17;
    NO_SPACE                       :: -18;
    BUSY                           :: -19;
    IO_ERROR                       :: -20;
    INTERRUPT                      :: -21;
    UNAVAILABLE                    :: -22;
    ALREADY_IN_USE                 :: -23;
    BAD_ADDRESS                    :: -24;
    BAD_SEEK                       :: -25;
    BAD_PIPE                       :: -26;
    DEADLOCK                       :: -27;
    TOO_MANY_LINKS                 :: -28;
    NOT_IMPLEMENTED                :: -29;
    NO_MESSAGE                     :: -30;
    BAD_MESSAGE                    :: -31;
    NO_DATA_AVAILABLE              :: -32;
    INVALID_DATA                   :: -33;
    TIMEOUT                        :: -34;
    NO_NETWORK                     :: -35;
    NOT_UNIQUE                     :: -36;
    NOT_SOCKET                     :: -37;
    NO_ADDRESS                     :: -38;
    BAD_PROTOCOL                   :: -39;
    PROTOCOL_UNAVAILABLE           :: -40;
    PROTOCOL_NOT_SUPPORTED         :: -41;
    PROTOCOL_FAMILY_NOT_SUPPORTED  :: -42;
    ADDRESS_FAMILY_NOT_SUPPORTED   :: -43;
    SOCKET_NOT_SUPPORTED           :: -44;
    CONNECTION_RESET               :: -45;
    ALREADY_CONNECTED              :: -46;
    NOT_CONNECTED                  :: -47;
    CONNECTION_REFUSED             :: -48;
    NO_HOST                        :: -49;
    IN_PROGRESS                    :: -50;
    CANCELLED                      :: -51;
    MEMORY_ALREADY_MAPPED          :: -52;

    CRC_MISMATCH                   :: -100;

    FORMAT_NOT_SUPPORTED           :: -200;
    DEVICE_TYPE_NOT_SUPPORTED      :: -201;
    SHARE_MODE_NOT_SUPPORTED       :: -202;
    NO_BACKEND                     :: -203;
    NO_DEVICE                      :: -204;
    API_NOT_FOUND                  :: -205;
    INVALID_DEVICE_CONFIG          :: -206;
    LOOP                           :: -207;
    BACKEND_NOT_ENABLED            :: -208;

    DEVICE_NOT_INITIALIZED         :: -300;
    DEVICE_ALREADY_INITIALIZED     :: -301;
    DEVICE_NOT_STARTED             :: -302;
    DEVICE_NOT_STOPPED             :: -303;

    FAILED_TO_INIT_BACKEND         :: -400;
    FAILED_TO_OPEN_BACKEND_DEVICE  :: -401;
    FAILED_TO_START_BACKEND_DEVICE :: -402;
    FAILED_TO_STOP_BACKEND_DEVICE  :: -403;
}

ma_stream_format :: enum u32 {
    pcm :: 0;
}

ma_stream_layout :: enum u32 {
    interleaved   :: 0;
    deinterleaved :: 1;
}

ma_dither_mode :: enum u32 {
    none      :: 0;
    rectangle :: 1;
    triangle  :: 2;
}

ma_format :: enum u32 {
    unknown :: 0;
    _u8     :: 1;
    _s16    :: 2;
    s24     :: 3;
    _s32    :: 4;
    f32     :: 5;
    count   :: 6;
}

ma_standard_sample_rate :: enum u32 {
    _48000  :: 48000;
    _44100  :: 44100;

    _32000  :: 32000;
    _24000  :: 24000;
    _22050  :: 22050;

    _88200  :: 88200;
    _96000  :: 96000;
    _176400 :: 176400;
    _192000 :: 192000;

    _16000  :: 16000;
    _11025  :: 11250;
    _8000   :: 8000;

    _352800 :: 352800;
    _384000 :: 384000;

    min     :: 8000;
    max     :: 384000;
    count   :: 14;
}

ma_channel_mix_mode :: enum u32 {
    rectangular    :: 0;
    simple         :: 1;
    custom_weights :: 2;
    default        :: 0;
}

ma_standard_channel_map :: enum u32 {
    microsoft :: 0;
    alsa      :: 1;
    rfc3551   :: 2;
    flac      :: 3;
    vorbis    :: 4;
    sound4    :: 5;
    sndio     :: 6;
    webaudio  :: 3;
    default   :: 0;
}

ma_performance_profile :: enum u32 {
    low_latency  :: 0;
    conservative :: 1;
}

ma_allocation_callbacks :: struct {
    pUserData: *void;
    onMalloc:  #type (sz: u64, pUserData: *void) -> *void #c_call;
    onRealloc: #type (p: *void, sz: u64, pUserData: *void) -> *void #c_call;
    onFree:    #type (p: *void, pUserData: *void) -> void #c_call;
}

ma_lcg :: struct {
    state: ma_int32;
}

ma_atomic_uint32 :: struct {
    value: ma_uint32;
}
ma_atomic_int32 :: struct {
    value: ma_int32;
}
ma_atomic_uint64 :: struct {
    value: ma_uint64;
}
ma_atomic_float :: struct {
    value: ma_float;
}
ma_atomic_bool32 :: struct {
    value: ma_bool32;
}

/* Spinlocks are 32-bit for compatibility reasons. */
ma_spinlock :: ma_uint32;

/* Thread priorities should be ordered such that the default priority of the worker thread is 0. */
ma_thread_priority :: enum s32 {
    idle     :: -5;
    lowest   :: -4;
    low      :: -3;
    normal   :: -2;
    high     :: -1;
    highest  :: 0;
    realtime :: 1;
    default  :: 0;
}

ma_thread :: ma_pthread_t;

ma_mutex :: ma_pthread_mutex_t;

ma_event :: struct {
    value: ma_uint32;
    lock:  ma_pthread_mutex_t;
    cond:  ma_pthread_cond_t;
}

ma_semaphore :: struct {
    value: s32;
    lock:  ma_pthread_mutex_t;
    cond:  ma_pthread_cond_t;
}

/*
Retrieves the version of miniaudio as separated integers. Each component can be NULL if it's not required.
*/
ma_version :: (pMajor: *ma_uint32, pMinor: *ma_uint32, pRevision: *ma_uint32) -> void #foreign miniaudio;

/*
Retrieves the version of miniaudio as a string which can be useful for logging purposes.
*/
ma_version_string :: () -> *u8 #foreign miniaudio;

/*
The callback for handling log messages.


Parameters
----------
pUserData (in)
The user data pointer that was passed into ma_log_register_callback().

logLevel (in)
The log level. This can be one of the following:

+----------------------+
| Log Level            |
+----------------------+
| MA_LOG_LEVEL_DEBUG   |
| MA_LOG_LEVEL_INFO    |
| MA_LOG_LEVEL_WARNING |
| MA_LOG_LEVEL_ERROR   |
+----------------------+

pMessage (in)
The log message.
*/
ma_log_callback_proc :: #type (pUserData: *void, level: ma_uint32, pMessage: *u8) -> void #c_call;

ma_log_callback :: struct {
    onLog:     ma_log_callback_proc;
    pUserData: *void;
}

ma_log_callback_init :: (onLog: ma_log_callback_proc, pUserData: *void) -> ma_log_callback #foreign miniaudio;

ma_log :: struct {
    callbacks:           [4] ma_log_callback;
    callbackCount:       ma_uint32;
    allocationCallbacks: ma_allocation_callbacks; /* Need to store these persistently because ma_log_postv() might need to allocate a buffer on the heap. */

    lock:                ma_mutex; /* For thread safety just to make it easier and safer for the logging implementation. */
}

ma_log_init :: (pAllocationCallbacks: *ma_allocation_callbacks, pLog: *ma_log) -> ma_result #foreign miniaudio;

ma_log_uninit :: (pLog: *ma_log) -> void #foreign miniaudio;

ma_log_register_callback :: (pLog: *ma_log, callback: ma_log_callback) -> ma_result #foreign miniaudio;

ma_log_unregister_callback :: (pLog: *ma_log, callback: ma_log_callback) -> ma_result #foreign miniaudio;

ma_log_post :: (pLog: *ma_log, level: ma_uint32, pMessage: *u8) -> ma_result #foreign miniaudio;

ma_log_postf_CFormat :: (pLog: *ma_log, level: ma_uint32, pFormat: *u8, __args: ..Any) -> ma_result #foreign miniaudio "ma_log_postf";
ma_log_postf :: (pLog: *ma_log, level: ma_uint32, pFormat: string, __args: ..Any) -> ma_result {
    push_allocator(temp);
    formatted_text_builder: String_Builder;
    print_to_builder(*formatted_text_builder, pFormat, ..__args);
    append(*formatted_text_builder, "\0");
    formatted_text := builder_to_string(*formatted_text_builder);
    return ma_log_postf_CFormat(pLog, level, "%s", formatted_text.data);
} @PrintLike

/**************************************************************************************************************************************************************

Biquad Filtering

**************************************************************************************************************************************************************/
ma_biquad_coefficient :: union {
    f32:  float;
    _s32: ma_int32;
}

ma_biquad_config :: struct {
    format:   ma_format;
    channels: ma_uint32;
    b0:       float64;
    b1:       float64;
    b2:       float64;
    a0:       float64;
    a1:       float64;
    a2:       float64;
}

ma_biquad_config_init :: (format: ma_format, channels: ma_uint32, b0: float64, b1: float64, b2: float64, a0: float64, a1: float64, a2: float64) -> ma_biquad_config #foreign miniaudio;

ma_biquad :: struct {
    format:    ma_format;
    channels:  ma_uint32;
    b0:        ma_biquad_coefficient;
    b1:        ma_biquad_coefficient;
    b2:        ma_biquad_coefficient;
    a1:        ma_biquad_coefficient;
    a2:        ma_biquad_coefficient;
    pR1:       *ma_biquad_coefficient;
    pR2:       *ma_biquad_coefficient;

    /* Memory management. */
    _pHeap:    *void;
    _ownsHeap: ma_bool32;
}

ma_biquad_get_heap_size :: (pConfig: *ma_biquad_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_biquad_init_preallocated :: (pConfig: *ma_biquad_config, pHeap: *void, pBQ: *ma_biquad) -> ma_result #foreign miniaudio;

ma_biquad_init :: (pConfig: *ma_biquad_config, pAllocationCallbacks: *ma_allocation_callbacks, pBQ: *ma_biquad) -> ma_result #foreign miniaudio;

ma_biquad_uninit :: (pBQ: *ma_biquad, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_biquad_reinit :: (pConfig: *ma_biquad_config, pBQ: *ma_biquad) -> ma_result #foreign miniaudio;

ma_biquad_clear_cache :: (pBQ: *ma_biquad) -> ma_result #foreign miniaudio;

ma_biquad_process_pcm_frames :: (pBQ: *ma_biquad, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_biquad_get_latency :: (pBQ: *ma_biquad) -> ma_uint32 #foreign miniaudio;

/**************************************************************************************************************************************************************

Low-Pass Filtering

**************************************************************************************************************************************************************/
ma_lpf1_config :: struct {
    format:          ma_format;
    channels:        ma_uint32;
    sampleRate:      ma_uint32;
    cutoffFrequency: float64;
    q:               float64;
}

/**************************************************************************************************************************************************************

Low-Pass Filtering

**************************************************************************************************************************************************************/
ma_lpf2_config :: ma_lpf1_config;

/**************************************************************************************************************************************************************

Low-Pass Filter

**************************************************************************************************************************************************************/
ma_lpf1_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, cutoffFrequency: float64) -> ma_lpf1_config #foreign miniaudio;

ma_lpf2_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, cutoffFrequency: float64, q: float64) -> ma_lpf2_config #foreign miniaudio;

ma_lpf1 :: struct {
    format:    ma_format;
    channels:  ma_uint32;
    a:         ma_biquad_coefficient;
    pR1:       *ma_biquad_coefficient;

    /* Memory management. */
    _pHeap:    *void;
    _ownsHeap: ma_bool32;
}

ma_lpf1_get_heap_size :: (pConfig: *ma_lpf1_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_lpf1_init_preallocated :: (pConfig: *ma_lpf1_config, pHeap: *void, pLPF: *ma_lpf1) -> ma_result #foreign miniaudio;

ma_lpf1_init :: (pConfig: *ma_lpf1_config, pAllocationCallbacks: *ma_allocation_callbacks, pLPF: *ma_lpf1) -> ma_result #foreign miniaudio;

ma_lpf1_uninit :: (pLPF: *ma_lpf1, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_lpf1_reinit :: (pConfig: *ma_lpf1_config, pLPF: *ma_lpf1) -> ma_result #foreign miniaudio;

ma_lpf1_clear_cache :: (pLPF: *ma_lpf1) -> ma_result #foreign miniaudio;

ma_lpf1_process_pcm_frames :: (pLPF: *ma_lpf1, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_lpf1_get_latency :: (pLPF: *ma_lpf1) -> ma_uint32 #foreign miniaudio;

ma_lpf2 :: struct {
    bq: ma_biquad; /* The second order low-pass filter is implemented as a biquad filter. */
}

ma_lpf2_get_heap_size :: (pConfig: *ma_lpf2_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_lpf2_init_preallocated :: (pConfig: *ma_lpf2_config, pHeap: *void, pHPF: *ma_lpf2) -> ma_result #foreign miniaudio;

ma_lpf2_init :: (pConfig: *ma_lpf2_config, pAllocationCallbacks: *ma_allocation_callbacks, pLPF: *ma_lpf2) -> ma_result #foreign miniaudio;

ma_lpf2_uninit :: (pLPF: *ma_lpf2, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_lpf2_reinit :: (pConfig: *ma_lpf2_config, pLPF: *ma_lpf2) -> ma_result #foreign miniaudio;

ma_lpf2_clear_cache :: (pLPF: *ma_lpf2) -> ma_result #foreign miniaudio;

ma_lpf2_process_pcm_frames :: (pLPF: *ma_lpf2, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_lpf2_get_latency :: (pLPF: *ma_lpf2) -> ma_uint32 #foreign miniaudio;

ma_lpf_config :: struct {
    format:          ma_format;
    channels:        ma_uint32;
    sampleRate:      ma_uint32;
    cutoffFrequency: float64;
    order:           ma_uint32; /* If set to 0, will be treated as a passthrough (no filtering will be applied). */
}

ma_lpf_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, cutoffFrequency: float64, order: ma_uint32) -> ma_lpf_config #foreign miniaudio;

ma_lpf :: struct {
    format:     ma_format;
    channels:   ma_uint32;
    sampleRate: ma_uint32;
    lpf1Count:  ma_uint32;
    lpf2Count:  ma_uint32;
    pLPF1:      *ma_lpf1;
    pLPF2:      *ma_lpf2;

    /* Memory management. */
    _pHeap:     *void;
    _ownsHeap:  ma_bool32;
}

ma_lpf_get_heap_size :: (pConfig: *ma_lpf_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_lpf_init_preallocated :: (pConfig: *ma_lpf_config, pHeap: *void, pLPF: *ma_lpf) -> ma_result #foreign miniaudio;

ma_lpf_init :: (pConfig: *ma_lpf_config, pAllocationCallbacks: *ma_allocation_callbacks, pLPF: *ma_lpf) -> ma_result #foreign miniaudio;

ma_lpf_uninit :: (pLPF: *ma_lpf, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_lpf_reinit :: (pConfig: *ma_lpf_config, pLPF: *ma_lpf) -> ma_result #foreign miniaudio;

ma_lpf_clear_cache :: (pLPF: *ma_lpf) -> ma_result #foreign miniaudio;

ma_lpf_process_pcm_frames :: (pLPF: *ma_lpf, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_lpf_get_latency :: (pLPF: *ma_lpf) -> ma_uint32 #foreign miniaudio;

/**************************************************************************************************************************************************************

High-Pass Filtering

**************************************************************************************************************************************************************/
ma_hpf1_config :: struct {
    format:          ma_format;
    channels:        ma_uint32;
    sampleRate:      ma_uint32;
    cutoffFrequency: float64;
    q:               float64;
}

/**************************************************************************************************************************************************************

High-Pass Filtering

**************************************************************************************************************************************************************/
ma_hpf2_config :: ma_hpf1_config;

/**************************************************************************************************************************************************************

High-Pass Filtering

**************************************************************************************************************************************************************/
ma_hpf1_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, cutoffFrequency: float64) -> ma_hpf1_config #foreign miniaudio;

ma_hpf2_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, cutoffFrequency: float64, q: float64) -> ma_hpf2_config #foreign miniaudio;

ma_hpf1 :: struct {
    format:    ma_format;
    channels:  ma_uint32;
    a:         ma_biquad_coefficient;
    pR1:       *ma_biquad_coefficient;

    /* Memory management. */
    _pHeap:    *void;
    _ownsHeap: ma_bool32;
}

ma_hpf1_get_heap_size :: (pConfig: *ma_hpf1_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_hpf1_init_preallocated :: (pConfig: *ma_hpf1_config, pHeap: *void, pLPF: *ma_hpf1) -> ma_result #foreign miniaudio;

ma_hpf1_init :: (pConfig: *ma_hpf1_config, pAllocationCallbacks: *ma_allocation_callbacks, pHPF: *ma_hpf1) -> ma_result #foreign miniaudio;

ma_hpf1_uninit :: (pHPF: *ma_hpf1, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_hpf1_reinit :: (pConfig: *ma_hpf1_config, pHPF: *ma_hpf1) -> ma_result #foreign miniaudio;

ma_hpf1_process_pcm_frames :: (pHPF: *ma_hpf1, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_hpf1_get_latency :: (pHPF: *ma_hpf1) -> ma_uint32 #foreign miniaudio;

ma_hpf2 :: struct {
    bq: ma_biquad; /* The second order high-pass filter is implemented as a biquad filter. */
}

ma_hpf2_get_heap_size :: (pConfig: *ma_hpf2_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_hpf2_init_preallocated :: (pConfig: *ma_hpf2_config, pHeap: *void, pHPF: *ma_hpf2) -> ma_result #foreign miniaudio;

ma_hpf2_init :: (pConfig: *ma_hpf2_config, pAllocationCallbacks: *ma_allocation_callbacks, pHPF: *ma_hpf2) -> ma_result #foreign miniaudio;

ma_hpf2_uninit :: (pHPF: *ma_hpf2, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_hpf2_reinit :: (pConfig: *ma_hpf2_config, pHPF: *ma_hpf2) -> ma_result #foreign miniaudio;

ma_hpf2_process_pcm_frames :: (pHPF: *ma_hpf2, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_hpf2_get_latency :: (pHPF: *ma_hpf2) -> ma_uint32 #foreign miniaudio;

ma_hpf_config :: struct {
    format:          ma_format;
    channels:        ma_uint32;
    sampleRate:      ma_uint32;
    cutoffFrequency: float64;
    order:           ma_uint32; /* If set to 0, will be treated as a passthrough (no filtering will be applied). */
}

ma_hpf_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, cutoffFrequency: float64, order: ma_uint32) -> ma_hpf_config #foreign miniaudio;

ma_hpf :: struct {
    format:     ma_format;
    channels:   ma_uint32;
    sampleRate: ma_uint32;
    hpf1Count:  ma_uint32;
    hpf2Count:  ma_uint32;
    pHPF1:      *ma_hpf1;
    pHPF2:      *ma_hpf2;

    /* Memory management. */
    _pHeap:     *void;
    _ownsHeap:  ma_bool32;
}

ma_hpf_get_heap_size :: (pConfig: *ma_hpf_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_hpf_init_preallocated :: (pConfig: *ma_hpf_config, pHeap: *void, pLPF: *ma_hpf) -> ma_result #foreign miniaudio;

ma_hpf_init :: (pConfig: *ma_hpf_config, pAllocationCallbacks: *ma_allocation_callbacks, pHPF: *ma_hpf) -> ma_result #foreign miniaudio;

ma_hpf_uninit :: (pHPF: *ma_hpf, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_hpf_reinit :: (pConfig: *ma_hpf_config, pHPF: *ma_hpf) -> ma_result #foreign miniaudio;

ma_hpf_process_pcm_frames :: (pHPF: *ma_hpf, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_hpf_get_latency :: (pHPF: *ma_hpf) -> ma_uint32 #foreign miniaudio;

/**************************************************************************************************************************************************************

Band-Pass Filtering

**************************************************************************************************************************************************************/
ma_bpf2_config :: struct {
    format:          ma_format;
    channels:        ma_uint32;
    sampleRate:      ma_uint32;
    cutoffFrequency: float64;
    q:               float64;
}

/**************************************************************************************************************************************************************

Band-Pass Filtering

**************************************************************************************************************************************************************/
ma_bpf2_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, cutoffFrequency: float64, q: float64) -> ma_bpf2_config #foreign miniaudio;

ma_bpf2 :: struct {
    bq: ma_biquad; /* The second order band-pass filter is implemented as a biquad filter. */
}

ma_bpf2_get_heap_size :: (pConfig: *ma_bpf2_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_bpf2_init_preallocated :: (pConfig: *ma_bpf2_config, pHeap: *void, pBPF: *ma_bpf2) -> ma_result #foreign miniaudio;

ma_bpf2_init :: (pConfig: *ma_bpf2_config, pAllocationCallbacks: *ma_allocation_callbacks, pBPF: *ma_bpf2) -> ma_result #foreign miniaudio;

ma_bpf2_uninit :: (pBPF: *ma_bpf2, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_bpf2_reinit :: (pConfig: *ma_bpf2_config, pBPF: *ma_bpf2) -> ma_result #foreign miniaudio;

ma_bpf2_process_pcm_frames :: (pBPF: *ma_bpf2, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_bpf2_get_latency :: (pBPF: *ma_bpf2) -> ma_uint32 #foreign miniaudio;

ma_bpf_config :: struct {
    format:          ma_format;
    channels:        ma_uint32;
    sampleRate:      ma_uint32;
    cutoffFrequency: float64;
    order:           ma_uint32; /* If set to 0, will be treated as a passthrough (no filtering will be applied). */
}

ma_bpf_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, cutoffFrequency: float64, order: ma_uint32) -> ma_bpf_config #foreign miniaudio;

ma_bpf :: struct {
    format:    ma_format;
    channels:  ma_uint32;
    bpf2Count: ma_uint32;
    pBPF2:     *ma_bpf2;

    /* Memory management. */
    _pHeap:    *void;
    _ownsHeap: ma_bool32;
}

ma_bpf_get_heap_size :: (pConfig: *ma_bpf_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_bpf_init_preallocated :: (pConfig: *ma_bpf_config, pHeap: *void, pBPF: *ma_bpf) -> ma_result #foreign miniaudio;

ma_bpf_init :: (pConfig: *ma_bpf_config, pAllocationCallbacks: *ma_allocation_callbacks, pBPF: *ma_bpf) -> ma_result #foreign miniaudio;

ma_bpf_uninit :: (pBPF: *ma_bpf, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_bpf_reinit :: (pConfig: *ma_bpf_config, pBPF: *ma_bpf) -> ma_result #foreign miniaudio;

ma_bpf_process_pcm_frames :: (pBPF: *ma_bpf, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_bpf_get_latency :: (pBPF: *ma_bpf) -> ma_uint32 #foreign miniaudio;

/**************************************************************************************************************************************************************

Notching Filter

**************************************************************************************************************************************************************/
ma_notch2_config :: struct {
    format:     ma_format;
    channels:   ma_uint32;
    sampleRate: ma_uint32;
    q:          float64;
    frequency:  float64;
}

/**************************************************************************************************************************************************************

Notching Filter

**************************************************************************************************************************************************************/
ma_notch_config :: ma_notch2_config;

/**************************************************************************************************************************************************************

Notching Filter

**************************************************************************************************************************************************************/
ma_notch2_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, q: float64, frequency: float64) -> ma_notch2_config #foreign miniaudio;

ma_notch2 :: struct {
    bq: ma_biquad;
}

ma_notch2_get_heap_size :: (pConfig: *ma_notch2_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_notch2_init_preallocated :: (pConfig: *ma_notch2_config, pHeap: *void, pFilter: *ma_notch2) -> ma_result #foreign miniaudio;

ma_notch2_init :: (pConfig: *ma_notch2_config, pAllocationCallbacks: *ma_allocation_callbacks, pFilter: *ma_notch2) -> ma_result #foreign miniaudio;

ma_notch2_uninit :: (pFilter: *ma_notch2, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_notch2_reinit :: (pConfig: *ma_notch2_config, pFilter: *ma_notch2) -> ma_result #foreign miniaudio;

ma_notch2_process_pcm_frames :: (pFilter: *ma_notch2, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_notch2_get_latency :: (pFilter: *ma_notch2) -> ma_uint32 #foreign miniaudio;

/**************************************************************************************************************************************************************

Peaking EQ Filter

**************************************************************************************************************************************************************/
ma_peak2_config :: struct {
    format:     ma_format;
    channels:   ma_uint32;
    sampleRate: ma_uint32;
    gainDB:     float64;
    q:          float64;
    frequency:  float64;
}

/**************************************************************************************************************************************************************

Peaking EQ Filter

**************************************************************************************************************************************************************/
ma_peak_config :: ma_peak2_config;

/**************************************************************************************************************************************************************

Peaking EQ Filter

**************************************************************************************************************************************************************/
ma_peak2_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, gainDB: float64, q: float64, frequency: float64) -> ma_peak2_config #foreign miniaudio;

ma_peak2 :: struct {
    bq: ma_biquad;
}

ma_peak2_get_heap_size :: (pConfig: *ma_peak2_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_peak2_init_preallocated :: (pConfig: *ma_peak2_config, pHeap: *void, pFilter: *ma_peak2) -> ma_result #foreign miniaudio;

ma_peak2_init :: (pConfig: *ma_peak2_config, pAllocationCallbacks: *ma_allocation_callbacks, pFilter: *ma_peak2) -> ma_result #foreign miniaudio;

ma_peak2_uninit :: (pFilter: *ma_peak2, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_peak2_reinit :: (pConfig: *ma_peak2_config, pFilter: *ma_peak2) -> ma_result #foreign miniaudio;

ma_peak2_process_pcm_frames :: (pFilter: *ma_peak2, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_peak2_get_latency :: (pFilter: *ma_peak2) -> ma_uint32 #foreign miniaudio;

/**************************************************************************************************************************************************************

Low Shelf Filter

**************************************************************************************************************************************************************/
ma_loshelf2_config :: struct {
    format:     ma_format;
    channels:   ma_uint32;
    sampleRate: ma_uint32;
    gainDB:     float64;
    shelfSlope: float64;
    frequency:  float64;
}

/**************************************************************************************************************************************************************

Low Shelf Filter

**************************************************************************************************************************************************************/
ma_loshelf_config :: ma_loshelf2_config;

/**************************************************************************************************************************************************************

Low Shelf Filter

**************************************************************************************************************************************************************/
ma_loshelf2_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, gainDB: float64, shelfSlope: float64, frequency: float64) -> ma_loshelf2_config #foreign miniaudio;

ma_loshelf2 :: struct {
    bq: ma_biquad;
}

ma_loshelf2_get_heap_size :: (pConfig: *ma_loshelf2_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_loshelf2_init_preallocated :: (pConfig: *ma_loshelf2_config, pHeap: *void, pFilter: *ma_loshelf2) -> ma_result #foreign miniaudio;

ma_loshelf2_init :: (pConfig: *ma_loshelf2_config, pAllocationCallbacks: *ma_allocation_callbacks, pFilter: *ma_loshelf2) -> ma_result #foreign miniaudio;

ma_loshelf2_uninit :: (pFilter: *ma_loshelf2, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_loshelf2_reinit :: (pConfig: *ma_loshelf2_config, pFilter: *ma_loshelf2) -> ma_result #foreign miniaudio;

ma_loshelf2_process_pcm_frames :: (pFilter: *ma_loshelf2, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_loshelf2_get_latency :: (pFilter: *ma_loshelf2) -> ma_uint32 #foreign miniaudio;

/**************************************************************************************************************************************************************

High Shelf Filter

**************************************************************************************************************************************************************/
ma_hishelf2_config :: struct {
    format:     ma_format;
    channels:   ma_uint32;
    sampleRate: ma_uint32;
    gainDB:     float64;
    shelfSlope: float64;
    frequency:  float64;
}

/**************************************************************************************************************************************************************

High Shelf Filter

**************************************************************************************************************************************************************/
ma_hishelf_config :: ma_hishelf2_config;

/**************************************************************************************************************************************************************

High Shelf Filter

**************************************************************************************************************************************************************/
ma_hishelf2_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, gainDB: float64, shelfSlope: float64, frequency: float64) -> ma_hishelf2_config #foreign miniaudio;

ma_hishelf2 :: struct {
    bq: ma_biquad;
}

ma_hishelf2_get_heap_size :: (pConfig: *ma_hishelf2_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_hishelf2_init_preallocated :: (pConfig: *ma_hishelf2_config, pHeap: *void, pFilter: *ma_hishelf2) -> ma_result #foreign miniaudio;

ma_hishelf2_init :: (pConfig: *ma_hishelf2_config, pAllocationCallbacks: *ma_allocation_callbacks, pFilter: *ma_hishelf2) -> ma_result #foreign miniaudio;

ma_hishelf2_uninit :: (pFilter: *ma_hishelf2, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_hishelf2_reinit :: (pConfig: *ma_hishelf2_config, pFilter: *ma_hishelf2) -> ma_result #foreign miniaudio;

ma_hishelf2_process_pcm_frames :: (pFilter: *ma_hishelf2, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_hishelf2_get_latency :: (pFilter: *ma_hishelf2) -> ma_uint32 #foreign miniaudio;

/*
Delay
*/
ma_delay_config :: struct {
    channels:      ma_uint32;
    sampleRate:    ma_uint32;
    delayInFrames: ma_uint32;
    delayStart:    ma_bool32; /* Set to true to delay the start of the output; false otherwise. */
    wet:           float; /* 0..1. Default = 1. */
    dry:           float; /* 0..1. Default = 1. */
    decay:         float; /* 0..1. Default = 0 (no feedback). Feedback decay. Use this for echo. */
}

/*
Delay
*/
ma_delay_config_init :: (channels: ma_uint32, sampleRate: ma_uint32, delayInFrames: ma_uint32, decay: float) -> ma_delay_config #foreign miniaudio;

ma_delay :: struct {
    config:             ma_delay_config;
    cursor:             ma_uint32; /* Feedback is written to this cursor. Always equal or in front of the read cursor. */
    bufferSizeInFrames: ma_uint32;
    pBuffer:            *float;
}

ma_delay_init :: (pConfig: *ma_delay_config, pAllocationCallbacks: *ma_allocation_callbacks, pDelay: *ma_delay) -> ma_result #foreign miniaudio;

ma_delay_uninit :: (pDelay: *ma_delay, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_delay_process_pcm_frames :: (pDelay: *ma_delay, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint32) -> ma_result #foreign miniaudio;

ma_delay_set_wet :: (pDelay: *ma_delay, value: float) -> void #foreign miniaudio;

ma_delay_get_wet :: (pDelay: *ma_delay) -> float #foreign miniaudio;

ma_delay_set_dry :: (pDelay: *ma_delay, value: float) -> void #foreign miniaudio;

ma_delay_get_dry :: (pDelay: *ma_delay) -> float #foreign miniaudio;

ma_delay_set_decay :: (pDelay: *ma_delay, value: float) -> void #foreign miniaudio;

ma_delay_get_decay :: (pDelay: *ma_delay) -> float #foreign miniaudio;

/* Gainer for smooth volume changes. */
ma_gainer_config :: struct {
    channels:           ma_uint32;
    smoothTimeInFrames: ma_uint32;
}

ma_gainer_config_init :: (channels: ma_uint32, smoothTimeInFrames: ma_uint32) -> ma_gainer_config #foreign miniaudio;

ma_gainer :: struct {
    config:       ma_gainer_config;
    t:            ma_uint32;
    masterVolume: float;
    pOldGains:    *float;
    pNewGains:    *float;

    /* Memory management. */
    _pHeap:       *void;
    _ownsHeap:    ma_bool32;
}

ma_gainer_get_heap_size :: (pConfig: *ma_gainer_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_gainer_init_preallocated :: (pConfig: *ma_gainer_config, pHeap: *void, pGainer: *ma_gainer) -> ma_result #foreign miniaudio;

ma_gainer_init :: (pConfig: *ma_gainer_config, pAllocationCallbacks: *ma_allocation_callbacks, pGainer: *ma_gainer) -> ma_result #foreign miniaudio;

ma_gainer_uninit :: (pGainer: *ma_gainer, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_gainer_process_pcm_frames :: (pGainer: *ma_gainer, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_gainer_set_gain :: (pGainer: *ma_gainer, newGain: float) -> ma_result #foreign miniaudio;

ma_gainer_set_gains :: (pGainer: *ma_gainer, pNewGains: *float) -> ma_result #foreign miniaudio;

ma_gainer_set_master_volume :: (pGainer: *ma_gainer, volume: float) -> ma_result #foreign miniaudio;

ma_gainer_get_master_volume :: (pGainer: *ma_gainer, pVolume: *float) -> ma_result #foreign miniaudio;

/* Stereo panner. */
ma_pan_mode :: enum u32 {
    balance :: 0;
    pan     :: 1;
}

ma_panner_config :: struct {
    format:   ma_format;
    channels: ma_uint32;
    mode:     ma_pan_mode;
    pan:      float;
}

ma_panner_config_init :: (format: ma_format, channels: ma_uint32) -> ma_panner_config #foreign miniaudio;

ma_panner :: struct {
    format:   ma_format;
    channels: ma_uint32;
    mode:     ma_pan_mode;
    pan:      float; /* -1..1 where 0 is no pan, -1 is left side, +1 is right side. Defaults to 0. */
}

ma_panner_init :: (pConfig: *ma_panner_config, pPanner: *ma_panner) -> ma_result #foreign miniaudio;

ma_panner_process_pcm_frames :: (pPanner: *ma_panner, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_panner_set_mode :: (pPanner: *ma_panner, mode: ma_pan_mode) -> void #foreign miniaudio;

ma_panner_get_mode :: (pPanner: *ma_panner) -> ma_pan_mode #foreign miniaudio;

ma_panner_set_pan :: (pPanner: *ma_panner, pan: float) -> void #foreign miniaudio;

ma_panner_get_pan :: (pPanner: *ma_panner) -> float #foreign miniaudio;

/* Fader. */
ma_fader_config :: struct {
    format:     ma_format;
    channels:   ma_uint32;
    sampleRate: ma_uint32;
}

ma_fader_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32) -> ma_fader_config #foreign miniaudio;

ma_fader :: struct {
    config:         ma_fader_config;
    volumeBeg:      float; /* If volumeBeg and volumeEnd is equal to 1, no fading happens (ma_fader_process_pcm_frames() will run as a passthrough). */
    volumeEnd:      float;
    lengthInFrames: ma_uint64; /* The total length of the fade. */
    cursorInFrames: ma_int64; /* The current time in frames. Incremented by ma_fader_process_pcm_frames(). Signed because it'll be offset by startOffsetInFrames in set_fade_ex(). */
}

ma_fader_init :: (pConfig: *ma_fader_config, pFader: *ma_fader) -> ma_result #foreign miniaudio;

ma_fader_process_pcm_frames :: (pFader: *ma_fader, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_fader_get_data_format :: (pFader: *ma_fader, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32) -> void #foreign miniaudio;

ma_fader_set_fade :: (pFader: *ma_fader, volumeBeg: float, volumeEnd: float, lengthInFrames: ma_uint64) -> void #foreign miniaudio;

ma_fader_set_fade_ex :: (pFader: *ma_fader, volumeBeg: float, volumeEnd: float, lengthInFrames: ma_uint64, startOffsetInFrames: ma_int64) -> void #foreign miniaudio;

ma_fader_get_current_volume :: (pFader: *ma_fader) -> float #foreign miniaudio;

/* Spatializer. */
ma_vec3f :: struct {
    x: float;
    y: float;
    z: float;
}

ma_atomic_vec3f :: struct {
    v:    ma_vec3f;
    lock: ma_spinlock;
}

ma_attenuation_model :: enum u32 {
    none        :: 0;
    inverse     :: 1;
    linear      :: 2;
    exponential :: 3;
}

ma_positioning :: enum u32 {
    absolute :: 0;
    relative :: 1;
}

ma_handedness :: enum u32 {
    right :: 0;
    left  :: 1;
}

ma_spatializer_listener_config :: struct {
    channelsOut:             ma_uint32;
    pChannelMapOut:          *ma_channel;
    handedness:              ma_handedness; /* Defaults to right. Forward is -1 on the Z axis. In a left handed system, forward is +1 on the Z axis. */
    coneInnerAngleInRadians: float;
    coneOuterAngleInRadians: float;
    coneOuterGain:           float;
    speedOfSound:            float;
    worldUp:                 ma_vec3f;
}

ma_spatializer_listener_config_init :: (channelsOut: ma_uint32) -> ma_spatializer_listener_config #foreign miniaudio;

ma_spatializer_listener :: struct {
    config:    ma_spatializer_listener_config;
    position:  ma_atomic_vec3f; /* The absolute position of the listener. */
    direction: ma_atomic_vec3f; /* The direction the listener is facing. The world up vector is config.worldUp. */
    velocity:  ma_atomic_vec3f;
    isEnabled: ma_bool32;

    /* Memory management. */
    _ownsHeap: ma_bool32;
    _pHeap:    *void;
}

ma_spatializer_listener_get_heap_size :: (pConfig: *ma_spatializer_listener_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_spatializer_listener_init_preallocated :: (pConfig: *ma_spatializer_listener_config, pHeap: *void, pListener: *ma_spatializer_listener) -> ma_result #foreign miniaudio;

ma_spatializer_listener_init :: (pConfig: *ma_spatializer_listener_config, pAllocationCallbacks: *ma_allocation_callbacks, pListener: *ma_spatializer_listener) -> ma_result #foreign miniaudio;

ma_spatializer_listener_uninit :: (pListener: *ma_spatializer_listener, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_spatializer_listener_get_channel_map :: (pListener: *ma_spatializer_listener) -> *ma_channel #foreign miniaudio;

ma_spatializer_listener_set_cone :: (pListener: *ma_spatializer_listener, innerAngleInRadians: float, outerAngleInRadians: float, outerGain: float) -> void #foreign miniaudio;

ma_spatializer_listener_get_cone :: (pListener: *ma_spatializer_listener, pInnerAngleInRadians: *float, pOuterAngleInRadians: *float, pOuterGain: *float) -> void #foreign miniaudio;

ma_spatializer_listener_set_position :: (pListener: *ma_spatializer_listener, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_spatializer_listener_get_position :: (pListener: *ma_spatializer_listener) -> ma_vec3f #foreign miniaudio;

ma_spatializer_listener_set_direction :: (pListener: *ma_spatializer_listener, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_spatializer_listener_get_direction :: (pListener: *ma_spatializer_listener) -> ma_vec3f #foreign miniaudio;

ma_spatializer_listener_set_velocity :: (pListener: *ma_spatializer_listener, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_spatializer_listener_get_velocity :: (pListener: *ma_spatializer_listener) -> ma_vec3f #foreign miniaudio;

ma_spatializer_listener_set_speed_of_sound :: (pListener: *ma_spatializer_listener, speedOfSound: float) -> void #foreign miniaudio;

ma_spatializer_listener_get_speed_of_sound :: (pListener: *ma_spatializer_listener) -> float #foreign miniaudio;

ma_spatializer_listener_set_world_up :: (pListener: *ma_spatializer_listener, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_spatializer_listener_get_world_up :: (pListener: *ma_spatializer_listener) -> ma_vec3f #foreign miniaudio;

ma_spatializer_listener_set_enabled :: (pListener: *ma_spatializer_listener, isEnabled: ma_bool32) -> void #foreign miniaudio;

ma_spatializer_listener_is_enabled :: (pListener: *ma_spatializer_listener) -> ma_bool32 #foreign miniaudio;

ma_spatializer_config :: struct {
    channelsIn:                   ma_uint32;
    channelsOut:                  ma_uint32;
    pChannelMapIn:                *ma_channel;
    attenuationModel:             ma_attenuation_model;
    positioning:                  ma_positioning;
    handedness:                   ma_handedness; /* Defaults to right. Forward is -1 on the Z axis. In a left handed system, forward is +1 on the Z axis. */
    minGain:                      float;
    maxGain:                      float;
    minDistance:                  float;
    maxDistance:                  float;
    rolloff:                      float;
    coneInnerAngleInRadians:      float;
    coneOuterAngleInRadians:      float;
    coneOuterGain:                float;
    dopplerFactor:                float; /* Set to 0 to disable doppler effect. */
    directionalAttenuationFactor: float; /* Set to 0 to disable directional attenuation. */
    minSpatializationChannelGain: float; /* The minimal scaling factor to apply to channel gains when accounting for the direction of the sound relative to the listener. Must be in the range of 0..1. Smaller values means more aggressive directional panning, larger values means more subtle directional panning. */
    gainSmoothTimeInFrames:       ma_uint32; /* When the gain of a channel changes during spatialization, the transition will be linearly interpolated over this number of frames. */
}

ma_spatializer_config_init :: (channelsIn: ma_uint32, channelsOut: ma_uint32) -> ma_spatializer_config #foreign miniaudio;

ma_spatializer :: struct {
    channelsIn:                   ma_uint32;
    channelsOut:                  ma_uint32;
    pChannelMapIn:                *ma_channel;
    attenuationModel:             ma_attenuation_model;
    positioning:                  ma_positioning;
    handedness:                   ma_handedness; /* Defaults to right. Forward is -1 on the Z axis. In a left handed system, forward is +1 on the Z axis. */
    minGain:                      float;
    maxGain:                      float;
    minDistance:                  float;
    maxDistance:                  float;
    rolloff:                      float;
    coneInnerAngleInRadians:      float;
    coneOuterAngleInRadians:      float;
    coneOuterGain:                float;
    dopplerFactor:                float; /* Set to 0 to disable doppler effect. */
    directionalAttenuationFactor: float; /* Set to 0 to disable directional attenuation. */
    gainSmoothTimeInFrames:       ma_uint32; /* When the gain of a channel changes during spatialization, the transition will be linearly interpolated over this number of frames. */
    position:                     ma_atomic_vec3f;
    direction:                    ma_atomic_vec3f;
    velocity:                     ma_atomic_vec3f; /* For doppler effect. */
    dopplerPitch:                 float; /* Will be updated by ma_spatializer_process_pcm_frames() and can be used by higher level functions to apply a pitch shift for doppler effect. */
    minSpatializationChannelGain: float;
    gainer:                       ma_gainer; /* For smooth gain transitions. */
    pNewChannelGainsOut:          *float; /* An offset of _pHeap. Used by ma_spatializer_process_pcm_frames() to store new channel gains. The number of elements in this array is equal to config.channelsOut. */

    /* Memory management. */
    _pHeap:                       *void;
    _ownsHeap:                    ma_bool32;
}

ma_spatializer_get_heap_size :: (pConfig: *ma_spatializer_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_spatializer_init_preallocated :: (pConfig: *ma_spatializer_config, pHeap: *void, pSpatializer: *ma_spatializer) -> ma_result #foreign miniaudio;

ma_spatializer_init :: (pConfig: *ma_spatializer_config, pAllocationCallbacks: *ma_allocation_callbacks, pSpatializer: *ma_spatializer) -> ma_result #foreign miniaudio;

ma_spatializer_uninit :: (pSpatializer: *ma_spatializer, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_spatializer_process_pcm_frames :: (pSpatializer: *ma_spatializer, pListener: *ma_spatializer_listener, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_spatializer_set_master_volume :: (pSpatializer: *ma_spatializer, volume: float) -> ma_result #foreign miniaudio;

ma_spatializer_get_master_volume :: (pSpatializer: *ma_spatializer, pVolume: *float) -> ma_result #foreign miniaudio;

ma_spatializer_get_input_channels :: (pSpatializer: *ma_spatializer) -> ma_uint32 #foreign miniaudio;

ma_spatializer_get_output_channels :: (pSpatializer: *ma_spatializer) -> ma_uint32 #foreign miniaudio;

ma_spatializer_set_attenuation_model :: (pSpatializer: *ma_spatializer, attenuationModel: ma_attenuation_model) -> void #foreign miniaudio;

ma_spatializer_get_attenuation_model :: (pSpatializer: *ma_spatializer) -> ma_attenuation_model #foreign miniaudio;

ma_spatializer_set_positioning :: (pSpatializer: *ma_spatializer, positioning: ma_positioning) -> void #foreign miniaudio;

ma_spatializer_get_positioning :: (pSpatializer: *ma_spatializer) -> ma_positioning #foreign miniaudio;

ma_spatializer_set_rolloff :: (pSpatializer: *ma_spatializer, rolloff: float) -> void #foreign miniaudio;

ma_spatializer_get_rolloff :: (pSpatializer: *ma_spatializer) -> float #foreign miniaudio;

ma_spatializer_set_min_gain :: (pSpatializer: *ma_spatializer, minGain: float) -> void #foreign miniaudio;

ma_spatializer_get_min_gain :: (pSpatializer: *ma_spatializer) -> float #foreign miniaudio;

ma_spatializer_set_max_gain :: (pSpatializer: *ma_spatializer, maxGain: float) -> void #foreign miniaudio;

ma_spatializer_get_max_gain :: (pSpatializer: *ma_spatializer) -> float #foreign miniaudio;

ma_spatializer_set_min_distance :: (pSpatializer: *ma_spatializer, minDistance: float) -> void #foreign miniaudio;

ma_spatializer_get_min_distance :: (pSpatializer: *ma_spatializer) -> float #foreign miniaudio;

ma_spatializer_set_max_distance :: (pSpatializer: *ma_spatializer, maxDistance: float) -> void #foreign miniaudio;

ma_spatializer_get_max_distance :: (pSpatializer: *ma_spatializer) -> float #foreign miniaudio;

ma_spatializer_set_cone :: (pSpatializer: *ma_spatializer, innerAngleInRadians: float, outerAngleInRadians: float, outerGain: float) -> void #foreign miniaudio;

ma_spatializer_get_cone :: (pSpatializer: *ma_spatializer, pInnerAngleInRadians: *float, pOuterAngleInRadians: *float, pOuterGain: *float) -> void #foreign miniaudio;

ma_spatializer_set_doppler_factor :: (pSpatializer: *ma_spatializer, dopplerFactor: float) -> void #foreign miniaudio;

ma_spatializer_get_doppler_factor :: (pSpatializer: *ma_spatializer) -> float #foreign miniaudio;

ma_spatializer_set_directional_attenuation_factor :: (pSpatializer: *ma_spatializer, directionalAttenuationFactor: float) -> void #foreign miniaudio;

ma_spatializer_get_directional_attenuation_factor :: (pSpatializer: *ma_spatializer) -> float #foreign miniaudio;

ma_spatializer_set_position :: (pSpatializer: *ma_spatializer, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_spatializer_get_position :: (pSpatializer: *ma_spatializer) -> ma_vec3f #foreign miniaudio;

ma_spatializer_set_direction :: (pSpatializer: *ma_spatializer, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_spatializer_get_direction :: (pSpatializer: *ma_spatializer) -> ma_vec3f #foreign miniaudio;

ma_spatializer_set_velocity :: (pSpatializer: *ma_spatializer, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_spatializer_get_velocity :: (pSpatializer: *ma_spatializer) -> ma_vec3f #foreign miniaudio;

ma_spatializer_get_relative_position_and_direction :: (pSpatializer: *ma_spatializer, pListener: *ma_spatializer_listener, pRelativePos: *ma_vec3f, pRelativeDir: *ma_vec3f) -> void #foreign miniaudio;

/**************************************************************************************************************************************************************

Resampling

**************************************************************************************************************************************************************/
ma_linear_resampler_config :: struct {
    format:           ma_format;
    channels:         ma_uint32;
    sampleRateIn:     ma_uint32;
    sampleRateOut:    ma_uint32;
    lpfOrder:         ma_uint32; /* The low-pass filter order. Setting this to 0 will disable low-pass filtering. */
    lpfNyquistFactor: float64; /* 0..1. Defaults to 1. 1 = Half the sampling frequency (Nyquist Frequency), 0.5 = Quarter the sampling frequency (half Nyquest Frequency), etc. */
}

/**************************************************************************************************************************************************************

Resampling

**************************************************************************************************************************************************************/
ma_linear_resampler_config_init :: (format: ma_format, channels: ma_uint32, sampleRateIn: ma_uint32, sampleRateOut: ma_uint32) -> ma_linear_resampler_config #foreign miniaudio;

ma_linear_resampler :: struct {
    config:        ma_linear_resampler_config;
    inAdvanceInt:  ma_uint32;
    inAdvanceFrac: ma_uint32;
    inTimeInt:     ma_uint32;
    inTimeFrac:    ma_uint32;
    x0:            union {
        f32:  *float;
        _s16: *ma_int16;
    }; /* The previous input frame. */

    x1:            union {
        f32:  *float;
        _s16: *ma_int16;
    }; /* The next input frame. */

    lpf:           ma_lpf;

    /* Memory management. */
    _pHeap:        *void;
    _ownsHeap:     ma_bool32;
}

ma_linear_resampler_get_heap_size :: (pConfig: *ma_linear_resampler_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_linear_resampler_init_preallocated :: (pConfig: *ma_linear_resampler_config, pHeap: *void, pResampler: *ma_linear_resampler) -> ma_result #foreign miniaudio;

ma_linear_resampler_init :: (pConfig: *ma_linear_resampler_config, pAllocationCallbacks: *ma_allocation_callbacks, pResampler: *ma_linear_resampler) -> ma_result #foreign miniaudio;

ma_linear_resampler_uninit :: (pResampler: *ma_linear_resampler, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_linear_resampler_process_pcm_frames :: (pResampler: *ma_linear_resampler, pFramesIn: *void, pFrameCountIn: *ma_uint64, pFramesOut: *void, pFrameCountOut: *ma_uint64) -> ma_result #foreign miniaudio;

ma_linear_resampler_set_rate :: (pResampler: *ma_linear_resampler, sampleRateIn: ma_uint32, sampleRateOut: ma_uint32) -> ma_result #foreign miniaudio;

ma_linear_resampler_set_rate_ratio :: (pResampler: *ma_linear_resampler, ratioInOut: float) -> ma_result #foreign miniaudio;

ma_linear_resampler_get_input_latency :: (pResampler: *ma_linear_resampler) -> ma_uint64 #foreign miniaudio;

ma_linear_resampler_get_output_latency :: (pResampler: *ma_linear_resampler) -> ma_uint64 #foreign miniaudio;

ma_linear_resampler_get_required_input_frame_count :: (pResampler: *ma_linear_resampler, outputFrameCount: ma_uint64, pInputFrameCount: *ma_uint64) -> ma_result #foreign miniaudio;

ma_linear_resampler_get_expected_output_frame_count :: (pResampler: *ma_linear_resampler, inputFrameCount: ma_uint64, pOutputFrameCount: *ma_uint64) -> ma_result #foreign miniaudio;

ma_linear_resampler_reset :: (pResampler: *ma_linear_resampler) -> ma_result #foreign miniaudio;

ma_resampling_backend :: void;
ma_resampling_backend_vtable :: struct {
    onGetHeapSize:                 #type (pUserData: *void, pConfig: *ma_resampler_config, pHeapSizeInBytes: *u64) -> ma_result #c_call;
    onInit:                        #type (pUserData: *void, pConfig: *ma_resampler_config, pHeap: *void, ppBackend: **ma_resampling_backend) -> ma_result #c_call;
    onUninit:                      #type (pUserData: *void, pBackend: *ma_resampling_backend, pAllocationCallbacks: *ma_allocation_callbacks) -> void #c_call;
    onProcess:                     #type (pUserData: *void, pBackend: *ma_resampling_backend, pFramesIn: *void, pFrameCountIn: *ma_uint64, pFramesOut: *void, pFrameCountOut: *ma_uint64) -> ma_result #c_call;
    onSetRate:                     #type (pUserData: *void, pBackend: *ma_resampling_backend, sampleRateIn: ma_uint32, sampleRateOut: ma_uint32) -> ma_result #c_call; /* Optional. Rate changes will be disabled. */
    onGetInputLatency:             #type (pUserData: *void, pBackend: *ma_resampling_backend) -> ma_uint64 #c_call; /* Optional. Latency will be reported as 0. */
    onGetOutputLatency:            #type (pUserData: *void, pBackend: *ma_resampling_backend) -> ma_uint64 #c_call; /* Optional. Latency will be reported as 0. */
    onGetRequiredInputFrameCount:  #type (pUserData: *void, pBackend: *ma_resampling_backend, outputFrameCount: ma_uint64, pInputFrameCount: *ma_uint64) -> ma_result #c_call; /* Optional. Latency mitigation will be disabled. */
    onGetExpectedOutputFrameCount: #type (pUserData: *void, pBackend: *ma_resampling_backend, inputFrameCount: ma_uint64, pOutputFrameCount: *ma_uint64) -> ma_result #c_call; /* Optional. Latency mitigation will be disabled. */
    onReset:                       #type (pUserData: *void, pBackend: *ma_resampling_backend) -> ma_result #c_call;
}

ma_resample_algorithm :: enum u32 {
    linear :: 0;
    custom :: 1;
}

ma_resampler_config :: struct {
    format:           ma_format; /* Must be either ma_format_f32 or ma_format_s16. */
    channels:         ma_uint32;
    sampleRateIn:     ma_uint32;
    sampleRateOut:    ma_uint32;
    algorithm:        ma_resample_algorithm; /* When set to ma_resample_algorithm_custom, pBackendVTable will be used. */
    pBackendVTable:   *ma_resampling_backend_vtable;
    pBackendUserData: *void;
    linear:           struct {
        lpfOrder: ma_uint32;
    };
}

ma_resampler_config_init :: (format: ma_format, channels: ma_uint32, sampleRateIn: ma_uint32, sampleRateOut: ma_uint32, algorithm: ma_resample_algorithm) -> ma_resampler_config #foreign miniaudio;

ma_resampler :: struct {
    pBackend:         *ma_resampling_backend;
    pBackendVTable:   *ma_resampling_backend_vtable;
    pBackendUserData: *void;
    format:           ma_format;
    channels:         ma_uint32;
    sampleRateIn:     ma_uint32;
    sampleRateOut:    ma_uint32;
    state:            union {
        linear: ma_linear_resampler;
    }; /* State for stock resamplers so we can avoid a malloc. For stock resamplers, pBackend will point here. */

    /* Memory management. */
    _pHeap:           *void;
    _ownsHeap:        ma_bool32;
}

ma_resampler_get_heap_size :: (pConfig: *ma_resampler_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_resampler_init_preallocated :: (pConfig: *ma_resampler_config, pHeap: *void, pResampler: *ma_resampler) -> ma_result #foreign miniaudio;

/*
Initializes a new resampler object from a config.
*/
ma_resampler_init :: (pConfig: *ma_resampler_config, pAllocationCallbacks: *ma_allocation_callbacks, pResampler: *ma_resampler) -> ma_result #foreign miniaudio;

/*
Uninitializes a resampler.
*/
ma_resampler_uninit :: (pResampler: *ma_resampler, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/*
Converts the given input data.

Both the input and output frames must be in the format specified in the config when the resampler was initilized.

On input, [pFrameCountOut] contains the number of output frames to process. On output it contains the number of output frames that
were actually processed, which may be less than the requested amount which will happen if there's not enough input data. You can use
ma_resampler_get_expected_output_frame_count() to know how many output frames will be processed for a given number of input frames.

On input, [pFrameCountIn] contains the number of input frames contained in [pFramesIn]. On output it contains the number of whole
input frames that were actually processed. You can use ma_resampler_get_required_input_frame_count() to know how many input frames
you should provide for a given number of output frames. [pFramesIn] can be NULL, in which case zeroes will be used instead.

If [pFramesOut] is NULL, a seek is performed. In this case, if [pFrameCountOut] is not NULL it will seek by the specified number of
output frames. Otherwise, if [pFramesCountOut] is NULL and [pFrameCountIn] is not NULL, it will seek by the specified number of input
frames. When seeking, [pFramesIn] is allowed to NULL, in which case the internal timing state will be updated, but no input will be
processed. In this case, any internal filter state will be updated as if zeroes were passed in.

It is an error for [pFramesOut] to be non-NULL and [pFrameCountOut] to be NULL.

It is an error for both [pFrameCountOut] and [pFrameCountIn] to be NULL.
*/
ma_resampler_process_pcm_frames :: (pResampler: *ma_resampler, pFramesIn: *void, pFrameCountIn: *ma_uint64, pFramesOut: *void, pFrameCountOut: *ma_uint64) -> ma_result #foreign miniaudio;

/*
Sets the input and output sample rate.
*/
ma_resampler_set_rate :: (pResampler: *ma_resampler, sampleRateIn: ma_uint32, sampleRateOut: ma_uint32) -> ma_result #foreign miniaudio;

/*
Sets the input and output sample rate as a ratio.

The ration is in/out.
*/
ma_resampler_set_rate_ratio :: (pResampler: *ma_resampler, ratio: float) -> ma_result #foreign miniaudio;

/*
Retrieves the latency introduced by the resampler in input frames.
*/
ma_resampler_get_input_latency :: (pResampler: *ma_resampler) -> ma_uint64 #foreign miniaudio;

/*
Retrieves the latency introduced by the resampler in output frames.
*/
ma_resampler_get_output_latency :: (pResampler: *ma_resampler) -> ma_uint64 #foreign miniaudio;

/*
Calculates the number of whole input frames that would need to be read from the client in order to output the specified
number of output frames.

The returned value does not include cached input frames. It only returns the number of extra frames that would need to be
read from the input buffer in order to output the specified number of output frames.
*/
ma_resampler_get_required_input_frame_count :: (pResampler: *ma_resampler, outputFrameCount: ma_uint64, pInputFrameCount: *ma_uint64) -> ma_result #foreign miniaudio;

/*
Calculates the number of whole output frames that would be output after fully reading and consuming the specified number of
input frames.
*/
ma_resampler_get_expected_output_frame_count :: (pResampler: *ma_resampler, inputFrameCount: ma_uint64, pOutputFrameCount: *ma_uint64) -> ma_result #foreign miniaudio;

/*
Resets the resampler's timer and clears it's internal cache.
*/
ma_resampler_reset :: (pResampler: *ma_resampler) -> ma_result #foreign miniaudio;

/**************************************************************************************************************************************************************

Channel Conversion

**************************************************************************************************************************************************************/
ma_channel_conversion_path :: enum u32 {
    unknown     :: 0;
    passthrough :: 1;
    mono_out    :: 2;
    mono_in     :: 3;
    shuffle     :: 4;
    weights     :: 5;
}

ma_mono_expansion_mode :: enum u32 {
    duplicate   :: 0;
    average     :: 1;
    stereo_only :: 2;
    default     :: 0;
}

ma_channel_converter_config :: struct {
    format:                          ma_format;
    channelsIn:                      ma_uint32;
    channelsOut:                     ma_uint32;
    pChannelMapIn:                   *ma_channel;
    pChannelMapOut:                  *ma_channel;
    mixingMode:                      ma_channel_mix_mode;
    calculateLFEFromSpatialChannels: ma_bool32; /* When an output LFE channel is present, but no input LFE, set to true to set the output LFE to the average of all spatial channels (LR, FR, etc.). Ignored when an input LFE is present. */
    ppWeights:                       **float; /* [in][out]. Only used when mixingMode is set to ma_channel_mix_mode_custom_weights. */
}

ma_channel_converter_config_init :: (format: ma_format, channelsIn: ma_uint32, pChannelMapIn: *ma_channel, channelsOut: ma_uint32, pChannelMapOut: *ma_channel, mixingMode: ma_channel_mix_mode) -> ma_channel_converter_config #foreign miniaudio;

ma_channel_converter :: struct {
    format:         ma_format;
    channelsIn:     ma_uint32;
    channelsOut:    ma_uint32;
    mixingMode:     ma_channel_mix_mode;
    conversionPath: ma_channel_conversion_path;
    pChannelMapIn:  *ma_channel;
    pChannelMapOut: *ma_channel;
    pShuffleTable:  *ma_uint8; /* Indexed by output channel index. */
    weights:        union {
        f32:  **float;
        _s16: **ma_int32;
    }; /* [in][out] */

    /* Memory management. */
    _pHeap:         *void;
    _ownsHeap:      ma_bool32;
}

ma_channel_converter_get_heap_size :: (pConfig: *ma_channel_converter_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_channel_converter_init_preallocated :: (pConfig: *ma_channel_converter_config, pHeap: *void, pConverter: *ma_channel_converter) -> ma_result #foreign miniaudio;

ma_channel_converter_init :: (pConfig: *ma_channel_converter_config, pAllocationCallbacks: *ma_allocation_callbacks, pConverter: *ma_channel_converter) -> ma_result #foreign miniaudio;

ma_channel_converter_uninit :: (pConverter: *ma_channel_converter, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_channel_converter_process_pcm_frames :: (pConverter: *ma_channel_converter, pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_channel_converter_get_input_channel_map :: (pConverter: *ma_channel_converter, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

ma_channel_converter_get_output_channel_map :: (pConverter: *ma_channel_converter, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

/**************************************************************************************************************************************************************

Data Conversion

**************************************************************************************************************************************************************/
ma_data_converter_config :: struct {
    formatIn:                        ma_format;
    formatOut:                       ma_format;
    channelsIn:                      ma_uint32;
    channelsOut:                     ma_uint32;
    sampleRateIn:                    ma_uint32;
    sampleRateOut:                   ma_uint32;
    pChannelMapIn:                   *ma_channel;
    pChannelMapOut:                  *ma_channel;
    ditherMode:                      ma_dither_mode;
    channelMixMode:                  ma_channel_mix_mode;
    calculateLFEFromSpatialChannels: ma_bool32; /* When an output LFE channel is present, but no input LFE, set to true to set the output LFE to the average of all spatial channels (LR, FR, etc.). Ignored when an input LFE is present. */
    ppChannelWeights:                **float; /* [in][out]. Only used when mixingMode is set to ma_channel_mix_mode_custom_weights. */
    allowDynamicSampleRate:          ma_bool32;
    resampling:                      ma_resampler_config;
}

/**************************************************************************************************************************************************************

Data Conversion

**************************************************************************************************************************************************************/
ma_data_converter_config_init_default :: () -> ma_data_converter_config #foreign miniaudio;

ma_data_converter_config_init :: (formatIn: ma_format, formatOut: ma_format, channelsIn: ma_uint32, channelsOut: ma_uint32, sampleRateIn: ma_uint32, sampleRateOut: ma_uint32) -> ma_data_converter_config #foreign miniaudio;

ma_data_converter_execution_path :: enum u32 {
    passthrough    :: 0;
    format_only    :: 1;
    channels_only  :: 2;
    resample_only  :: 3;
    resample_first :: 4;
    channels_first :: 5;
}

ma_data_converter :: struct {
    formatIn:                ma_format;
    formatOut:               ma_format;
    channelsIn:              ma_uint32;
    channelsOut:             ma_uint32;
    sampleRateIn:            ma_uint32;
    sampleRateOut:           ma_uint32;
    ditherMode:              ma_dither_mode;
    executionPath:           ma_data_converter_execution_path; /* The execution path the data converter will follow when processing. */
    channelConverter:        ma_channel_converter;
    resampler:               ma_resampler;
    hasPreFormatConversion:  ma_bool8;
    hasPostFormatConversion: ma_bool8;
    hasChannelConverter:     ma_bool8;
    hasResampler:            ma_bool8;
    isPassthrough:           ma_bool8;

    /* Memory management. */
    _ownsHeap:               ma_bool8;
    _pHeap:                  *void;
}

ma_data_converter_get_heap_size :: (pConfig: *ma_data_converter_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_data_converter_init_preallocated :: (pConfig: *ma_data_converter_config, pHeap: *void, pConverter: *ma_data_converter) -> ma_result #foreign miniaudio;

ma_data_converter_init :: (pConfig: *ma_data_converter_config, pAllocationCallbacks: *ma_allocation_callbacks, pConverter: *ma_data_converter) -> ma_result #foreign miniaudio;

ma_data_converter_uninit :: (pConverter: *ma_data_converter, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_data_converter_process_pcm_frames :: (pConverter: *ma_data_converter, pFramesIn: *void, pFrameCountIn: *ma_uint64, pFramesOut: *void, pFrameCountOut: *ma_uint64) -> ma_result #foreign miniaudio;

ma_data_converter_set_rate :: (pConverter: *ma_data_converter, sampleRateIn: ma_uint32, sampleRateOut: ma_uint32) -> ma_result #foreign miniaudio;

ma_data_converter_set_rate_ratio :: (pConverter: *ma_data_converter, ratioInOut: float) -> ma_result #foreign miniaudio;

ma_data_converter_get_input_latency :: (pConverter: *ma_data_converter) -> ma_uint64 #foreign miniaudio;

ma_data_converter_get_output_latency :: (pConverter: *ma_data_converter) -> ma_uint64 #foreign miniaudio;

ma_data_converter_get_required_input_frame_count :: (pConverter: *ma_data_converter, outputFrameCount: ma_uint64, pInputFrameCount: *ma_uint64) -> ma_result #foreign miniaudio;

ma_data_converter_get_expected_output_frame_count :: (pConverter: *ma_data_converter, inputFrameCount: ma_uint64, pOutputFrameCount: *ma_uint64) -> ma_result #foreign miniaudio;

ma_data_converter_get_input_channel_map :: (pConverter: *ma_data_converter, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

ma_data_converter_get_output_channel_map :: (pConverter: *ma_data_converter, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

ma_data_converter_reset :: (pConverter: *ma_data_converter) -> ma_result #foreign miniaudio;

/************************************************************************************************************************************************************

Format Conversion

************************************************************************************************************************************************************/
ma_pcm_u8_to_s16 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_u8_to_s24 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_u8_to_s32 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_u8_to_f32 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s16_to_u8 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s16_to_s24 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s16_to_s32 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s16_to_f32 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s24_to_u8 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s24_to_s16 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s24_to_s32 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s24_to_f32 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s32_to_u8 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s32_to_s16 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s32_to_s24 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_s32_to_f32 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_f32_to_u8 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_f32_to_s16 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_f32_to_s24 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_f32_to_s32 :: (pOut: *void, pIn: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_convert :: (pOut: *void, formatOut: ma_format, pIn: *void, formatIn: ma_format, sampleCount: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_convert_pcm_frames_format :: (pOut: *void, formatOut: ma_format, pIn: *void, formatIn: ma_format, frameCount: ma_uint64, channels: ma_uint32, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

/*
Deinterleaves an interleaved buffer.
*/
ma_deinterleave_pcm_frames :: (format: ma_format, channels: ma_uint32, frameCount: ma_uint64, pInterleavedPCMFrames: *void, ppDeinterleavedPCMFrames: **void) -> void #foreign miniaudio;

/*
Interleaves a group of deinterleaved buffers.
*/
ma_interleave_pcm_frames :: (format: ma_format, channels: ma_uint32, frameCount: ma_uint64, ppDeinterleavedPCMFrames: **void, pInterleavedPCMFrames: *void) -> void #foreign miniaudio;

/*
Retrieves the channel position of the specified channel in the given channel map.

The pChannelMap parameter can be null, in which case miniaudio's default channel map will be assumed.
*/
ma_channel_map_get_channel :: (pChannelMap: *ma_channel, channelCount: ma_uint32, channelIndex: ma_uint32) -> ma_channel #foreign miniaudio;

/*
Initializes a blank channel map.

When a blank channel map is specified anywhere it indicates that the native channel map should be used.
*/
ma_channel_map_init_blank :: (pChannelMap: *ma_channel, channels: ma_uint32) -> void #foreign miniaudio;

/*
Helper for retrieving a standard channel map.

The output channel map buffer must have a capacity of at least `channelMapCap`.
*/
ma_channel_map_init_standard :: (standardChannelMap: ma_standard_channel_map, pChannelMap: *ma_channel, channelMapCap: u64, channels: ma_uint32) -> void #foreign miniaudio;

/*
Copies a channel map.

Both input and output channel map buffers must have a capacity of at at least `channels`.
*/
ma_channel_map_copy :: (pOut: *ma_channel, pIn: *ma_channel, channels: ma_uint32) -> void #foreign miniaudio;

/*
Copies a channel map if one is specified, otherwise copies the default channel map.

The output buffer must have a capacity of at least `channels`. If not NULL, the input channel map must also have a capacity of at least `channels`.
*/
ma_channel_map_copy_or_default :: (pOut: *ma_channel, channelMapCapOut: u64, pIn: *ma_channel, channels: ma_uint32) -> void #foreign miniaudio;

/*
Determines whether or not a channel map is valid.

A blank channel map is valid (all channels set to MA_CHANNEL_NONE). The way a blank channel map is handled is context specific, but
is usually treated as a passthrough.

Invalid channel maps:
- A channel map with no channels
- A channel map with more than one channel and a mono channel

The channel map buffer must have a capacity of at least `channels`.
*/
ma_channel_map_is_valid :: (pChannelMap: *ma_channel, channels: ma_uint32) -> ma_bool32 #foreign miniaudio;

/*
Helper for comparing two channel maps for equality.

This assumes the channel count is the same between the two.

Both channels map buffers must have a capacity of at least `channels`.
*/
ma_channel_map_is_equal :: (pChannelMapA: *ma_channel, pChannelMapB: *ma_channel, channels: ma_uint32) -> ma_bool32 #foreign miniaudio;

/*
Helper for determining if a channel map is blank (all channels set to MA_CHANNEL_NONE).

The channel map buffer must have a capacity of at least `channels`.
*/
ma_channel_map_is_blank :: (pChannelMap: *ma_channel, channels: ma_uint32) -> ma_bool32 #foreign miniaudio;

/*
Helper for determining whether or not a channel is present in the given channel map.

The channel map buffer must have a capacity of at least `channels`.
*/
ma_channel_map_contains_channel_position :: (channels: ma_uint32, pChannelMap: *ma_channel, channelPosition: ma_channel) -> ma_bool32 #foreign miniaudio;

/*
Find a channel position in the given channel map. Returns MA_TRUE if the channel is found; MA_FALSE otherwise. The
index of the channel is output to `pChannelIndex`.

The channel map buffer must have a capacity of at least `channels`.
*/
ma_channel_map_find_channel_position :: (channels: ma_uint32, pChannelMap: *ma_channel, channelPosition: ma_channel, pChannelIndex: *ma_uint32) -> ma_bool32 #foreign miniaudio;

/*
Generates a string representing the given channel map.

This is for printing and debugging purposes, not serialization/deserialization.

Returns the length of the string, not including the null terminator.
*/
ma_channel_map_to_string :: (pChannelMap: *ma_channel, channels: ma_uint32, pBufferOut: *u8, bufferCap: u64) -> u64 #foreign miniaudio;

/*
Retrieves a human readable version of a channel position.
*/
ma_channel_position_to_string :: (channel: ma_channel) -> *u8 #foreign miniaudio;

/*
High-level helper for doing a full format conversion in one go. Returns the number of output frames. Call this with pOut set to NULL to
determine the required size of the output buffer. frameCountOut should be set to the capacity of pOut. If pOut is NULL, frameCountOut is
ignored.

A return value of 0 indicates an error.

This function is useful for one-off bulk conversions, but if you're streaming data you should use the ma_data_converter APIs instead.
*/
ma_convert_frames :: (pOut: *void, frameCountOut: ma_uint64, formatOut: ma_format, channelsOut: ma_uint32, sampleRateOut: ma_uint32, pIn: *void, frameCountIn: ma_uint64, formatIn: ma_format, channelsIn: ma_uint32, sampleRateIn: ma_uint32) -> ma_uint64 #foreign miniaudio;

ma_convert_frames_ex :: (pOut: *void, frameCountOut: ma_uint64, pIn: *void, frameCountIn: ma_uint64, pConfig: *ma_data_converter_config) -> ma_uint64 #foreign miniaudio;

/************************************************************************************************************************************************************

Data Source

************************************************************************************************************************************************************/
ma_data_source :: void;

ma_data_source_vtable :: struct {
    onRead:          #type (pDataSource: *ma_data_source, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #c_call;
    onSeek:          #type (pDataSource: *ma_data_source, frameIndex: ma_uint64) -> ma_result #c_call;
    onGetDataFormat: #type (pDataSource: *ma_data_source, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #c_call;
    onGetCursor:     #type (pDataSource: *ma_data_source, pCursor: *ma_uint64) -> ma_result #c_call;
    onGetLength:     #type (pDataSource: *ma_data_source, pLength: *ma_uint64) -> ma_result #c_call;
    onSetLooping:    #type (pDataSource: *ma_data_source, isLooping: ma_bool32) -> ma_result #c_call;
    flags:           ma_uint32;
}

ma_data_source_get_next_proc :: #type (pDataSource: *ma_data_source) -> *ma_data_source #c_call;

ma_data_source_config :: struct {
    vtable: *ma_data_source_vtable;
}

ma_data_source_config_init :: () -> ma_data_source_config #foreign miniaudio;

ma_data_source_base :: struct {
    vtable:           *ma_data_source_vtable;
    rangeBegInFrames: ma_uint64;
    rangeEndInFrames: ma_uint64; /* Set to -1 for unranged (default). */
    loopBegInFrames:  ma_uint64; /* Relative to rangeBegInFrames. */
    loopEndInFrames:  ma_uint64; /* Relative to rangeBegInFrames. Set to -1 for the end of the range. */
    pCurrent:         *ma_data_source; /* When non-NULL, the data source being initialized will act as a proxy and will route all operations to pCurrent. Used in conjunction with pNext/onGetNext for seamless chaining. */
    pNext:            *ma_data_source; /* When set to NULL, onGetNext will be used. */
    onGetNext:        ma_data_source_get_next_proc; /* Will be used when pNext is NULL. If both are NULL, no next will be used. */
    isLooping:        ma_bool32;
}

ma_data_source_init :: (pConfig: *ma_data_source_config, pDataSource: *ma_data_source) -> ma_result #foreign miniaudio;

ma_data_source_uninit :: (pDataSource: *ma_data_source) -> void #foreign miniaudio;

ma_data_source_read_pcm_frames :: (pDataSource: *ma_data_source, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_data_source_seek_pcm_frames :: (pDataSource: *ma_data_source, frameCount: ma_uint64, pFramesSeeked: *ma_uint64) -> ma_result #foreign miniaudio;

ma_data_source_seek_to_pcm_frame :: (pDataSource: *ma_data_source, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_data_source_get_data_format :: (pDataSource: *ma_data_source, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

ma_data_source_get_cursor_in_pcm_frames :: (pDataSource: *ma_data_source, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_data_source_get_length_in_pcm_frames :: (pDataSource: *ma_data_source, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_data_source_get_cursor_in_seconds :: (pDataSource: *ma_data_source, pCursor: *float) -> ma_result #foreign miniaudio;

ma_data_source_get_length_in_seconds :: (pDataSource: *ma_data_source, pLength: *float) -> ma_result #foreign miniaudio;

ma_data_source_set_looping :: (pDataSource: *ma_data_source, isLooping: ma_bool32) -> ma_result #foreign miniaudio;

ma_data_source_is_looping :: (pDataSource: *ma_data_source) -> ma_bool32 #foreign miniaudio;

ma_data_source_set_range_in_pcm_frames :: (pDataSource: *ma_data_source, rangeBegInFrames: ma_uint64, rangeEndInFrames: ma_uint64) -> ma_result #foreign miniaudio;

ma_data_source_get_range_in_pcm_frames :: (pDataSource: *ma_data_source, pRangeBegInFrames: *ma_uint64, pRangeEndInFrames: *ma_uint64) -> void #foreign miniaudio;

ma_data_source_set_loop_point_in_pcm_frames :: (pDataSource: *ma_data_source, loopBegInFrames: ma_uint64, loopEndInFrames: ma_uint64) -> ma_result #foreign miniaudio;

ma_data_source_get_loop_point_in_pcm_frames :: (pDataSource: *ma_data_source, pLoopBegInFrames: *ma_uint64, pLoopEndInFrames: *ma_uint64) -> void #foreign miniaudio;

ma_data_source_set_current :: (pDataSource: *ma_data_source, pCurrentDataSource: *ma_data_source) -> ma_result #foreign miniaudio;

ma_data_source_get_current :: (pDataSource: *ma_data_source) -> *ma_data_source #foreign miniaudio;

ma_data_source_set_next :: (pDataSource: *ma_data_source, pNextDataSource: *ma_data_source) -> ma_result #foreign miniaudio;

ma_data_source_get_next :: (pDataSource: *ma_data_source) -> *ma_data_source #foreign miniaudio;

ma_data_source_set_next_callback :: (pDataSource: *ma_data_source, onGetNext: ma_data_source_get_next_proc) -> ma_result #foreign miniaudio;

ma_data_source_get_next_callback :: (pDataSource: *ma_data_source) -> ma_data_source_get_next_proc #foreign miniaudio;

ma_audio_buffer_ref :: struct {
    ds:           ma_data_source_base;
    format:       ma_format;
    channels:     ma_uint32;
    sampleRate:   ma_uint32;
    cursor:       ma_uint64;
    sizeInFrames: ma_uint64;
    pData:        *void;
}

ma_audio_buffer_ref_init :: (format: ma_format, channels: ma_uint32, pData: *void, sizeInFrames: ma_uint64, pAudioBufferRef: *ma_audio_buffer_ref) -> ma_result #foreign miniaudio;

ma_audio_buffer_ref_uninit :: (pAudioBufferRef: *ma_audio_buffer_ref) -> void #foreign miniaudio;

ma_audio_buffer_ref_set_data :: (pAudioBufferRef: *ma_audio_buffer_ref, pData: *void, sizeInFrames: ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_ref_read_pcm_frames :: (pAudioBufferRef: *ma_audio_buffer_ref, pFramesOut: *void, frameCount: ma_uint64, loop: ma_bool32) -> ma_uint64 #foreign miniaudio;

ma_audio_buffer_ref_seek_to_pcm_frame :: (pAudioBufferRef: *ma_audio_buffer_ref, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_ref_map :: (pAudioBufferRef: *ma_audio_buffer_ref, ppFramesOut: **void, pFrameCount: *ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_ref_unmap :: (pAudioBufferRef: *ma_audio_buffer_ref, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_ref_at_end :: (pAudioBufferRef: *ma_audio_buffer_ref) -> ma_bool32 #foreign miniaudio;

ma_audio_buffer_ref_get_cursor_in_pcm_frames :: (pAudioBufferRef: *ma_audio_buffer_ref, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_ref_get_length_in_pcm_frames :: (pAudioBufferRef: *ma_audio_buffer_ref, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_ref_get_available_frames :: (pAudioBufferRef: *ma_audio_buffer_ref, pAvailableFrames: *ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_config :: struct {
    format:              ma_format;
    channels:            ma_uint32;
    sampleRate:          ma_uint32;
    sizeInFrames:        ma_uint64;
    pData:               *void; /* If set to NULL, will allocate a block of memory for you. */
    allocationCallbacks: ma_allocation_callbacks;
}

ma_audio_buffer_config_init :: (format: ma_format, channels: ma_uint32, sizeInFrames: ma_uint64, pData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_audio_buffer_config #foreign miniaudio;

ma_audio_buffer :: struct {
    ref:                 ma_audio_buffer_ref;
    allocationCallbacks: ma_allocation_callbacks;
    ownsData:            ma_bool32; /* Used to control whether or not miniaudio owns the data buffer. If set to true, pData will be freed in ma_audio_buffer_uninit(). */
    _pExtraData:         [1] ma_uint8; /* For allocating a buffer with the memory located directly after the other memory of the structure. */
}

ma_audio_buffer_init :: (pConfig: *ma_audio_buffer_config, pAudioBuffer: *ma_audio_buffer) -> ma_result #foreign miniaudio;

ma_audio_buffer_init_copy :: (pConfig: *ma_audio_buffer_config, pAudioBuffer: *ma_audio_buffer) -> ma_result #foreign miniaudio;

ma_audio_buffer_alloc_and_init :: (pConfig: *ma_audio_buffer_config, ppAudioBuffer: **ma_audio_buffer) -> ma_result #foreign miniaudio;

ma_audio_buffer_uninit :: (pAudioBuffer: *ma_audio_buffer) -> void #foreign miniaudio;

ma_audio_buffer_uninit_and_free :: (pAudioBuffer: *ma_audio_buffer) -> void #foreign miniaudio;

ma_audio_buffer_read_pcm_frames :: (pAudioBuffer: *ma_audio_buffer, pFramesOut: *void, frameCount: ma_uint64, loop: ma_bool32) -> ma_uint64 #foreign miniaudio;

ma_audio_buffer_seek_to_pcm_frame :: (pAudioBuffer: *ma_audio_buffer, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_map :: (pAudioBuffer: *ma_audio_buffer, ppFramesOut: **void, pFrameCount: *ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_unmap :: (pAudioBuffer: *ma_audio_buffer, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_at_end :: (pAudioBuffer: *ma_audio_buffer) -> ma_bool32 #foreign miniaudio;

ma_audio_buffer_get_cursor_in_pcm_frames :: (pAudioBuffer: *ma_audio_buffer, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_get_length_in_pcm_frames :: (pAudioBuffer: *ma_audio_buffer, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_audio_buffer_get_available_frames :: (pAudioBuffer: *ma_audio_buffer, pAvailableFrames: *ma_uint64) -> ma_result #foreign miniaudio;

ma_paged_audio_buffer_page :: struct {
    pNext:        *ma_paged_audio_buffer_page;
    sizeInFrames: ma_uint64;
    pAudioData:   [1] ma_uint8;
}

ma_paged_audio_buffer_data :: struct {
    format:   ma_format;
    channels: ma_uint32;
    head:     ma_paged_audio_buffer_page; /* Dummy head for the lock-free algorithm. Always has a size of 0. */
    pTail:    *ma_paged_audio_buffer_page; /* Never null. Initially set to &head. */
}

ma_paged_audio_buffer_data_init :: (format: ma_format, channels: ma_uint32, pData: *ma_paged_audio_buffer_data) -> ma_result #foreign miniaudio;

ma_paged_audio_buffer_data_uninit :: (pData: *ma_paged_audio_buffer_data, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_paged_audio_buffer_data_get_head :: (pData: *ma_paged_audio_buffer_data) -> *ma_paged_audio_buffer_page #foreign miniaudio;

ma_paged_audio_buffer_data_get_tail :: (pData: *ma_paged_audio_buffer_data) -> *ma_paged_audio_buffer_page #foreign miniaudio;

ma_paged_audio_buffer_data_get_length_in_pcm_frames :: (pData: *ma_paged_audio_buffer_data, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_paged_audio_buffer_data_allocate_page :: (pData: *ma_paged_audio_buffer_data, pageSizeInFrames: ma_uint64, pInitialData: *void, pAllocationCallbacks: *ma_allocation_callbacks, ppPage: **ma_paged_audio_buffer_page) -> ma_result #foreign miniaudio;

ma_paged_audio_buffer_data_free_page :: (pData: *ma_paged_audio_buffer_data, pPage: *ma_paged_audio_buffer_page, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_result #foreign miniaudio;

ma_paged_audio_buffer_data_append_page :: (pData: *ma_paged_audio_buffer_data, pPage: *ma_paged_audio_buffer_page) -> ma_result #foreign miniaudio;

ma_paged_audio_buffer_data_allocate_and_append_page :: (pData: *ma_paged_audio_buffer_data, pageSizeInFrames: ma_uint32, pInitialData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_result #foreign miniaudio;

ma_paged_audio_buffer_config :: struct {
    pData: *ma_paged_audio_buffer_data; /* Must not be null. */
}

ma_paged_audio_buffer_config_init :: (pData: *ma_paged_audio_buffer_data) -> ma_paged_audio_buffer_config #foreign miniaudio;

ma_paged_audio_buffer :: struct {
    ds:             ma_data_source_base;
    pData:          *ma_paged_audio_buffer_data; /* Audio data is read from here. Cannot be null. */
    pCurrent:       *ma_paged_audio_buffer_page;
    relativeCursor: ma_uint64; /* Relative to the current page. */
    absoluteCursor: ma_uint64;
}

ma_paged_audio_buffer_init :: (pConfig: *ma_paged_audio_buffer_config, pPagedAudioBuffer: *ma_paged_audio_buffer) -> ma_result #foreign miniaudio;

ma_paged_audio_buffer_uninit :: (pPagedAudioBuffer: *ma_paged_audio_buffer) -> void #foreign miniaudio;

ma_paged_audio_buffer_read_pcm_frames :: (pPagedAudioBuffer: *ma_paged_audio_buffer, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_paged_audio_buffer_seek_to_pcm_frame :: (pPagedAudioBuffer: *ma_paged_audio_buffer, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_paged_audio_buffer_get_cursor_in_pcm_frames :: (pPagedAudioBuffer: *ma_paged_audio_buffer, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_paged_audio_buffer_get_length_in_pcm_frames :: (pPagedAudioBuffer: *ma_paged_audio_buffer, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

/************************************************************************************************************************************************************

Ring Buffer

************************************************************************************************************************************************************/
ma_rb :: struct {
    pBuffer:                *void;
    subbufferSizeInBytes:   ma_uint32;
    subbufferCount:         ma_uint32;
    subbufferStrideInBytes: ma_uint32;
    encodedReadOffset:      ma_uint32; /* Most significant bit is the loop flag. Lower 31 bits contains the actual offset in bytes. Must be used atomically. */
    encodedWriteOffset:     ma_uint32; /* Most significant bit is the loop flag. Lower 31 bits contains the actual offset in bytes. Must be used atomically. */
    ownsBuffer:             ma_bool8; /* Used to know whether or not miniaudio is responsible for free()-ing the buffer. */
    clearOnWriteAcquire:    ma_bool8; /* When set, clears the acquired write buffer before returning from ma_rb_acquire_write(). */
    allocationCallbacks:    ma_allocation_callbacks;
}

ma_rb_init_ex :: (subbufferSizeInBytes: u64, subbufferCount: u64, subbufferStrideInBytes: u64, pOptionalPreallocatedBuffer: *void, pAllocationCallbacks: *ma_allocation_callbacks, pRB: *ma_rb) -> ma_result #foreign miniaudio;

ma_rb_init :: (bufferSizeInBytes: u64, pOptionalPreallocatedBuffer: *void, pAllocationCallbacks: *ma_allocation_callbacks, pRB: *ma_rb) -> ma_result #foreign miniaudio;

ma_rb_uninit :: (pRB: *ma_rb) -> void #foreign miniaudio;

ma_rb_reset :: (pRB: *ma_rb) -> void #foreign miniaudio;

ma_rb_acquire_read :: (pRB: *ma_rb, pSizeInBytes: *u64, ppBufferOut: **void) -> ma_result #foreign miniaudio;

ma_rb_commit_read :: (pRB: *ma_rb, sizeInBytes: u64) -> ma_result #foreign miniaudio;

ma_rb_acquire_write :: (pRB: *ma_rb, pSizeInBytes: *u64, ppBufferOut: **void) -> ma_result #foreign miniaudio;

ma_rb_commit_write :: (pRB: *ma_rb, sizeInBytes: u64) -> ma_result #foreign miniaudio;

ma_rb_seek_read :: (pRB: *ma_rb, offsetInBytes: u64) -> ma_result #foreign miniaudio;

ma_rb_seek_write :: (pRB: *ma_rb, offsetInBytes: u64) -> ma_result #foreign miniaudio;

ma_rb_pointer_distance :: (pRB: *ma_rb) -> ma_int32 #foreign miniaudio;

ma_rb_available_read :: (pRB: *ma_rb) -> ma_uint32 #foreign miniaudio;

ma_rb_available_write :: (pRB: *ma_rb) -> ma_uint32 #foreign miniaudio;

ma_rb_get_subbuffer_size :: (pRB: *ma_rb) -> u64 #foreign miniaudio;

ma_rb_get_subbuffer_stride :: (pRB: *ma_rb) -> u64 #foreign miniaudio;

ma_rb_get_subbuffer_offset :: (pRB: *ma_rb, subbufferIndex: u64) -> u64 #foreign miniaudio;

ma_rb_get_subbuffer_ptr :: (pRB: *ma_rb, subbufferIndex: u64, pBuffer: *void) -> *void #foreign miniaudio;

ma_pcm_rb :: struct {
    ds:         ma_data_source_base;
    rb:         ma_rb;
    format:     ma_format;
    channels:   ma_uint32;
    sampleRate: ma_uint32; /* Not required for the ring buffer itself, but useful for associating the data with some sample rate, particularly for data sources. */
}

ma_pcm_rb_init_ex :: (format: ma_format, channels: ma_uint32, subbufferSizeInFrames: ma_uint32, subbufferCount: ma_uint32, subbufferStrideInFrames: ma_uint32, pOptionalPreallocatedBuffer: *void, pAllocationCallbacks: *ma_allocation_callbacks, pRB: *ma_pcm_rb) -> ma_result #foreign miniaudio;

ma_pcm_rb_init :: (format: ma_format, channels: ma_uint32, bufferSizeInFrames: ma_uint32, pOptionalPreallocatedBuffer: *void, pAllocationCallbacks: *ma_allocation_callbacks, pRB: *ma_pcm_rb) -> ma_result #foreign miniaudio;

ma_pcm_rb_uninit :: (pRB: *ma_pcm_rb) -> void #foreign miniaudio;

ma_pcm_rb_reset :: (pRB: *ma_pcm_rb) -> void #foreign miniaudio;

ma_pcm_rb_acquire_read :: (pRB: *ma_pcm_rb, pSizeInFrames: *ma_uint32, ppBufferOut: **void) -> ma_result #foreign miniaudio;

ma_pcm_rb_commit_read :: (pRB: *ma_pcm_rb, sizeInFrames: ma_uint32) -> ma_result #foreign miniaudio;

ma_pcm_rb_acquire_write :: (pRB: *ma_pcm_rb, pSizeInFrames: *ma_uint32, ppBufferOut: **void) -> ma_result #foreign miniaudio;

ma_pcm_rb_commit_write :: (pRB: *ma_pcm_rb, sizeInFrames: ma_uint32) -> ma_result #foreign miniaudio;

ma_pcm_rb_seek_read :: (pRB: *ma_pcm_rb, offsetInFrames: ma_uint32) -> ma_result #foreign miniaudio;

ma_pcm_rb_seek_write :: (pRB: *ma_pcm_rb, offsetInFrames: ma_uint32) -> ma_result #foreign miniaudio;

ma_pcm_rb_pointer_distance :: (pRB: *ma_pcm_rb) -> ma_int32 #foreign miniaudio;

ma_pcm_rb_available_read :: (pRB: *ma_pcm_rb) -> ma_uint32 #foreign miniaudio;

ma_pcm_rb_available_write :: (pRB: *ma_pcm_rb) -> ma_uint32 #foreign miniaudio;

ma_pcm_rb_get_subbuffer_size :: (pRB: *ma_pcm_rb) -> ma_uint32 #foreign miniaudio;

ma_pcm_rb_get_subbuffer_stride :: (pRB: *ma_pcm_rb) -> ma_uint32 #foreign miniaudio;

ma_pcm_rb_get_subbuffer_offset :: (pRB: *ma_pcm_rb, subbufferIndex: ma_uint32) -> ma_uint32 #foreign miniaudio;

ma_pcm_rb_get_subbuffer_ptr :: (pRB: *ma_pcm_rb, subbufferIndex: ma_uint32, pBuffer: *void) -> *void #foreign miniaudio;

ma_pcm_rb_get_format :: (pRB: *ma_pcm_rb) -> ma_format #foreign miniaudio;

ma_pcm_rb_get_channels :: (pRB: *ma_pcm_rb) -> ma_uint32 #foreign miniaudio;

ma_pcm_rb_get_sample_rate :: (pRB: *ma_pcm_rb) -> ma_uint32 #foreign miniaudio;

ma_pcm_rb_set_sample_rate :: (pRB: *ma_pcm_rb, sampleRate: ma_uint32) -> void #foreign miniaudio;

/*
The idea of the duplex ring buffer is to act as the intermediary buffer when running two asynchronous devices in a duplex set up. The
capture device writes to it, and then a playback device reads from it.

At the moment this is just a simple naive implementation, but in the future I want to implement some dynamic resampling to seamlessly
handle desyncs. Note that the API is work in progress and may change at any time in any version.

The size of the buffer is based on the capture side since that's what'll be written to the buffer. It is based on the capture period size
in frames. The internal sample rate of the capture device is also needed in order to calculate the size.
*/
ma_duplex_rb :: struct {
    rb: ma_pcm_rb;
}

ma_duplex_rb_init :: (captureFormat: ma_format, captureChannels: ma_uint32, sampleRate: ma_uint32, captureInternalSampleRate: ma_uint32, captureInternalPeriodSizeInFrames: ma_uint32, pAllocationCallbacks: *ma_allocation_callbacks, pRB: *ma_duplex_rb) -> ma_result #foreign miniaudio;

ma_duplex_rb_uninit :: (pRB: *ma_duplex_rb) -> ma_result #foreign miniaudio;

/************************************************************************************************************************************************************

Miscellaneous Helpers

************************************************************************************************************************************************************/
/*
Retrieves a human readable description of the given result code.
*/
ma_result_description :: (result: ma_result) -> *u8 #foreign miniaudio;

/*
malloc()
*/
ma_malloc :: (sz: u64, pAllocationCallbacks: *ma_allocation_callbacks) -> *void #foreign miniaudio;

/*
calloc()
*/
ma_calloc :: (sz: u64, pAllocationCallbacks: *ma_allocation_callbacks) -> *void #foreign miniaudio;

/*
realloc()
*/
ma_realloc :: (p: *void, sz: u64, pAllocationCallbacks: *ma_allocation_callbacks) -> *void #foreign miniaudio;

/*
free()
*/
ma_free :: (p: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/*
Performs an aligned malloc, with the assumption that the alignment is a power of 2.
*/
ma_aligned_malloc :: (sz: u64, alignment: u64, pAllocationCallbacks: *ma_allocation_callbacks) -> *void #foreign miniaudio;

/*
Free's an aligned malloc'd buffer.
*/
ma_aligned_free :: (p: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/*
Retrieves a friendly name for a format.
*/
ma_get_format_name :: (format: ma_format) -> *u8 #foreign miniaudio;

/*
Blends two frames in floating point format.
*/
ma_blend_f32 :: (pOut: *float, pInA: *float, pInB: *float, factor: float, channels: ma_uint32) -> void #foreign miniaudio;

/*
Retrieves the size of a sample in bytes for the given format.

This API is efficient and is implemented using a lookup table.

Thread Safety: SAFE
This API is pure.
*/
ma_get_bytes_per_sample :: (format: ma_format) -> ma_uint32 #foreign miniaudio;

/*
Converts a log level to a string.
*/
ma_log_level_to_string :: (logLevel: ma_uint32) -> *u8 #foreign miniaudio;

/************************************************************************************************************************************************************

Synchronization

************************************************************************************************************************************************************/
/*
Locks a spinlock.
*/
ma_spinlock_lock :: (pSpinlock: *ma_spinlock) -> ma_result #foreign miniaudio;

/*
Locks a spinlock, but does not yield() when looping.
*/
ma_spinlock_lock_noyield :: (pSpinlock: *ma_spinlock) -> ma_result #foreign miniaudio;

/*
Unlocks a spinlock.
*/
ma_spinlock_unlock :: (pSpinlock: *ma_spinlock) -> ma_result #foreign miniaudio;

/*
Creates a mutex.

A mutex must be created from a valid context. A mutex is initially unlocked.
*/
ma_mutex_init :: (pMutex: *ma_mutex) -> ma_result #foreign miniaudio;

/*
Deletes a mutex.
*/
ma_mutex_uninit :: (pMutex: *ma_mutex) -> void #foreign miniaudio;

/*
Locks a mutex with an infinite timeout.
*/
ma_mutex_lock :: (pMutex: *ma_mutex) -> void #foreign miniaudio;

/*
Unlocks a mutex.
*/
ma_mutex_unlock :: (pMutex: *ma_mutex) -> void #foreign miniaudio;

/*
Initializes an auto-reset event.
*/
ma_event_init :: (pEvent: *ma_event) -> ma_result #foreign miniaudio;

/*
Uninitializes an auto-reset event.
*/
ma_event_uninit :: (pEvent: *ma_event) -> void #foreign miniaudio;

/*
Waits for the specified auto-reset event to become signalled.
*/
ma_event_wait :: (pEvent: *ma_event) -> ma_result #foreign miniaudio;

/*
Signals the specified auto-reset event.
*/
ma_event_signal :: (pEvent: *ma_event) -> ma_result #foreign miniaudio;

/*
Fence
=====
This locks while the counter is larger than 0. Counter can be incremented and decremented by any
thread, but care needs to be taken when waiting. It is possible for one thread to acquire the
fence just as another thread returns from ma_fence_wait().

The idea behind a fence is to allow you to wait for a group of operations to complete. When an
operation starts, the counter is incremented which locks the fence. When the operation completes,
the fence will be released which decrements the counter. ma_fence_wait() will block until the
counter hits zero.

If threading is disabled, ma_fence_wait() will spin on the counter.
*/
ma_fence :: struct {
    e:       ma_event;

    counter: ma_uint32;
}

ma_fence_init :: (pFence: *ma_fence) -> ma_result #foreign miniaudio;

ma_fence_uninit :: (pFence: *ma_fence) -> void #foreign miniaudio;

ma_fence_acquire :: (pFence: *ma_fence) -> ma_result #foreign miniaudio;

ma_fence_release :: (pFence: *ma_fence) -> ma_result #foreign miniaudio;

ma_fence_wait :: (pFence: *ma_fence) -> ma_result #foreign miniaudio;

/*
Notification callback for asynchronous operations.
*/
ma_async_notification :: void;

ma_async_notification_callbacks :: struct {
    onSignal: #type (pNotification: *ma_async_notification) -> void #c_call;
}

ma_async_notification_signal :: (pNotification: *ma_async_notification) -> ma_result #foreign miniaudio;

/*
Simple polling notification.

This just sets a variable when the notification has been signalled which is then polled with ma_async_notification_poll_is_signalled()
*/
ma_async_notification_poll :: struct {
    cb:        ma_async_notification_callbacks;
    signalled: ma_bool32;
}

ma_async_notification_poll_init :: (pNotificationPoll: *ma_async_notification_poll) -> ma_result #foreign miniaudio;

ma_async_notification_poll_is_signalled :: (pNotificationPoll: *ma_async_notification_poll) -> ma_bool32 #foreign miniaudio;

/*
Event Notification

This uses an ma_event. If threading is disabled (MA_NO_THREADING), initialization will fail.
*/
ma_async_notification_event :: struct {
    cb: ma_async_notification_callbacks;

    e:  ma_event;
}

ma_async_notification_event_init :: (pNotificationEvent: *ma_async_notification_event) -> ma_result #foreign miniaudio;

ma_async_notification_event_uninit :: (pNotificationEvent: *ma_async_notification_event) -> ma_result #foreign miniaudio;

ma_async_notification_event_wait :: (pNotificationEvent: *ma_async_notification_event) -> ma_result #foreign miniaudio;

ma_async_notification_event_signal :: (pNotificationEvent: *ma_async_notification_event) -> ma_result #foreign miniaudio;

/*
Slot Allocator
--------------
The idea of the slot allocator is for it to be used in conjunction with a fixed sized buffer. You use the slot allocator to allocator an index that can be used
as the insertion point for an object.

Slots are reference counted to help mitigate the ABA problem in the lock-free queue we use for tracking jobs.

The slot index is stored in the low 32 bits. The reference counter is stored in the high 32 bits:

+-----------------+-----------------+
| 32 Bits         | 32 Bits         |
+-----------------+-----------------+
| Reference Count | Slot Index      |
+-----------------+-----------------+
*/
ma_slot_allocator_config :: struct {
    capacity: ma_uint32; /* The number of slots to make available. */
}

/************************************************************************************************************************************************************

Job Queue

************************************************************************************************************************************************************/
ma_slot_allocator_config_init :: (capacity: ma_uint32) -> ma_slot_allocator_config #foreign miniaudio;

ma_slot_allocator_group :: struct {
    bitfield: ma_uint32; /* Must be used atomically because the allocation and freeing routines need to make copies of this which must never be optimized away by the compiler. */
}

ma_slot_allocator :: struct {
    pGroups:   *ma_slot_allocator_group; /* Slots are grouped in chunks of 32. */
    pSlots:    *ma_uint32; /* 32 bits for reference counting for ABA mitigation. */
    count:     ma_uint32; /* Allocation count. */
    capacity:  ma_uint32;

    /* Memory management. */
    _ownsHeap: ma_bool32;
    _pHeap:    *void;
}

ma_slot_allocator_get_heap_size :: (pConfig: *ma_slot_allocator_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_slot_allocator_init_preallocated :: (pConfig: *ma_slot_allocator_config, pHeap: *void, pAllocator: *ma_slot_allocator) -> ma_result #foreign miniaudio;

ma_slot_allocator_init :: (pConfig: *ma_slot_allocator_config, pAllocationCallbacks: *ma_allocation_callbacks, pAllocator: *ma_slot_allocator) -> ma_result #foreign miniaudio;

ma_slot_allocator_uninit :: (pAllocator: *ma_slot_allocator, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_slot_allocator_alloc :: (pAllocator: *ma_slot_allocator, pSlot: *ma_uint64) -> ma_result #foreign miniaudio;

ma_slot_allocator_free :: (pAllocator: *ma_slot_allocator, slot: ma_uint64) -> ma_result #foreign miniaudio;

/*
Callback for processing a job. Each job type will have their own processing callback which will be
called by ma_job_process().
*/
ma_job_proc :: #type (pJob: *ma_job) -> ma_result #c_call;

/* When a job type is added here an callback needs to be added go "g_jobVTable" in the implementation section. */
ma_job_type :: enum u32 {
    QUIT                                   :: 0;
    CUSTOM                                 :: 1;

    RESOURCE_MANAGER_LOAD_DATA_BUFFER_NODE :: 2;
    RESOURCE_MANAGER_FREE_DATA_BUFFER_NODE :: 3;
    RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE :: 4;
    RESOURCE_MANAGER_LOAD_DATA_BUFFER      :: 5;
    RESOURCE_MANAGER_FREE_DATA_BUFFER      :: 6;
    RESOURCE_MANAGER_LOAD_DATA_STREAM      :: 7;
    RESOURCE_MANAGER_FREE_DATA_STREAM      :: 8;
    RESOURCE_MANAGER_PAGE_DATA_STREAM      :: 9;
    RESOURCE_MANAGER_SEEK_DATA_STREAM      :: 10;

    DEVICE_AAUDIO_REROUTE                  :: 11;

    COUNT                                  :: 12;
}

ma_job :: struct {
    toc:   union {
        breakup:    struct {
            code:     ma_uint16; /* Job type. */
            slot:     ma_uint16; /* Index into a ma_slot_allocator. */
            refcount: ma_uint32;
        };

        allocation: ma_uint64;
    }; /* 8 bytes. We encode the job code into the slot allocation data to save space. */

    next:  ma_uint64; /* refcount + slot for the next item. Does not include the job code. */
    order: ma_uint32; /* Execution order. Used to create a data dependency and ensure a job is executed in order. Usage is contextual depending on the job type. */

    data:  union {
        custom:          struct {
            proc:  ma_job_proc;
            data0: ma_uintptr;
            data1: ma_uintptr;
        };

        resourceManager: union {
            loadDataBufferNode: struct {
                pResourceManager:  *void; /*ma_resource_manager**/
                pDataBufferNode:   *void; /*ma_resource_manager_data_buffer_node**/
                pFilePath:         *u8;
                pFilePathW:        *s32;
                flags:             ma_uint32; /* Resource manager data source flags that were used when initializing the data buffer. */
                pInitNotification: *ma_async_notification; /* Signalled when the data buffer has been initialized and the format/channels/rate can be retrieved. */
                pDoneNotification: *ma_async_notification; /* Signalled when the data buffer has been fully decoded. Will be passed through to MA_JOB_TYPE_RESOURCE_MANAGER_PAGE_DATA_BUFFER_NODE when decoding. */
                pInitFence:        *ma_fence; /* Released when initialization of the decoder is complete. */
                pDoneFence:        *ma_fence; /* Released if initialization of the decoder fails. Passed through to PAGE_DATA_BUFFER_NODE untouched if init is successful. */
            };

            freeDataBufferNode: struct {
                pResourceManager:  *void; /*ma_resource_manager**/
                pDataBufferNode:   *void; /*ma_resource_manager_data_buffer_node**/
                pDoneNotification: *ma_async_notification;
                pDoneFence:        *ma_fence;
            };

            pageDataBufferNode: struct {
                pResourceManager:  *void; /*ma_resource_manager**/
                pDataBufferNode:   *void; /*ma_resource_manager_data_buffer_node**/
                pDecoder:          *void; /*ma_decoder**/
                pDoneNotification: *ma_async_notification; /* Signalled when the data buffer has been fully decoded. */
                pDoneFence:        *ma_fence; /* Passed through from LOAD_DATA_BUFFER_NODE and released when the data buffer completes decoding or an error occurs. */
            };

            loadDataBuffer:     struct {
                pDataBuffer:             *void; /*ma_resource_manager_data_buffer**/
                pInitNotification:       *ma_async_notification; /* Signalled when the data buffer has been initialized and the format/channels/rate can be retrieved. */
                pDoneNotification:       *ma_async_notification; /* Signalled when the data buffer has been fully decoded. */
                pInitFence:              *ma_fence; /* Released when the data buffer has been initialized and the format/channels/rate can be retrieved. */
                pDoneFence:              *ma_fence; /* Released when the data buffer has been fully decoded. */
                rangeBegInPCMFrames:     ma_uint64;
                rangeEndInPCMFrames:     ma_uint64;
                loopPointBegInPCMFrames: ma_uint64;
                loopPointEndInPCMFrames: ma_uint64;
                isLooping:               ma_uint32;
            };

            freeDataBuffer:     struct {
                pDataBuffer:       *void; /*ma_resource_manager_data_buffer**/
                pDoneNotification: *ma_async_notification;
                pDoneFence:        *ma_fence;
            };

            loadDataStream:     struct {
                pDataStream:       *void; /*ma_resource_manager_data_stream**/
                pFilePath:         *u8; /* Allocated when the job is posted, freed by the job thread after loading. */
                pFilePathW:        *s32; /* ^ As above ^. Only used if pFilePath is NULL. */
                initialSeekPoint:  ma_uint64;
                pInitNotification: *ma_async_notification; /* Signalled after the first two pages have been decoded and frames can be read from the stream. */
                pInitFence:        *ma_fence;
            };

            freeDataStream:     struct {
                pDataStream:       *void; /*ma_resource_manager_data_stream**/
                pDoneNotification: *ma_async_notification;
                pDoneFence:        *ma_fence;
            };

            pageDataStream:     struct {
                pDataStream: *void; /*ma_resource_manager_data_stream**/
                pageIndex:   ma_uint32; /* The index of the page to decode into. */
            };

            seekDataStream:     struct {
                pDataStream: *void; /*ma_resource_manager_data_stream**/
                frameIndex:  ma_uint64;
            };
        };

        device:          union {
            aaudio: union {
                reroute: struct {
                    pDevice:    *void; /*ma_device**/
                    deviceType: ma_uint32; /*ma_device_type*/
                };
            };
        };
    };
}

ma_job_init :: (code: ma_uint16) -> ma_job #foreign miniaudio;

ma_job_process :: (pJob: *ma_job) -> ma_result #foreign miniaudio;

/*
When set, ma_job_queue_next() will not wait and no semaphore will be signaled in
ma_job_queue_post(). ma_job_queue_next() will return MA_NO_DATA_AVAILABLE if nothing is available.

This flag should always be used for platforms that do not support multithreading.
*/
ma_job_queue_flags :: enum u32 {
    MA_JOB_QUEUE_FLAG_NON_BLOCKING :: 1;
}

ma_job_queue_config :: struct {
    flags:    ma_uint32;
    capacity: ma_uint32; /* The maximum number of jobs that can fit in the queue at a time. */
}

ma_job_queue_config_init :: (flags: ma_uint32, capacity: ma_uint32) -> ma_job_queue_config #foreign miniaudio;

ma_job_queue :: struct {
    flags:     ma_uint32; /* Flags passed in at initialization time. */
    capacity:  ma_uint32; /* The maximum number of jobs that can fit in the queue at a time. Set by the config. */
    head:      ma_uint64; /* The first item in the list. Required for removing from the top of the list. */
    tail:      ma_uint64; /* The last item in the list. Required for appending to the end of the list. */

    sem:       ma_semaphore; /* Only used when MA_JOB_QUEUE_FLAG_NON_BLOCKING is unset. */

    allocator: ma_slot_allocator;
    pJobs:     *ma_job;

    lock:      ma_spinlock;

    /* Memory management. */
    _pHeap:    *void;
    _ownsHeap: ma_bool32;
}

ma_job_queue_get_heap_size :: (pConfig: *ma_job_queue_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_job_queue_init_preallocated :: (pConfig: *ma_job_queue_config, pHeap: *void, pQueue: *ma_job_queue) -> ma_result #foreign miniaudio;

ma_job_queue_init :: (pConfig: *ma_job_queue_config, pAllocationCallbacks: *ma_allocation_callbacks, pQueue: *ma_job_queue) -> ma_result #foreign miniaudio;

ma_job_queue_uninit :: (pQueue: *ma_job_queue, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_job_queue_post :: (pQueue: *ma_job_queue, pJob: *ma_job) -> ma_result #foreign miniaudio;

ma_job_queue_next :: (pQueue: *ma_job_queue, pJob: *ma_job) -> ma_result #foreign miniaudio;

ma_device_state :: enum u32 {
    uninitialized :: 0;
    stopped       :: 1;
    started       :: 2;
    starting      :: 3;
    stopping      :: 4;
}

ma_atomic_device_state :: struct {
    value: ma_device_state;
}

/* Backend enums must be in priority order. */
ma_backend :: enum u32 {
    wasapi     :: 0;
    dsound     :: 1;
    winmm      :: 2;
    coreaudio  :: 3;
    sndio      :: 4;
    audio4     :: 5;
    oss        :: 6;
    pulseaudio :: 7;
    alsa       :: 8;
    jack       :: 9;
    aaudio     :: 10;
    opensl     :: 11;
    webaudio   :: 12;
    custom     :: 13;
    _null      :: 14;
}

/*
Device job thread. This is used by backends that require asynchronous processing of certain
operations. It is not used by all backends.

The device job thread is made up of a thread and a job queue. You can post a job to the thread with
ma_device_job_thread_post(). The thread will do the processing of the job.
*/
ma_device_job_thread_config :: struct {
    noThread:         ma_bool32; /* Set this to true if you want to process jobs yourself. */
    jobQueueCapacity: ma_uint32;
    jobQueueFlags:    ma_uint32;
}

ma_device_job_thread_config_init :: () -> ma_device_job_thread_config #foreign miniaudio;

ma_device_job_thread :: struct {
    thread:     ma_thread;
    jobQueue:   ma_job_queue;
    _hasThread: ma_bool32;
}

ma_device_job_thread_init :: (pConfig: *ma_device_job_thread_config, pAllocationCallbacks: *ma_allocation_callbacks, pJobThread: *ma_device_job_thread) -> ma_result #foreign miniaudio;

ma_device_job_thread_uninit :: (pJobThread: *ma_device_job_thread, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_device_job_thread_post :: (pJobThread: *ma_device_job_thread, pJob: *ma_job) -> ma_result #foreign miniaudio;

ma_device_job_thread_next :: (pJobThread: *ma_device_job_thread, pJob: *ma_job) -> ma_result #foreign miniaudio;

/* Device notification types. */
ma_device_notification_type :: enum u32 {
    started            :: 0;
    stopped            :: 1;
    rerouted           :: 2;
    interruption_began :: 3;
    interruption_ended :: 4;
}

ma_device_notification :: struct {
    pDevice: *ma_device;
    type:    ma_device_notification_type;
    data:    union {
        started:      struct {
            _unused: s32;
        };

        stopped:      struct {
            _unused: s32;
        };

        rerouted:     struct {
            _unused: s32;
        };

        interruption: struct {
            _unused: s32;
        };
    };
}

/*
The notification callback for when the application should be notified of a change to the device.

This callback is used for notifying the application of changes such as when the device has started,
stopped, rerouted or an interruption has occurred. Note that not all backends will post all
notification types. For example, some backends will perform automatic stream routing without any
kind of notification to the host program which means miniaudio will never know about it and will
never be able to fire the rerouted notification. You should keep this in mind when designing your
program.

The stopped notification will *not* get fired when a device is rerouted.


Parameters
----------
pNotification (in)
A pointer to a structure containing information about the event. Use the `pDevice` member of
this object to retrieve the relevant device. The `type` member can be used to discriminate
against each of the notification types.


Remarks
-------
Do not restart or uninitialize the device from the callback.

Not all notifications will be triggered by all backends, however the started and stopped events
should be reliable for all backends. Some backends do not have a good way to detect device
stoppages due to unplugging the device which may result in the stopped callback not getting
fired. This has been observed with at least one BSD variant.

The rerouted notification is fired *after* the reroute has occurred. The stopped notification will
*not* get fired when a device is rerouted. The following backends are known to do automatic stream
rerouting, but do not have a way to be notified of the change:

* DirectSound

The interruption notifications are used on mobile platforms for detecting when audio is interrupted
due to things like an incoming phone call. Currently this is only implemented on iOS. None of the
Android backends will report this notification.
*/
ma_device_notification_proc :: #type (pNotification: *ma_device_notification) -> void #c_call;

/*
The callback for processing audio data from the device.

The data callback is fired by miniaudio whenever the device needs to have more data delivered to a playback device, or when a capture device has some data
available. This is called as soon as the backend asks for more data which means it may be called with inconsistent frame counts. You cannot assume the
callback will be fired with a consistent frame count.


Parameters
----------
pDevice (in)
A pointer to the relevant device.

pOutput (out)
A pointer to the output buffer that will receive audio data that will later be played back through the speakers. This will be non-null for a playback or
full-duplex device and null for a capture and loopback device.

pInput (in)
A pointer to the buffer containing input data from a recording device. This will be non-null for a capture, full-duplex or loopback device and null for a
playback device.

frameCount (in)
The number of PCM frames to process. Note that this will not necessarily be equal to what you requested when you initialized the device. The
`periodSizeInFrames` and `periodSizeInMilliseconds` members of the device config are just hints, and are not necessarily exactly what you'll get. You must
not assume this will always be the same value each time the callback is fired.


Remarks
-------
You cannot stop and start the device from inside the callback or else you'll get a deadlock. You must also not uninitialize the device from inside the
callback. The following APIs cannot be called from inside the callback:

ma_device_init()
ma_device_init_ex()
ma_device_uninit()
ma_device_start()
ma_device_stop()

The proper way to stop the device is to call `ma_device_stop()` from a different thread, normally the main application thread.
*/
ma_device_data_proc :: #type (pDevice: *ma_device, pOutput: *void, pInput: *void, frameCount: ma_uint32) -> void #c_call;

/*
DEPRECATED. Use ma_device_notification_proc instead.

The callback for when the device has been stopped.

This will be called when the device is stopped explicitly with `ma_device_stop()` and also called implicitly when the device is stopped through external forces
such as being unplugged or an internal error occurring.


Parameters
----------
pDevice (in)
A pointer to the device that has just stopped.


Remarks
-------
Do not restart or uninitialize the device from the callback.
*/
ma_stop_proc :: #type (pDevice: *ma_device) -> void #c_call;

ma_device_type :: enum u32 {
    playback :: 1;
    capture  :: 2;
    duplex   :: 3;
    loopback :: 4;
}

ma_share_mode :: enum u32 {
    shared    :: 0;
    exclusive :: 1;
}

/* iOS/tvOS/watchOS session categories. */
ma_ios_session_category :: enum u32 {
    default         :: 0;
    none            :: 1;
    ambient         :: 2;
    solo_ambient    :: 3;
    playback        :: 4;
    record          :: 5;
    play_and_record :: 6;
    multi_route     :: 7;
}

/* iOS/tvOS/watchOS session category options */
ma_ios_session_category_option :: enum u32 {
    mix_with_others                            :: 1;
    duck_others                                :: 2;
    allow_bluetooth                            :: 4;
    default_to_speaker                         :: 8;
    interrupt_spoken_audio_and_mix_with_others :: 17;
    allow_bluetooth_a2dp                       :: 32;
    allow_air_play                             :: 64;
}

/* OpenSL stream types. */
ma_opensl_stream_type :: enum u32 {
    default      :: 0;
    voice        :: 1;
    system       :: 2;
    ring         :: 3;
    media        :: 4;
    alarm        :: 5;
    notification :: 6;
}

/* OpenSL recording presets. */
ma_opensl_recording_preset :: enum u32 {
    default             :: 0;
    generic             :: 1;
    camcorder           :: 2;
    voice_recognition   :: 3;
    voice_communication :: 4;
    voice_unprocessed   :: 5;
}

/* WASAPI audio thread priority characteristics. */
ma_wasapi_usage :: enum u32 {
    default   :: 0;
    games     :: 1;
    pro_audio :: 2;
}

/* AAudio usage types. */
ma_aaudio_usage :: enum u32 {
    default                        :: 0;
    media                          :: 1;
    voice_communication            :: 2;
    voice_communication_signalling :: 3;
    alarm                          :: 4;
    notification                   :: 5;
    notification_ringtone          :: 6;
    notification_event             :: 7;
    assistance_accessibility       :: 8;
    assistance_navigation_guidance :: 9;
    assistance_sonification        :: 10;
    game                           :: 11;
    assitant                       :: 12;
    emergency                      :: 13;
    safety                         :: 14;
    vehicle_status                 :: 15;
    announcement                   :: 16;
}

/* AAudio content types. */
ma_aaudio_content_type :: enum u32 {
    default      :: 0;
    speech       :: 1;
    music        :: 2;
    movie        :: 3;
    sonification :: 4;
}

/* AAudio input presets. */
ma_aaudio_input_preset :: enum u32 {
    default             :: 0;
    generic             :: 1;
    camcorder           :: 2;
    voice_recognition   :: 3;
    voice_communication :: 4;
    unprocessed         :: 5;
    voice_performance   :: 6;
}

ma_aaudio_allowed_capture_policy :: enum u32 {
    default   :: 0;
    by_all    :: 1;
    by_system :: 2;
    by_none   :: 3;
}

ma_timer :: union {
    counter:  ma_int64;
    counterD: float64;
}

ma_device_id :: union {
    wasapi:      [64] ma_wchar_win32; /* WASAPI uses a wchar_t string for identification. */
    dsound:      [16] ma_uint8; /* DirectSound uses a GUID for identification. */
    winmm:       ma_uint32; /* When creating a device, WinMM expects a Win32 UINT_PTR for device identification. In practice it's actually just a UINT. */
    alsa:        [256] u8; /* ALSA uses a name string for identification. */
    pulse:       [256] u8; /* PulseAudio uses a name string for identification. */
    jack:        s32; /* JACK always uses default devices. */
    coreaudio:   [256] u8; /* Core Audio uses a string for identification. */
    sndio:       [256] u8; /* "snd/0", etc. */
    audio4:      [256] u8; /* "/dev/audio", etc. */
    oss:         [64] u8; /* "dev/dsp0", etc. "dev/dsp" for the default device. */
    aaudio:      ma_int32; /* AAudio uses a 32-bit integer for identification. */
    opensl:      ma_uint32; /* OpenSL|ES uses a 32-bit unsigned integer for identification. */
    webaudio:    [32] u8; /* Web Audio always uses default devices for now, but if this changes it'll be a GUID. */
    custom:      union {
        i: s32;
        s: [256] u8;
        p: *void;
    }; /* The custom backend could be anything. Give them a few options. */

    nullbackend: s32; /* The null backend uses an integer for device IDs. */
}

ma_device_info :: struct {
    /* Basic info. This is the only information guaranteed to be filled in during device enumeration. */
    id:                    ma_device_id;
    name:                  [256] u8; /* +1 for null terminator. */
    isDefault:             ma_bool32;

    nativeDataFormatCount: ma_uint32;
    nativeDataFormats:     [64] struct {
        format:     ma_format; /* Sample format. If set to ma_format_unknown, all sample formats are supported. */
        channels:   ma_uint32; /* If set to 0, all channels are supported. */
        sampleRate: ma_uint32; /* If set to 0, all sample rates are supported. */
        flags:      ma_uint32; /* A combination of MA_DATA_FORMAT_FLAG_* flags. */
    }; /*ma_format_count * ma_standard_sample_rate_count * MA_MAX_CHANNELS*/
}

ma_device_config :: struct {
    deviceType:                ma_device_type;
    sampleRate:                ma_uint32;
    periodSizeInFrames:        ma_uint32;
    periodSizeInMilliseconds:  ma_uint32;
    periods:                   ma_uint32;
    performanceProfile:        ma_performance_profile;
    noPreSilencedOutputBuffer: ma_bool8; /* When set to true, the contents of the output buffer passed into the data callback will be left undefined rather than initialized to silence. */
    noClip:                    ma_bool8; /* When set to true, the contents of the output buffer passed into the data callback will be clipped after returning. Only applies when the playback sample format is f32. */
    noDisableDenormals:        ma_bool8; /* Do not disable denormals when firing the data callback. */
    noFixedSizedCallback:      ma_bool8; /* Disables strict fixed-sized data callbacks. Setting this to true will result in the period size being treated only as a hint to the backend. This is an optimization for those who don't need fixed sized callbacks. */
    dataCallback:              ma_device_data_proc;
    notificationCallback:      ma_device_notification_proc;
    stopCallback:              ma_stop_proc;
    pUserData:                 *void;
    resampling:                ma_resampler_config;
    playback:                  struct {
        pDeviceID:                       *ma_device_id;
        format:                          ma_format;
        channels:                        ma_uint32;
        pChannelMap:                     *ma_channel;
        channelMixMode:                  ma_channel_mix_mode;
        calculateLFEFromSpatialChannels: ma_bool32; /* When an output LFE channel is present, but no input LFE, set to true to set the output LFE to the average of all spatial channels (LR, FR, etc.). Ignored when an input LFE is present. */
        shareMode:                       ma_share_mode;
    };

    capture:                   struct {
        pDeviceID:                       *ma_device_id;
        format:                          ma_format;
        channels:                        ma_uint32;
        pChannelMap:                     *ma_channel;
        channelMixMode:                  ma_channel_mix_mode;
        calculateLFEFromSpatialChannels: ma_bool32; /* When an output LFE channel is present, but no input LFE, set to true to set the output LFE to the average of all spatial channels (LR, FR, etc.). Ignored when an input LFE is present. */
        shareMode:                       ma_share_mode;
    };

    wasapi:                    struct {
        usage:                  ma_wasapi_usage; /* When configured, uses Avrt APIs to set the thread characteristics. */
        noAutoConvertSRC:       ma_bool8; /* When set to true, disables the use of AUDCLNT_STREAMFLAGS_AUTOCONVERTPCM. */
        noDefaultQualitySRC:    ma_bool8; /* When set to true, disables the use of AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY. */
        noAutoStreamRouting:    ma_bool8; /* Disables automatic stream routing. */
        noHardwareOffloading:   ma_bool8; /* Disables WASAPI's hardware offloading feature. */
        loopbackProcessID:      ma_uint32; /* The process ID to include or exclude for loopback mode. Set to 0 to capture audio from all processes. Ignored when an explicit device ID is specified. */
        loopbackProcessExclude: ma_bool8; /* When set to true, excludes the process specified by loopbackProcessID. By default, the process will be included. */
    };

    alsa:                      struct {
        noMMap:         ma_bool32; /* Disables MMap mode. */
        noAutoFormat:   ma_bool32; /* Opens the ALSA device with SND_PCM_NO_AUTO_FORMAT. */
        noAutoChannels: ma_bool32; /* Opens the ALSA device with SND_PCM_NO_AUTO_CHANNELS. */
        noAutoResample: ma_bool32; /* Opens the ALSA device with SND_PCM_NO_AUTO_RESAMPLE. */
    };

    pulse:                     struct {
        pStreamNamePlayback: *u8;
        pStreamNameCapture:  *u8;
    };

    coreaudio:                 struct {
        allowNominalSampleRateChange: ma_bool32; /* Desktop only. When enabled, allows changing of the sample rate at the operating system level. */
    };

    opensl:                    struct {
        streamType:                     ma_opensl_stream_type;
        recordingPreset:                ma_opensl_recording_preset;
        enableCompatibilityWorkarounds: ma_bool32;
    };

    aaudio:                    struct {
        usage:                          ma_aaudio_usage;
        contentType:                    ma_aaudio_content_type;
        inputPreset:                    ma_aaudio_input_preset;
        allowedCapturePolicy:           ma_aaudio_allowed_capture_policy;
        noAutoStartAfterReroute:        ma_bool32;
        enableCompatibilityWorkarounds: ma_bool32;
    };
}

/*
The callback for handling device enumeration. This is fired from `ma_context_enumerate_devices()`.


Parameters
----------
pContext (in)
A pointer to the context performing the enumeration.

deviceType (in)
The type of the device being enumerated. This will always be either `ma_device_type_playback` or `ma_device_type_capture`.

pInfo (in)
A pointer to a `ma_device_info` containing the ID and name of the enumerated device. Note that this will not include detailed information about the device,
only basic information (ID and name). The reason for this is that it would otherwise require opening the backend device to probe for the information which
is too inefficient.

pUserData (in)
The user data pointer passed into `ma_context_enumerate_devices()`.
*/
ma_enum_devices_callback_proc :: #type (pContext: *ma_context, deviceType: ma_device_type, pInfo: *ma_device_info, pUserData: *void) -> ma_bool32 #c_call;

/*
Describes some basic details about a playback or capture device.
*/
ma_device_descriptor :: struct {
    pDeviceID:                *ma_device_id;
    shareMode:                ma_share_mode;
    format:                   ma_format;
    channels:                 ma_uint32;
    sampleRate:               ma_uint32;
    channelMap:               [254] ma_channel;
    periodSizeInFrames:       ma_uint32;
    periodSizeInMilliseconds: ma_uint32;
    periodCount:              ma_uint32;
}

/*
These are the callbacks required to be implemented for a backend. These callbacks are grouped into two parts: context and device. There is one context
to many devices. A device is created from a context.

The general flow goes like this:

1) A context is created with `onContextInit()`
1a) Available devices can be enumerated with `onContextEnumerateDevices()` if required.
1b) Detailed information about a device can be queried with `onContextGetDeviceInfo()` if required.
2) A device is created from the context that was created in the first step using `onDeviceInit()`, and optionally a device ID that was
selected from device enumeration via `onContextEnumerateDevices()`.
3) A device is started or stopped with `onDeviceStart()` / `onDeviceStop()`
4) Data is delivered to and from the device by the backend. This is always done based on the native format returned by the prior call
to `onDeviceInit()`. Conversion between the device's native format and the format requested by the application will be handled by
miniaudio internally.

Initialization of the context is quite simple. You need to do any necessary initialization of internal objects and then output the
callbacks defined in this structure.

Once the context has been initialized you can initialize a device. Before doing so, however, the application may want to know which
physical devices are available. This is where `onContextEnumerateDevices()` comes in. This is fairly simple. For each device, fire the
given callback with, at a minimum, the basic information filled out in `ma_device_info`. When the callback returns `MA_FALSE`, enumeration
needs to stop and the `onContextEnumerateDevices()` function returns with a success code.

Detailed device information can be retrieved from a device ID using `onContextGetDeviceInfo()`. This takes as input the device type and ID,
and on output returns detailed information about the device in `ma_device_info`. The `onContextGetDeviceInfo()` callback must handle the
case when the device ID is NULL, in which case information about the default device needs to be retrieved.

Once the context has been created and the device ID retrieved (if using anything other than the default device), the device can be created.
This is a little bit more complicated than initialization of the context due to it's more complicated configuration. When initializing a
device, a duplex device may be requested. This means a separate data format needs to be specified for both playback and capture. On input,
the data format is set to what the application wants. On output it's set to the native format which should match as closely as possible to
the requested format. The conversion between the format requested by the application and the device's native format will be handled
internally by miniaudio.

On input, if the sample format is set to `ma_format_unknown`, the backend is free to use whatever sample format it desires, so long as it's
supported by miniaudio. When the channel count is set to 0, the backend should use the device's native channel count. The same applies for
sample rate. For the channel map, the default should be used when `ma_channel_map_is_blank()` returns true (all channels set to
`MA_CHANNEL_NONE`). On input, the `periodSizeInFrames` or `periodSizeInMilliseconds` option should always be set. The backend should
inspect both of these variables. If `periodSizeInFrames` is set, it should take priority, otherwise it needs to be derived from the period
size in milliseconds (`periodSizeInMilliseconds`) and the sample rate, keeping in mind that the sample rate may be 0, in which case the
sample rate will need to be determined before calculating the period size in frames. On output, all members of the `ma_device_descriptor`
object should be set to a valid value, except for `periodSizeInMilliseconds` which is optional (`periodSizeInFrames` *must* be set).

Starting and stopping of the device is done with `onDeviceStart()` and `onDeviceStop()` and should be self-explanatory. If the backend uses
asynchronous reading and writing, `onDeviceStart()` and `onDeviceStop()` should always be implemented.

The handling of data delivery between the application and the device is the most complicated part of the process. To make this a bit
easier, some helper callbacks are available. If the backend uses a blocking read/write style of API, the `onDeviceRead()` and
`onDeviceWrite()` callbacks can optionally be implemented. These are blocking and work just like reading and writing from a file. If the
backend uses a callback for data delivery, that callback must call `ma_device_handle_backend_data_callback()` from within it's callback.
This allows miniaudio to then process any necessary data conversion and then pass it to the miniaudio data callback.

If the backend requires absolute flexibility with it's data delivery, it can optionally implement the `onDeviceDataLoop()` callback
which will allow it to implement the logic that will run on the audio thread. This is much more advanced and is completely optional.

The audio thread should run data delivery logic in a loop while `ma_device_get_state() == ma_device_state_started` and no errors have been
encountered. Do not start or stop the device here. That will be handled from outside the `onDeviceDataLoop()` callback.

The invocation of the `onDeviceDataLoop()` callback will be handled by miniaudio. When you start the device, miniaudio will fire this
callback. When the device is stopped, the `ma_device_get_state() == ma_device_state_started` condition will fail and the loop will be terminated
which will then fall through to the part that stops the device. For an example on how to implement the `onDeviceDataLoop()` callback,
look at `ma_device_audio_thread__default_read_write()`. Implement the `onDeviceDataLoopWakeup()` callback if you need a mechanism to
wake up the audio thread.

If the backend supports an optimized retrieval of device information from an initialized `ma_device` object, it should implement the
`onDeviceGetInfo()` callback. This is optional, in which case it will fall back to `onContextGetDeviceInfo()` which is less efficient.
*/
ma_backend_callbacks :: struct {
    onContextInit:             #type (pContext: *ma_context, pConfig: *ma_context_config, pCallbacks: *ma_backend_callbacks) -> ma_result #c_call;
    onContextUninit:           #type (pContext: *ma_context) -> ma_result #c_call;
    onContextEnumerateDevices: #type (pContext: *ma_context, callback: ma_enum_devices_callback_proc, pUserData: *void) -> ma_result #c_call;
    onContextGetDeviceInfo:    #type (pContext: *ma_context, deviceType: ma_device_type, pDeviceID: *ma_device_id, pDeviceInfo: *ma_device_info) -> ma_result #c_call;
    onDeviceInit:              #type (pDevice: *ma_device, pConfig: *ma_device_config, pDescriptorPlayback: *ma_device_descriptor, pDescriptorCapture: *ma_device_descriptor) -> ma_result #c_call;
    onDeviceUninit:            #type (pDevice: *ma_device) -> ma_result #c_call;
    onDeviceStart:             #type (pDevice: *ma_device) -> ma_result #c_call;
    onDeviceStop:              #type (pDevice: *ma_device) -> ma_result #c_call;
    onDeviceRead:              #type (pDevice: *ma_device, pFrames: *void, frameCount: ma_uint32, pFramesRead: *ma_uint32) -> ma_result #c_call;
    onDeviceWrite:             #type (pDevice: *ma_device, pFrames: *void, frameCount: ma_uint32, pFramesWritten: *ma_uint32) -> ma_result #c_call;
    onDeviceDataLoop:          #type (pDevice: *ma_device) -> ma_result #c_call;
    onDeviceDataLoopWakeup:    #type (pDevice: *ma_device) -> ma_result #c_call;
    onDeviceGetInfo:           #type (pDevice: *ma_device, type: ma_device_type, pDeviceInfo: *ma_device_info) -> ma_result #c_call;
}

ma_context_config :: struct {
    pLog:                *ma_log;
    threadPriority:      ma_thread_priority;
    threadStackSize:     u64;
    pUserData:           *void;
    allocationCallbacks: ma_allocation_callbacks;
    alsa:                struct {
        useVerboseDeviceEnumeration: ma_bool32;
    };

    pulse:               struct {
        pApplicationName: *u8;
        pServerName:      *u8;
        tryAutoSpawn:     ma_bool32; /* Enables autospawning of the PulseAudio daemon if necessary. */
    };

    coreaudio:           struct {
        sessionCategory:          ma_ios_session_category;
        sessionCategoryOptions:   ma_uint32;
        noAudioSessionActivate:   ma_bool32; /* iOS only. When set to true, does not perform an explicit [[AVAudioSession sharedInstace] setActive:true] on initialization. */
        noAudioSessionDeactivate: ma_bool32; /* iOS only. When set to true, does not perform an explicit [[AVAudioSession sharedInstace] setActive:false] on uninitialization. */
    };

    jack:                struct {
        pClientName:    *u8;
        tryStartServer: ma_bool32;
    };

    custom:              ma_backend_callbacks;
}

/* WASAPI specific structure for some commands which must run on a common thread due to bugs in WASAPI. */
ma_context_command__wasapi :: struct {
    code:   s32;
    pEvent: *ma_event; /* This will be signalled when the event is complete. */
    data:   union {
        quit:               struct {
            _unused: s32;
        };

        createAudioClient:  struct {
            deviceType:           ma_device_type;
            pAudioClient:         *void;
            ppAudioClientService: **void;
            pResult:              *ma_result; /* The result from creating the audio client service. */
        };

        releaseAudioClient: struct {
            pDevice:    *ma_device;
            deviceType: ma_device_type;
        };
    };
}

ma_context :: struct {
    callbacks:               ma_backend_callbacks;
    backend:                 ma_backend; /* DirectSound, ALSA, etc. */
    pLog:                    *ma_log;
    log:                     ma_log; /* Only used if the log is owned by the context. The pLog member will be set to &log in this case. */
    threadPriority:          ma_thread_priority;
    threadStackSize:         u64;
    pUserData:               *void;
    allocationCallbacks:     ma_allocation_callbacks;
    deviceEnumLock:          ma_mutex; /* Used to make ma_context_get_devices() thread safe. */
    deviceInfoLock:          ma_mutex; /* Used to make ma_context_get_device_info() thread safe. */
    deviceInfoCapacity:      ma_uint32; /* Total capacity of pDeviceInfos. */
    playbackDeviceInfoCount: ma_uint32;
    captureDeviceInfoCount:  ma_uint32;
    pDeviceInfos:            *ma_device_info; /* Playback devices first, then capture. */

    union {
        coreaudio:    struct {
            hCoreFoundation:                   ma_handle;
            CFStringGetCString:                ma_proc;
            CFRelease:                         ma_proc;

            hCoreAudio:                        ma_handle;
            AudioObjectGetPropertyData:        ma_proc;
            AudioObjectGetPropertyDataSize:    ma_proc;
            AudioObjectSetPropertyData:        ma_proc;
            AudioObjectAddPropertyListener:    ma_proc;
            AudioObjectRemovePropertyListener: ma_proc;

            hAudioUnit:                        ma_handle; /* Could possibly be set to AudioToolbox on later versions of macOS. */
            AudioComponentFindNext:            ma_proc;
            AudioComponentInstanceDispose:     ma_proc;
            AudioComponentInstanceNew:         ma_proc;
            AudioOutputUnitStart:              ma_proc;
            AudioOutputUnitStop:               ma_proc;
            AudioUnitAddPropertyListener:      ma_proc;
            AudioUnitGetPropertyInfo:          ma_proc;
            AudioUnitGetProperty:              ma_proc;
            AudioUnitSetProperty:              ma_proc;
            AudioUnitInitialize:               ma_proc;
            AudioUnitRender:                   ma_proc;

            component:                         ma_ptr; /*AudioComponent*/
            noAudioSessionDeactivate:          ma_bool32; /* For tracking whether or not the iOS audio session should be explicitly deactivated. Set from the config in ma_context_init__coreaudio(). */
        };

        null_backend: struct {
            _unused: s32;
        };
    }

    union {
        posix:   struct {
            _unused: s32;
        };

        _unused: s32;
    }
}

ma_device :: struct {
    pContext:                  *ma_context;
    type:                      ma_device_type;
    sampleRate:                ma_uint32;
    state:                     ma_atomic_device_state; /* The state of the device is variable and can change at any time on any thread. Must be used atomically. */
    onData:                    ma_device_data_proc; /* Set once at initialization time and should not be changed after. */
    onNotification:            ma_device_notification_proc; /* Set once at initialization time and should not be changed after. */
    onStop:                    ma_stop_proc; /* DEPRECATED. Use the notification callback instead. Set once at initialization time and should not be changed after. */
    pUserData:                 *void; /* Application defined data. */
    startStopLock:             ma_mutex;
    wakeupEvent:               ma_event;
    startEvent:                ma_event;
    stopEvent:                 ma_event;
    thread:                    ma_thread;
    workResult:                ma_result; /* This is set by the worker thread after it's finished doing a job. */
    isOwnerOfContext:          ma_bool8; /* When set to true, uninitializing the device will also uninitialize the context. Set to true when NULL is passed into ma_device_init(). */
    noPreSilencedOutputBuffer: ma_bool8;
    noClip:                    ma_bool8;
    noDisableDenormals:        ma_bool8;
    noFixedSizedCallback:      ma_bool8;
    masterVolumeFactor:        ma_atomic_float; /* Linear 0..1. Can be read and written simultaneously by different threads. Must be used atomically. */
    duplexRB:                  ma_duplex_rb; /* Intermediary buffer for duplex device on asynchronous backends. */
    resampling:                struct {
        algorithm:        ma_resample_algorithm;
        pBackendVTable:   *ma_resampling_backend_vtable;
        pBackendUserData: *void;
        linear:           struct {
            lpfOrder: ma_uint32;
        };
    };

    playback:                  struct {
        pID:                             *ma_device_id; /* Set to NULL if using default ID, otherwise set to the address of "id". */
        id:                              ma_device_id; /* If using an explicit device, will be set to a copy of the ID used for initialization. Otherwise cleared to 0. */
        name:                            [256] u8; /* Maybe temporary. Likely to be replaced with a query API. */
        shareMode:                       ma_share_mode; /* Set to whatever was passed in when the device was initialized. */
        format:                          ma_format;
        channels:                        ma_uint32;
        channelMap:                      [254] ma_channel;
        internalFormat:                  ma_format;
        internalChannels:                ma_uint32;
        internalSampleRate:              ma_uint32;
        internalChannelMap:              [254] ma_channel;
        internalPeriodSizeInFrames:      ma_uint32;
        internalPeriods:                 ma_uint32;
        channelMixMode:                  ma_channel_mix_mode;
        calculateLFEFromSpatialChannels: ma_bool32;
        converter:                       ma_data_converter;
        pIntermediaryBuffer:             *void; /* For implementing fixed sized buffer callbacks. Will be null if using variable sized callbacks. */
        intermediaryBufferCap:           ma_uint32;
        intermediaryBufferLen:           ma_uint32; /* How many valid frames are sitting in the intermediary buffer. */
        pInputCache:                     *void; /* In external format. Can be null. */
        inputCacheCap:                   ma_uint64;
        inputCacheConsumed:              ma_uint64;
        inputCacheRemaining:             ma_uint64;
    };

    capture:                   struct {
        pID:                             *ma_device_id; /* Set to NULL if using default ID, otherwise set to the address of "id". */
        id:                              ma_device_id; /* If using an explicit device, will be set to a copy of the ID used for initialization. Otherwise cleared to 0. */
        name:                            [256] u8; /* Maybe temporary. Likely to be replaced with a query API. */
        shareMode:                       ma_share_mode; /* Set to whatever was passed in when the device was initialized. */
        format:                          ma_format;
        channels:                        ma_uint32;
        channelMap:                      [254] ma_channel;
        internalFormat:                  ma_format;
        internalChannels:                ma_uint32;
        internalSampleRate:              ma_uint32;
        internalChannelMap:              [254] ma_channel;
        internalPeriodSizeInFrames:      ma_uint32;
        internalPeriods:                 ma_uint32;
        channelMixMode:                  ma_channel_mix_mode;
        calculateLFEFromSpatialChannels: ma_bool32;
        converter:                       ma_data_converter;
        pIntermediaryBuffer:             *void; /* For implementing fixed sized buffer callbacks. Will be null if using variable sized callbacks. */
        intermediaryBufferCap:           ma_uint32;
        intermediaryBufferLen:           ma_uint32; /* How many valid frames are sitting in the intermediary buffer. */
    };

    union {
        coreaudio:   struct {
            deviceObjectIDPlayback:           ma_uint32;
            deviceObjectIDCapture:            ma_uint32;
            audioUnitPlayback:                ma_ptr; /*AudioUnit*/
            audioUnitCapture:                 ma_ptr; /*AudioUnit*/
            pAudioBufferList:                 ma_ptr; /* Only used for input devices. */
            audioBufferCapInFrames:           ma_uint32; /* Only used for input devices. The capacity in frames of each buffer in pAudioBufferList. */
            stopEvent:                        ma_event;
            originalPeriodSizeInFrames:       ma_uint32;
            originalPeriodSizeInMilliseconds: ma_uint32;
            originalPeriods:                  ma_uint32;
            originalPerformanceProfile:       ma_performance_profile;
            isDefaultPlaybackDevice:          ma_bool32;
            isDefaultCaptureDevice:           ma_bool32;
            isSwitchingPlaybackDevice:        ma_bool32; /* <-- Set to true when the default device has changed and miniaudio is in the process of switching. */
            isSwitchingCaptureDevice:         ma_bool32; /* <-- Set to true when the default device has changed and miniaudio is in the process of switching. */
            pNotificationHandler:             *void; /* Only used on mobile platforms. Obj-C object for handling route changes. */
        };

        null_device: struct {
            deviceThread:                         ma_thread;
            operationEvent:                       ma_event;
            operationCompletionEvent:             ma_event;
            operationSemaphore:                   ma_semaphore;
            operation:                            ma_uint32;
            operationResult:                      ma_result;
            timer:                                ma_timer;
            priorRunTime:                         float64;
            currentPeriodFramesRemainingPlayback: ma_uint32;
            currentPeriodFramesRemainingCapture:  ma_uint32;
            lastProcessedFramePlayback:           ma_uint64;
            lastProcessedFrameCapture:            ma_uint64;
            isStarted:                            ma_atomic_bool32; /* Read and written by multiple threads. Must be used atomically, and must be 32-bit for compiler compatibility. */
        };
    }
}

/*
Initializes a `ma_context_config` object.


Return Value
------------
A `ma_context_config` initialized to defaults.


Remarks
-------
You must always use this to initialize the default state of the `ma_context_config` object. Not using this will result in your program breaking when miniaudio
is updated and new members are added to `ma_context_config`. It also sets logical defaults.

You can override members of the returned object by changing it's members directly.


See Also
--------
ma_context_init()
*/
ma_context_config_init :: () -> ma_context_config #foreign miniaudio;

/*
Initializes a context.

The context is used for selecting and initializing an appropriate backend and to represent the backend at a more global level than that of an individual
device. There is one context to many devices, and a device is created from a context. A context is required to enumerate devices.


Parameters
----------
backends (in, optional)
A list of backends to try initializing, in priority order. Can be NULL, in which case it uses default priority order.

backendCount (in, optional)
The number of items in `backend`. Ignored if `backend` is NULL.

pConfig (in, optional)
The context configuration.

pContext (in)
A pointer to the context object being initialized.


Return Value
------------
MA_SUCCESS if successful; any other error code otherwise.


Thread Safety
-------------
Unsafe. Do not call this function across multiple threads as some backends read and write to global state.


Remarks
-------
When `backends` is NULL, the default priority order will be used. Below is a list of backends in priority order:

|-------------|-----------------------|--------------------------------------------------------|
| Name        | Enum Name             | Supported Operating Systems                            |
|-------------|-----------------------|--------------------------------------------------------|
| WASAPI      | ma_backend_wasapi     | Windows Vista+                                         |
| DirectSound | ma_backend_dsound     | Windows XP+                                            |
| WinMM       | ma_backend_winmm      | Windows XP+ (may work on older versions, but untested) |
| Core Audio  | ma_backend_coreaudio  | macOS, iOS                                             |
| ALSA        | ma_backend_alsa       | Linux                                                  |
| PulseAudio  | ma_backend_pulseaudio | Cross Platform (disabled on Windows, BSD and Android)  |
| JACK        | ma_backend_jack       | Cross Platform (disabled on BSD and Android)           |
| sndio       | ma_backend_sndio      | OpenBSD                                                |
| audio(4)    | ma_backend_audio4     | NetBSD, OpenBSD                                        |
| OSS         | ma_backend_oss        | FreeBSD                                                |
| AAudio      | ma_backend_aaudio     | Android 8+                                             |
| OpenSL|ES   | ma_backend_opensl     | Android (API level 16+)                                |
| Web Audio   | ma_backend_webaudio   | Web (via Emscripten)                                   |
| Null        | ma_backend_null       | Cross Platform (not used on Web)                       |
|-------------|-----------------------|--------------------------------------------------------|

The context can be configured via the `pConfig` argument. The config object is initialized with `ma_context_config_init()`. Individual configuration settings
can then be set directly on the structure. Below are the members of the `ma_context_config` object.

pLog
A pointer to the `ma_log` to post log messages to. Can be NULL if the application does not
require logging. See the `ma_log` API for details on how to use the logging system.

threadPriority
The desired priority to use for the audio thread. Allowable values include the following:

|--------------------------------------|
| Thread Priority                      |
|--------------------------------------|
| ma_thread_priority_idle              |
| ma_thread_priority_lowest            |
| ma_thread_priority_low               |
| ma_thread_priority_normal            |
| ma_thread_priority_high              |
| ma_thread_priority_highest (default) |
| ma_thread_priority_realtime          |
| ma_thread_priority_default           |
|--------------------------------------|

threadStackSize
The desired size of the stack for the audio thread. Defaults to the operating system's default.

pUserData
A pointer to application-defined data. This can be accessed from the context object directly such as `context.pUserData`.

allocationCallbacks
Structure containing custom allocation callbacks. Leaving this at defaults will cause it to use MA_MALLOC, MA_REALLOC and MA_FREE. These allocation
callbacks will be used for anything tied to the context, including devices.

alsa.useVerboseDeviceEnumeration
ALSA will typically enumerate many different devices which can be intrusive and not user-friendly. To combat this, miniaudio will enumerate only unique
card/device pairs by default. The problem with this is that you lose a bit of flexibility and control. Setting alsa.useVerboseDeviceEnumeration makes
it so the ALSA backend includes all devices. Defaults to false.

pulse.pApplicationName
PulseAudio only. The application name to use when initializing the PulseAudio context with `pa_context_new()`.

pulse.pServerName
PulseAudio only. The name of the server to connect to with `pa_context_connect()`.

pulse.tryAutoSpawn
PulseAudio only. Whether or not to try automatically starting the PulseAudio daemon. Defaults to false. If you set this to true, keep in mind that
miniaudio uses a trial and error method to find the most appropriate backend, and this will result in the PulseAudio daemon starting which may be
intrusive for the end user.

coreaudio.sessionCategory
iOS only. The session category to use for the shared AudioSession instance. Below is a list of allowable values and their Core Audio equivalents.

|-----------------------------------------|-------------------------------------|
| miniaudio Token                         | Core Audio Token                    |
|-----------------------------------------|-------------------------------------|
| ma_ios_session_category_ambient         | AVAudioSessionCategoryAmbient       |
| ma_ios_session_category_solo_ambient    | AVAudioSessionCategorySoloAmbient   |
| ma_ios_session_category_playback        | AVAudioSessionCategoryPlayback      |
| ma_ios_session_category_record          | AVAudioSessionCategoryRecord        |
| ma_ios_session_category_play_and_record | AVAudioSessionCategoryPlayAndRecord |
| ma_ios_session_category_multi_route     | AVAudioSessionCategoryMultiRoute    |
| ma_ios_session_category_none            | AVAudioSessionCategoryAmbient       |
| ma_ios_session_category_default         | AVAudioSessionCategoryAmbient       |
|-----------------------------------------|-------------------------------------|

coreaudio.sessionCategoryOptions
iOS only. Session category options to use with the shared AudioSession instance. Below is a list of allowable values and their Core Audio equivalents.

|---------------------------------------------------------------------------|------------------------------------------------------------------|
| miniaudio Token                                                           | Core Audio Token                                                 |
|---------------------------------------------------------------------------|------------------------------------------------------------------|
| ma_ios_session_category_option_mix_with_others                            | AVAudioSessionCategoryOptionMixWithOthers                        |
| ma_ios_session_category_option_duck_others                                | AVAudioSessionCategoryOptionDuckOthers                           |
| ma_ios_session_category_option_allow_bluetooth                            | AVAudioSessionCategoryOptionAllowBluetooth                       |
| ma_ios_session_category_option_default_to_speaker                         | AVAudioSessionCategoryOptionDefaultToSpeaker                     |
| ma_ios_session_category_option_interrupt_spoken_audio_and_mix_with_others | AVAudioSessionCategoryOptionInterruptSpokenAudioAndMixWithOthers |
| ma_ios_session_category_option_allow_bluetooth_a2dp                       | AVAudioSessionCategoryOptionAllowBluetoothA2DP                   |
| ma_ios_session_category_option_allow_air_play                             | AVAudioSessionCategoryOptionAllowAirPlay                         |
|---------------------------------------------------------------------------|------------------------------------------------------------------|

coreaudio.noAudioSessionActivate
iOS only. When set to true, does not perform an explicit [[AVAudioSession sharedInstace] setActive:true] on initialization.

coreaudio.noAudioSessionDeactivate
iOS only. When set to true, does not perform an explicit [[AVAudioSession sharedInstace] setActive:false] on uninitialization.

jack.pClientName
The name of the client to pass to `jack_client_open()`.

jack.tryStartServer
Whether or not to try auto-starting the JACK server. Defaults to false.


It is recommended that only a single context is active at any given time because it's a bulky data structure which performs run-time linking for the
relevant backends every time it's initialized.

The location of the context cannot change throughout it's lifetime. Consider allocating the `ma_context` object with `malloc()` if this is an issue. The
reason for this is that a pointer to the context is stored in the `ma_device` structure.


Example 1 - Default Initialization
----------------------------------
The example below shows how to initialize the context using the default configuration.

```c
ma_context context;
ma_result result = ma_context_init(NULL, 0, NULL, &context);
if (result != MA_SUCCESS) {
// Error.
}
```


Example 2 - Custom Configuration
--------------------------------
The example below shows how to initialize the context using custom backend priorities and a custom configuration. In this hypothetical example, the program
wants to prioritize ALSA over PulseAudio on Linux. They also want to avoid using the WinMM backend on Windows because it's latency is too high. They also
want an error to be returned if no valid backend is available which they achieve by excluding the Null backend.

For the configuration, the program wants to capture any log messages so they can, for example, route it to a log file and user interface.

```c
ma_backend backends[] = {
ma_backend_alsa,
ma_backend_pulseaudio,
ma_backend_wasapi,
ma_backend_dsound
};

ma_log log;
ma_log_init(&log);
ma_log_register_callback(&log, ma_log_callback_init(my_log_callbac, pMyLogUserData));

ma_context_config config = ma_context_config_init();
config.pLog = &log; // Specify a custom log object in the config so any logs that are posted from ma_context_init() are captured.

ma_context context;
ma_result result = ma_context_init(backends, sizeof(backends)/sizeof(backends[0]), &config, &context);
if (result != MA_SUCCESS) {
// Error.
if (result == MA_NO_BACKEND) {
// Couldn't find an appropriate backend.
}
}

// You could also attach a log callback post-initialization:
ma_log_register_callback(ma_context_get_log(&context), ma_log_callback_init(my_log_callback, pMyLogUserData));
```


See Also
--------
ma_context_config_init()
ma_context_uninit()
*/
ma_context_init :: (backends: *ma_backend, backendCount: ma_uint32, pConfig: *ma_context_config, pContext: *ma_context) -> ma_result #foreign miniaudio;

/*
Uninitializes a context.


Return Value
------------
MA_SUCCESS if successful; any other error code otherwise.


Thread Safety
-------------
Unsafe. Do not call this function across multiple threads as some backends read and write to global state.


Remarks
-------
Results are undefined if you call this while any device created by this context is still active.


See Also
--------
ma_context_init()
*/
ma_context_uninit :: (pContext: *ma_context) -> ma_result #foreign miniaudio;

/*
Retrieves the size of the ma_context object.

This is mainly for the purpose of bindings to know how much memory to allocate.
*/
ma_context_sizeof :: () -> u64 #foreign miniaudio;

/*
Retrieves a pointer to the log object associated with this context.


Remarks
-------
Pass the returned pointer to `ma_log_post()`, `ma_log_postv()` or `ma_log_postf()` to post a log
message.

You can attach your own logging callback to the log with `ma_log_register_callback()`


Return Value
------------
A pointer to the `ma_log` object that the context uses to post log messages. If some error occurs,
NULL will be returned.
*/
ma_context_get_log :: (pContext: *ma_context) -> *ma_log #foreign miniaudio;

/*
Enumerates over every device (both playback and capture).

This is a lower-level enumeration function to the easier to use `ma_context_get_devices()`. Use `ma_context_enumerate_devices()` if you would rather not incur
an internal heap allocation, or it simply suits your code better.

Note that this only retrieves the ID and name/description of the device. The reason for only retrieving basic information is that it would otherwise require
opening the backend device in order to probe it for more detailed information which can be inefficient. Consider using `ma_context_get_device_info()` for this,
but don't call it from within the enumeration callback.

Returning false from the callback will stop enumeration. Returning true will continue enumeration.


Parameters
----------
pContext (in)
A pointer to the context performing the enumeration.

callback (in)
The callback to fire for each enumerated device.

pUserData (in)
A pointer to application-defined data passed to the callback.


Return Value
------------
MA_SUCCESS if successful; any other error code otherwise.


Thread Safety
-------------
Safe. This is guarded using a simple mutex lock.


Remarks
-------
Do _not_ assume the first enumerated device of a given type is the default device.

Some backends and platforms may only support default playback and capture devices.

In general, you should not do anything complicated from within the callback. In particular, do not try initializing a device from within the callback. Also,
do not try to call `ma_context_get_device_info()` from within the callback.

Consider using `ma_context_get_devices()` for a simpler and safer API, albeit at the expense of an internal heap allocation.


Example 1 - Simple Enumeration
------------------------------
ma_bool32 ma_device_enum_callback(ma_context* pContext, ma_device_type deviceType, const ma_device_info* pInfo, void* pUserData)
{
printf("Device Name: %s\n", pInfo->name);
return MA_TRUE;
}

ma_result result = ma_context_enumerate_devices(&context, my_device_enum_callback, pMyUserData);
if (result != MA_SUCCESS) {
// Error.
}


See Also
--------
ma_context_get_devices()
*/
ma_context_enumerate_devices :: (pContext: *ma_context, callback: ma_enum_devices_callback_proc, pUserData: *void) -> ma_result #foreign miniaudio;

/*
Retrieves basic information about every active playback and/or capture device.

This function will allocate memory internally for the device lists and return a pointer to them through the `ppPlaybackDeviceInfos` and `ppCaptureDeviceInfos`
parameters. If you do not want to incur the overhead of these allocations consider using `ma_context_enumerate_devices()` which will instead use a callback.


Parameters
----------
pContext (in)
A pointer to the context performing the enumeration.

ppPlaybackDeviceInfos (out)
A pointer to a pointer that will receive the address of a buffer containing the list of `ma_device_info` structures for playback devices.

pPlaybackDeviceCount (out)
A pointer to an unsigned integer that will receive the number of playback devices.

ppCaptureDeviceInfos (out)
A pointer to a pointer that will receive the address of a buffer containing the list of `ma_device_info` structures for capture devices.

pCaptureDeviceCount (out)
A pointer to an unsigned integer that will receive the number of capture devices.


Return Value
------------
MA_SUCCESS if successful; any other error code otherwise.


Thread Safety
-------------
Unsafe. Since each call to this function invalidates the pointers from the previous call, you should not be calling this simultaneously across multiple
threads. Instead, you need to make a copy of the returned data with your own higher level synchronization.


Remarks
-------
It is _not_ safe to assume the first device in the list is the default device.

You can pass in NULL for the playback or capture lists in which case they'll be ignored.

The returned pointers will become invalid upon the next call this this function, or when the context is uninitialized. Do not free the returned pointers.


See Also
--------
ma_context_get_devices()
*/
ma_context_get_devices :: (pContext: *ma_context, ppPlaybackDeviceInfos: **ma_device_info, pPlaybackDeviceCount: *ma_uint32, ppCaptureDeviceInfos: **ma_device_info, pCaptureDeviceCount: *ma_uint32) -> ma_result #foreign miniaudio;

/*
Retrieves information about a device of the given type, with the specified ID and share mode.


Parameters
----------
pContext (in)
A pointer to the context performing the query.

deviceType (in)
The type of the device being queried. Must be either `ma_device_type_playback` or `ma_device_type_capture`.

pDeviceID (in)
The ID of the device being queried.

pDeviceInfo (out)
A pointer to the `ma_device_info` structure that will receive the device information.


Return Value
------------
MA_SUCCESS if successful; any other error code otherwise.


Thread Safety
-------------
Safe. This is guarded using a simple mutex lock.


Remarks
-------
Do _not_ call this from within the `ma_context_enumerate_devices()` callback.

It's possible for a device to have different information and capabilities depending on whether or not it's opened in shared or exclusive mode. For example, in
shared mode, WASAPI always uses floating point samples for mixing, but in exclusive mode it can be anything. Therefore, this function allows you to specify
which share mode you want information for. Note that not all backends and devices support shared or exclusive mode, in which case this function will fail if
the requested share mode is unsupported.

This leaves pDeviceInfo unmodified in the result of an error.
*/
ma_context_get_device_info :: (pContext: *ma_context, deviceType: ma_device_type, pDeviceID: *ma_device_id, pDeviceInfo: *ma_device_info) -> ma_result #foreign miniaudio;

/*
Determines if the given context supports loopback mode.


Parameters
----------
pContext (in)
A pointer to the context getting queried.


Return Value
------------
MA_TRUE if the context supports loopback mode; MA_FALSE otherwise.
*/
ma_context_is_loopback_supported :: (pContext: *ma_context) -> ma_bool32 #foreign miniaudio;

/*
Initializes a device config with default settings.


Parameters
----------
deviceType (in)
The type of the device this config is being initialized for. This must set to one of the following:

|-------------------------|
| Device Type             |
|-------------------------|
| ma_device_type_playback |
| ma_device_type_capture  |
| ma_device_type_duplex   |
| ma_device_type_loopback |
|-------------------------|


Return Value
------------
A new device config object with default settings. You will typically want to adjust the config after this function returns. See remarks.


Thread Safety
-------------
Safe.


Callback Safety
---------------
Safe, but don't try initializing a device in a callback.


Remarks
-------
The returned config will be initialized to defaults. You will normally want to customize a few variables before initializing the device. See Example 1 for a
typical configuration which sets the sample format, channel count, sample rate, data callback and user data. These are usually things you will want to change
before initializing the device.

See `ma_device_init()` for details on specific configuration options.


Example 1 - Simple Configuration
--------------------------------
The example below is what a program will typically want to configure for each device at a minimum. Notice how `ma_device_config_init()` is called first, and
then the returned object is modified directly. This is important because it ensures that your program continues to work as new configuration options are added
to the `ma_device_config` structure.

```c
ma_device_config config = ma_device_config_init(ma_device_type_playback);
config.playback.format   = ma_format_f32;
config.playback.channels = 2;
config.sampleRate        = 48000;
config.dataCallback      = ma_data_callback;
config.pUserData         = pMyUserData;
```


See Also
--------
ma_device_init()
ma_device_init_ex()
*/
ma_device_config_init :: (deviceType: ma_device_type) -> ma_device_config #foreign miniaudio;

/*
Initializes a device.

A device represents a physical audio device. The idea is you send or receive audio data from the device to either play it back through a speaker, or capture it
from a microphone. Whether or not you should send or receive data from the device (or both) depends on the type of device you are initializing which can be
playback, capture, full-duplex or loopback. (Note that loopback mode is only supported on select backends.) Sending and receiving audio data to and from the
device is done via a callback which is fired by miniaudio at periodic time intervals.

The frequency at which data is delivered to and from a device depends on the size of it's period. The size of the period can be defined in terms of PCM frames
or milliseconds, whichever is more convenient. Generally speaking, the smaller the period, the lower the latency at the expense of higher CPU usage and
increased risk of glitching due to the more frequent and granular data deliver intervals. The size of a period will depend on your requirements, but
miniaudio's defaults should work fine for most scenarios. If you're building a game you should leave this fairly small, whereas if you're building a simple
media player you can make it larger. Note that the period size you request is actually just a hint - miniaudio will tell the backend what you want, but the
backend is ultimately responsible for what it gives you. You cannot assume you will get exactly what you ask for.

When delivering data to and from a device you need to make sure it's in the correct format which you can set through the device configuration. You just set the
format that you want to use and miniaudio will perform all of the necessary conversion for you internally. When delivering data to and from the callback you
can assume the format is the same as what you requested when you initialized the device. See Remarks for more details on miniaudio's data conversion pipeline.


Parameters
----------
pContext (in, optional)
A pointer to the context that owns the device. This can be null, in which case it creates a default context internally.

pConfig (in)
A pointer to the device configuration. Cannot be null. See remarks for details.

pDevice (out)
A pointer to the device object being initialized.


Return Value
------------
MA_SUCCESS if successful; any other error code otherwise.


Thread Safety
-------------
Unsafe. It is not safe to call this function simultaneously for different devices because some backends depend on and mutate global state. The same applies to
calling this at the same time as `ma_device_uninit()`.


Callback Safety
---------------
Unsafe. It is not safe to call this inside any callback.


Remarks
-------
Setting `pContext` to NULL will result in miniaudio creating a default context internally and is equivalent to passing in a context initialized like so:

```c
ma_context_init(NULL, 0, NULL, &context);
```

Do not set `pContext` to NULL if you are needing to open multiple devices. You can, however, use NULL when initializing the first device, and then use
device.pContext for the initialization of other devices.

The device can be configured via the `pConfig` argument. The config object is initialized with `ma_device_config_init()`. Individual configuration settings can
then be set directly on the structure. Below are the members of the `ma_device_config` object.

deviceType
Must be `ma_device_type_playback`, `ma_device_type_capture`, `ma_device_type_duplex` of `ma_device_type_loopback`.

sampleRate
The sample rate, in hertz. The most common sample rates are 48000 and 44100. Setting this to 0 will use the device's native sample rate.

periodSizeInFrames
The desired size of a period in PCM frames. If this is 0, `periodSizeInMilliseconds` will be used instead. If both are 0 the default buffer size will
be used depending on the selected performance profile. This value affects latency. See below for details.

periodSizeInMilliseconds
The desired size of a period in milliseconds. If this is 0, `periodSizeInFrames` will be used instead. If both are 0 the default buffer size will be
used depending on the selected performance profile. The value affects latency. See below for details.

periods
The number of periods making up the device's entire buffer. The total buffer size is `periodSizeInFrames` or `periodSizeInMilliseconds` multiplied by
this value. This is just a hint as backends will be the ones who ultimately decide how your periods will be configured.

performanceProfile
A hint to miniaudio as to the performance requirements of your program. Can be either `ma_performance_profile_low_latency` (default) or
`ma_performance_profile_conservative`. This mainly affects the size of default buffers and can usually be left at it's default value.

noPreSilencedOutputBuffer
When set to true, the contents of the output buffer passed into the data callback will be left undefined. When set to false (default), the contents of
the output buffer will be cleared the zero. You can use this to avoid the overhead of zeroing out the buffer if you can guarantee that your data
callback will write to every sample in the output buffer, or if you are doing your own clearing.

noClip
When set to true, the contents of the output buffer passed into the data callback will be clipped after returning. When set to false (default), the
contents of the output buffer are left alone after returning and it will be left up to the backend itself to decide whether or not the clip. This only
applies when the playback sample format is f32.

noDisableDenormals
By default, miniaudio will disable denormals when the data callback is called. Setting this to true will prevent the disabling of denormals.

noFixedSizedCallback
Allows miniaudio to fire the data callback with any frame count. When this is set to false (the default), the data callback will be fired with a
consistent frame count as specified by `periodSizeInFrames` or `periodSizeInMilliseconds`. When set to true, miniaudio will fire the callback with
whatever the backend requests, which could be anything.

dataCallback
The callback to fire whenever data is ready to be delivered to or from the device.

notificationCallback
The callback to fire when something has changed with the device, such as whether or not it has been started or stopped.

pUserData
The user data pointer to use with the device. You can access this directly from the device object like `device.pUserData`.

resampling.algorithm
The resampling algorithm to use when miniaudio needs to perform resampling between the rate specified by `sampleRate` and the device's native rate. The
default value is `ma_resample_algorithm_linear`, and the quality can be configured with `resampling.linear.lpfOrder`.

resampling.pBackendVTable
A pointer to an optional vtable that can be used for plugging in a custom resampler.

resampling.pBackendUserData
A pointer that will passed to callbacks in pBackendVTable.

resampling.linear.lpfOrder
The linear resampler applies a low-pass filter as part of it's processing for anti-aliasing. This setting controls the order of the filter. The higher
the value, the better the quality, in general. Setting this to 0 will disable low-pass filtering altogether. The maximum value is
`MA_MAX_FILTER_ORDER`. The default value is `min(4, MA_MAX_FILTER_ORDER)`.

playback.pDeviceID
A pointer to a `ma_device_id` structure containing the ID of the playback device to initialize. Setting this NULL (default) will use the system's
default playback device. Retrieve the device ID from the `ma_device_info` structure, which can be retrieved using device enumeration.

playback.format
The sample format to use for playback. When set to `ma_format_unknown` the device's native format will be used. This can be retrieved after
initialization from the device object directly with `device.playback.format`.

playback.channels
The number of channels to use for playback. When set to 0 the device's native channel count will be used. This can be retrieved after initialization
from the device object directly with `device.playback.channels`.

playback.pChannelMap
The channel map to use for playback. When left empty, the device's native channel map will be used. This can be retrieved after initialization from the
device object direct with `device.playback.pChannelMap`. When set, the buffer should contain `channels` items.

playback.shareMode
The preferred share mode to use for playback. Can be either `ma_share_mode_shared` (default) or `ma_share_mode_exclusive`. Note that if you specify
exclusive mode, but it's not supported by the backend, initialization will fail. You can then fall back to shared mode if desired by changing this to
ma_share_mode_shared and reinitializing.

capture.pDeviceID
A pointer to a `ma_device_id` structure containing the ID of the capture device to initialize. Setting this NULL (default) will use the system's
default capture device. Retrieve the device ID from the `ma_device_info` structure, which can be retrieved using device enumeration.

capture.format
The sample format to use for capture. When set to `ma_format_unknown` the device's native format will be used. This can be retrieved after
initialization from the device object directly with `device.capture.format`.

capture.channels
The number of channels to use for capture. When set to 0 the device's native channel count will be used. This can be retrieved after initialization
from the device object directly with `device.capture.channels`.

capture.pChannelMap
The channel map to use for capture. When left empty, the device's native channel map will be used. This can be retrieved after initialization from the
device object direct with `device.capture.pChannelMap`. When set, the buffer should contain `channels` items.

capture.shareMode
The preferred share mode to use for capture. Can be either `ma_share_mode_shared` (default) or `ma_share_mode_exclusive`. Note that if you specify
exclusive mode, but it's not supported by the backend, initialization will fail. You can then fall back to shared mode if desired by changing this to
ma_share_mode_shared and reinitializing.

wasapi.noAutoConvertSRC
WASAPI only. When set to true, disables WASAPI's automatic resampling and forces the use of miniaudio's resampler. Defaults to false.

wasapi.noDefaultQualitySRC
WASAPI only. Only used when `wasapi.noAutoConvertSRC` is set to false. When set to true, disables the use of `AUDCLNT_STREAMFLAGS_SRC_DEFAULT_QUALITY`.
You should usually leave this set to false, which is the default.

wasapi.noAutoStreamRouting
WASAPI only. When set to true, disables automatic stream routing on the WASAPI backend. Defaults to false.

wasapi.noHardwareOffloading
WASAPI only. When set to true, disables the use of WASAPI's hardware offloading feature. Defaults to false.

alsa.noMMap
ALSA only. When set to true, disables MMap mode. Defaults to false.

alsa.noAutoFormat
ALSA only. When set to true, disables ALSA's automatic format conversion by including the SND_PCM_NO_AUTO_FORMAT flag. Defaults to false.

alsa.noAutoChannels
ALSA only. When set to true, disables ALSA's automatic channel conversion by including the SND_PCM_NO_AUTO_CHANNELS flag. Defaults to false.

alsa.noAutoResample
ALSA only. When set to true, disables ALSA's automatic resampling by including the SND_PCM_NO_AUTO_RESAMPLE flag. Defaults to false.

pulse.pStreamNamePlayback
PulseAudio only. Sets the stream name for playback.

pulse.pStreamNameCapture
PulseAudio only. Sets the stream name for capture.

coreaudio.allowNominalSampleRateChange
Core Audio only. Desktop only. When enabled, allows the sample rate of the device to be changed at the operating system level. This
is disabled by default in order to prevent intrusive changes to the user's system. This is useful if you want to use a sample rate
that is known to be natively supported by the hardware thereby avoiding the cost of resampling. When set to true, miniaudio will
find the closest match between the sample rate requested in the device config and the sample rates natively supported by the
hardware. When set to false, the sample rate currently set by the operating system will always be used.

opensl.streamType
OpenSL only. Explicitly sets the stream type. If left unset (`ma_opensl_stream_type_default`), the
stream type will be left unset. Think of this as the type of audio you're playing.

opensl.recordingPreset
OpenSL only. Explicitly sets the type of recording your program will be doing. When left
unset, the recording preset will be left unchanged.

aaudio.usage
AAudio only. Explicitly sets the nature of the audio the program will be consuming. When
left unset, the usage will be left unchanged.

aaudio.contentType
AAudio only. Sets the content type. When left unset, the content type will be left unchanged.

aaudio.inputPreset
AAudio only. Explicitly sets the type of recording your program will be doing. When left
unset, the input preset will be left unchanged.

aaudio.noAutoStartAfterReroute
AAudio only. Controls whether or not the device should be automatically restarted after a
stream reroute. When set to false (default) the device will be restarted automatically;
otherwise the device will be stopped.


Once initialized, the device's config is immutable. If you need to change the config you will need to initialize a new device.

After initializing the device it will be in a stopped state. To start it, use `ma_device_start()`.

If both `periodSizeInFrames` and `periodSizeInMilliseconds` are set to zero, it will default to `MA_DEFAULT_PERIOD_SIZE_IN_MILLISECONDS_LOW_LATENCY` or
`MA_DEFAULT_PERIOD_SIZE_IN_MILLISECONDS_CONSERVATIVE`, depending on whether or not `performanceProfile` is set to `ma_performance_profile_low_latency` or
`ma_performance_profile_conservative`.

If you request exclusive mode and the backend does not support it an error will be returned. For robustness, you may want to first try initializing the device
in exclusive mode, and then fall back to shared mode if required. Alternatively you can just request shared mode (the default if you leave it unset in the
config) which is the most reliable option. Some backends do not have a practical way of choosing whether or not the device should be exclusive or not (ALSA,
for example) in which case it just acts as a hint. Unless you have special requirements you should try avoiding exclusive mode as it's intrusive to the user.
Starting with Windows 10, miniaudio will use low-latency shared mode where possible which may make exclusive mode unnecessary.

When sending or receiving data to/from a device, miniaudio will internally perform a format conversion to convert between the format specified by the config
and the format used internally by the backend. If you pass in 0 for the sample format, channel count, sample rate _and_ channel map, data transmission will run
on an optimized pass-through fast path. You can retrieve the format, channel count and sample rate by inspecting the `playback/capture.format`,
`playback/capture.channels` and `sampleRate` members of the device object.

When compiling for UWP you must ensure you call this function on the main UI thread because the operating system may need to present the user with a message
asking for permissions. Please refer to the official documentation for ActivateAudioInterfaceAsync() for more information.

ALSA Specific: When initializing the default device, requesting shared mode will try using the "dmix" device for playback and the "dsnoop" device for capture.
If these fail it will try falling back to the "hw" device.


Example 1 - Simple Initialization
---------------------------------
This example shows how to initialize a simple playback device using a standard configuration. If you are just needing to do simple playback from the default
playback device this is usually all you need.

```c
ma_device_config config = ma_device_config_init(ma_device_type_playback);
config.playback.format   = ma_format_f32;
config.playback.channels = 2;
config.sampleRate        = 48000;
config.dataCallback      = ma_data_callback;
config.pMyUserData       = pMyUserData;

ma_device device;
ma_result result = ma_device_init(NULL, &config, &device);
if (result != MA_SUCCESS) {
// Error
}
```


Example 2 - Advanced Initialization
-----------------------------------
This example shows how you might do some more advanced initialization. In this hypothetical example we want to control the latency by setting the buffer size
and period count. We also want to allow the user to be able to choose which device to output from which means we need a context so we can perform device
enumeration.

```c
ma_context context;
ma_result result = ma_context_init(NULL, 0, NULL, &context);
if (result != MA_SUCCESS) {
// Error
}

ma_device_info* pPlaybackDeviceInfos;
ma_uint32 playbackDeviceCount;
result = ma_context_get_devices(&context, &pPlaybackDeviceInfos, &playbackDeviceCount, NULL, NULL);
if (result != MA_SUCCESS) {
// Error
}

// ... choose a device from pPlaybackDeviceInfos ...

ma_device_config config = ma_device_config_init(ma_device_type_playback);
config.playback.pDeviceID       = pMyChosenDeviceID;    // <-- Get this from the `id` member of one of the `ma_device_info` objects returned by ma_context_get_devices().
config.playback.format          = ma_format_f32;
config.playback.channels        = 2;
config.sampleRate               = 48000;
config.dataCallback             = ma_data_callback;
config.pUserData                = pMyUserData;
config.periodSizeInMilliseconds = 10;
config.periods                  = 3;

ma_device device;
result = ma_device_init(&context, &config, &device);
if (result != MA_SUCCESS) {
// Error
}
```


See Also
--------
ma_device_config_init()
ma_device_uninit()
ma_device_start()
ma_context_init()
ma_context_get_devices()
ma_context_enumerate_devices()
*/
ma_device_init :: (pContext: *ma_context, pConfig: *ma_device_config, pDevice: *ma_device) -> ma_result #foreign miniaudio;

/*
Initializes a device without a context, with extra parameters for controlling the configuration of the internal self-managed context.

This is the same as `ma_device_init()`, only instead of a context being passed in, the parameters from `ma_context_init()` are passed in instead. This function
allows you to configure the internally created context.


Parameters
----------
backends (in, optional)
A list of backends to try initializing, in priority order. Can be NULL, in which case it uses default priority order.

backendCount (in, optional)
The number of items in `backend`. Ignored if `backend` is NULL.

pContextConfig (in, optional)
The context configuration.

pConfig (in)
A pointer to the device configuration. Cannot be null. See remarks for details.

pDevice (out)
A pointer to the device object being initialized.


Return Value
------------
MA_SUCCESS if successful; any other error code otherwise.


Thread Safety
-------------
Unsafe. It is not safe to call this function simultaneously for different devices because some backends depend on and mutate global state. The same applies to
calling this at the same time as `ma_device_uninit()`.


Callback Safety
---------------
Unsafe. It is not safe to call this inside any callback.


Remarks
-------
You only need to use this function if you want to configure the context differently to it's defaults. You should never use this function if you want to manage
your own context.

See the documentation for `ma_context_init()` for information on the different context configuration options.


See Also
--------
ma_device_init()
ma_device_uninit()
ma_device_config_init()
ma_context_init()
*/
ma_device_init_ex :: (backends: *ma_backend, backendCount: ma_uint32, pContextConfig: *ma_context_config, pConfig: *ma_device_config, pDevice: *ma_device) -> ma_result #foreign miniaudio;

/*
Uninitializes a device.

This will explicitly stop the device. You do not need to call `ma_device_stop()` beforehand, but it's harmless if you do.


Parameters
----------
pDevice (in)
A pointer to the device to stop.


Return Value
------------
Nothing


Thread Safety
-------------
Unsafe. As soon as this API is called the device should be considered undefined.


Callback Safety
---------------
Unsafe. It is not safe to call this inside any callback. Doing this will result in a deadlock.


See Also
--------
ma_device_init()
ma_device_stop()
*/
ma_device_uninit :: (pDevice: *ma_device) -> void #foreign miniaudio;

/*
Retrieves a pointer to the context that owns the given device.
*/
ma_device_get_context :: (pDevice: *ma_device) -> *ma_context #foreign miniaudio;

/*
Helper function for retrieving the log object associated with the context that owns this device.
*/
ma_device_get_log :: (pDevice: *ma_device) -> *ma_log #foreign miniaudio;

/*
Retrieves information about the device.


Parameters
----------
pDevice (in)
A pointer to the device whose information is being retrieved.

type (in)
The device type. This parameter is required for duplex devices. When retrieving device
information, you are doing so for an individual playback or capture device.

pDeviceInfo (out)
A pointer to the `ma_device_info` that will receive the device information.


Return Value
------------
MA_SUCCESS if successful; any other error code otherwise.


Thread Safety
-------------
Unsafe. This should be considered unsafe because it may be calling into the backend which may or
may not be safe.


Callback Safety
---------------
Unsafe. You should avoid calling this in the data callback because it may call into the backend
which may or may not be safe.
*/
ma_device_get_info :: (pDevice: *ma_device, type: ma_device_type, pDeviceInfo: *ma_device_info) -> ma_result #foreign miniaudio;

/*
Retrieves the name of the device.


Parameters
----------
pDevice (in)
A pointer to the device whose information is being retrieved.

type (in)
The device type. This parameter is required for duplex devices. When retrieving device
information, you are doing so for an individual playback or capture device.

pName (out)
A pointer to the buffer that will receive the name.

nameCap (in)
The capacity of the output buffer, including space for the null terminator.

pLengthNotIncludingNullTerminator (out, optional)
A pointer to the variable that will receive the length of the name, not including the null
terminator.


Return Value
------------
MA_SUCCESS if successful; any other error code otherwise.


Thread Safety
-------------
Unsafe. This should be considered unsafe because it may be calling into the backend which may or
may not be safe.


Callback Safety
---------------
Unsafe. You should avoid calling this in the data callback because it may call into the backend
which may or may not be safe.


Remarks
-------
If the name does not fully fit into the output buffer, it'll be truncated. You can pass in NULL to
`pName` if you want to first get the length of the name for the purpose of memory allocation of the
output buffer. Allocating a buffer of size `MA_MAX_DEVICE_NAME_LENGTH + 1` should be enough for
most cases and will avoid the need for the inefficiency of calling this function twice.

This is implemented in terms of `ma_device_get_info()`.
*/
ma_device_get_name :: (pDevice: *ma_device, type: ma_device_type, pName: *u8, nameCap: u64, pLengthNotIncludingNullTerminator: *u64) -> ma_result #foreign miniaudio;

/*
Starts the device. For playback devices this begins playback. For capture devices it begins recording.

Use `ma_device_stop()` to stop the device.


Parameters
----------
pDevice (in)
A pointer to the device to start.


Return Value
------------
MA_SUCCESS if successful; any other error code otherwise.


Thread Safety
-------------
Safe. It's safe to call this from any thread with the exception of the callback thread.


Callback Safety
---------------
Unsafe. It is not safe to call this inside any callback.


Remarks
-------
For a playback device, this will retrieve an initial chunk of audio data from the client before returning. The reason for this is to ensure there is valid
audio data in the buffer, which needs to be done before the device begins playback.

This API waits until the backend device has been started for real by the worker thread. It also waits on a mutex for thread-safety.

Do not call this in any callback.


See Also
--------
ma_device_stop()
*/
ma_device_start :: (pDevice: *ma_device) -> ma_result #foreign miniaudio;

/*
Stops the device. For playback devices this stops playback. For capture devices it stops recording.

Use `ma_device_start()` to start the device again.


Parameters
----------
pDevice (in)
A pointer to the device to stop.


Return Value
------------
MA_SUCCESS if successful; any other error code otherwise.


Thread Safety
-------------
Safe. It's safe to call this from any thread with the exception of the callback thread.


Callback Safety
---------------
Unsafe. It is not safe to call this inside any callback. Doing this will result in a deadlock.


Remarks
-------
This API needs to wait on the worker thread to stop the backend device properly before returning. It also waits on a mutex for thread-safety. In addition, some
backends need to wait for the device to finish playback/recording of the current fragment which can take some time (usually proportionate to the buffer size
that was specified at initialization time).

Backends are required to either pause the stream in-place or drain the buffer if pausing is not possible. The reason for this is that stopping the device and
the resuming it with ma_device_start() (which you might do when your program loses focus) may result in a situation where those samples are never output to the
speakers or received from the microphone which can in turn result in de-syncs.

Do not call this in any callback.

This will be called implicitly by `ma_device_uninit()`.


See Also
--------
ma_device_start()
*/
ma_device_stop :: (pDevice: *ma_device) -> ma_result #foreign miniaudio;

/*
Determines whether or not the device is started.


Parameters
----------
pDevice (in)
A pointer to the device whose start state is being retrieved.


Return Value
------------
True if the device is started, false otherwise.


Thread Safety
-------------
Safe. If another thread calls `ma_device_start()` or `ma_device_stop()` at this same time as this function is called, there's a very small chance the return
value will be out of sync.


Callback Safety
---------------
Safe. This is implemented as a simple accessor.


See Also
--------
ma_device_start()
ma_device_stop()
*/
ma_device_is_started :: (pDevice: *ma_device) -> ma_bool32 #foreign miniaudio;

/*
Retrieves the state of the device.


Parameters
----------
pDevice (in)
A pointer to the device whose state is being retrieved.


Return Value
------------
The current state of the device. The return value will be one of the following:

+-------------------------------+------------------------------------------------------------------------------+
| ma_device_state_uninitialized | Will only be returned if the device is in the middle of initialization.      |
+-------------------------------+------------------------------------------------------------------------------+
| ma_device_state_stopped       | The device is stopped. The initial state of the device after initialization. |
+-------------------------------+------------------------------------------------------------------------------+
| ma_device_state_started       | The device started and requesting and/or delivering audio data.              |
+-------------------------------+------------------------------------------------------------------------------+
| ma_device_state_starting      | The device is in the process of starting.                                    |
+-------------------------------+------------------------------------------------------------------------------+
| ma_device_state_stopping      | The device is in the process of stopping.                                    |
+-------------------------------+------------------------------------------------------------------------------+


Thread Safety
-------------
Safe. This is implemented as a simple accessor. Note that if the device is started or stopped at the same time as this function is called,
there's a possibility the return value could be out of sync. See remarks.


Callback Safety
---------------
Safe. This is implemented as a simple accessor.


Remarks
-------
The general flow of a devices state goes like this:

```
ma_device_init()  -> ma_device_state_uninitialized -> ma_device_state_stopped
ma_device_start() -> ma_device_state_starting      -> ma_device_state_started
ma_device_stop()  -> ma_device_state_stopping      -> ma_device_state_stopped
```

When the state of the device is changed with `ma_device_start()` or `ma_device_stop()` at this same time as this function is called, the
value returned by this function could potentially be out of sync. If this is significant to your program you need to implement your own
synchronization.
*/
ma_device_get_state :: (pDevice: *ma_device) -> ma_device_state #foreign miniaudio;

/*
Performs post backend initialization routines for setting up internal data conversion.

This should be called whenever the backend is initialized. The only time this should be called from
outside of miniaudio is if you're implementing a custom backend, and you would only do it if you
are reinitializing the backend due to rerouting or reinitializing for some reason.


Parameters
----------
pDevice [in]
A pointer to the device.

deviceType [in]
The type of the device that was just reinitialized.

pPlaybackDescriptor [in]
The descriptor of the playback device containing the internal data format and buffer sizes.

pPlaybackDescriptor [in]
The descriptor of the capture device containing the internal data format and buffer sizes.


Return Value
------------
MA_SUCCESS if successful; any other error otherwise.


Thread Safety
-------------
Unsafe. This will be reinitializing internal data converters which may be in use by another thread.


Callback Safety
---------------
Unsafe. This will be reinitializing internal data converters which may be in use by the callback.


Remarks
-------
For a duplex device, you can call this for only one side of the system. This is why the deviceType
is specified as a parameter rather than deriving it from the device.

You do not need to call this manually unless you are doing a custom backend, in which case you need
only do it if you're manually performing rerouting or reinitialization.
*/
ma_device_post_init :: (pDevice: *ma_device, deviceType: ma_device_type, pPlaybackDescriptor: *ma_device_descriptor, pCaptureDescriptor: *ma_device_descriptor) -> ma_result #foreign miniaudio;

/*
Sets the master volume factor for the device.

The volume factor must be between 0 (silence) and 1 (full volume). Use `ma_device_set_master_volume_db()` to use decibel notation, where 0 is full volume and
values less than 0 decreases the volume.


Parameters
----------
pDevice (in)
A pointer to the device whose volume is being set.

volume (in)
The new volume factor. Must be >= 0.


Return Value
------------
MA_SUCCESS if the volume was set successfully.
MA_INVALID_ARGS if pDevice is NULL.
MA_INVALID_ARGS if volume is negative.


Thread Safety
-------------
Safe. This just sets a local member of the device object.


Callback Safety
---------------
Safe. If you set the volume in the data callback, that data written to the output buffer will have the new volume applied.


Remarks
-------
This applies the volume factor across all channels.

This does not change the operating system's volume. It only affects the volume for the given `ma_device` object's audio stream.


See Also
--------
ma_device_get_master_volume()
ma_device_set_master_volume_db()
ma_device_get_master_volume_db()
*/
ma_device_set_master_volume :: (pDevice: *ma_device, volume: float) -> ma_result #foreign miniaudio;

/*
Retrieves the master volume factor for the device.


Parameters
----------
pDevice (in)
A pointer to the device whose volume factor is being retrieved.

pVolume (in)
A pointer to the variable that will receive the volume factor. The returned value will be in the range of [0, 1].


Return Value
------------
MA_SUCCESS if successful.
MA_INVALID_ARGS if pDevice is NULL.
MA_INVALID_ARGS if pVolume is NULL.


Thread Safety
-------------
Safe. This just a simple member retrieval.


Callback Safety
---------------
Safe.


Remarks
-------
If an error occurs, `*pVolume` will be set to 0.


See Also
--------
ma_device_set_master_volume()
ma_device_set_master_volume_gain_db()
ma_device_get_master_volume_gain_db()
*/
ma_device_get_master_volume :: (pDevice: *ma_device, pVolume: *float) -> ma_result #foreign miniaudio;

/*
Sets the master volume for the device as gain in decibels.

A gain of 0 is full volume, whereas a gain of < 0 will decrease the volume.


Parameters
----------
pDevice (in)
A pointer to the device whose gain is being set.

gainDB (in)
The new volume as gain in decibels. Must be less than or equal to 0, where 0 is full volume and anything less than 0 decreases the volume.


Return Value
------------
MA_SUCCESS if the volume was set successfully.
MA_INVALID_ARGS if pDevice is NULL.
MA_INVALID_ARGS if the gain is > 0.


Thread Safety
-------------
Safe. This just sets a local member of the device object.


Callback Safety
---------------
Safe. If you set the volume in the data callback, that data written to the output buffer will have the new volume applied.


Remarks
-------
This applies the gain across all channels.

This does not change the operating system's volume. It only affects the volume for the given `ma_device` object's audio stream.


See Also
--------
ma_device_get_master_volume_gain_db()
ma_device_set_master_volume()
ma_device_get_master_volume()
*/
ma_device_set_master_volume_db :: (pDevice: *ma_device, gainDB: float) -> ma_result #foreign miniaudio;

/*
Retrieves the master gain in decibels.


Parameters
----------
pDevice (in)
A pointer to the device whose gain is being retrieved.

pGainDB (in)
A pointer to the variable that will receive the gain in decibels. The returned value will be <= 0.


Return Value
------------
MA_SUCCESS if successful.
MA_INVALID_ARGS if pDevice is NULL.
MA_INVALID_ARGS if pGainDB is NULL.


Thread Safety
-------------
Safe. This just a simple member retrieval.


Callback Safety
---------------
Safe.


Remarks
-------
If an error occurs, `*pGainDB` will be set to 0.


See Also
--------
ma_device_set_master_volume_db()
ma_device_set_master_volume()
ma_device_get_master_volume()
*/
ma_device_get_master_volume_db :: (pDevice: *ma_device, pGainDB: *float) -> ma_result #foreign miniaudio;

/*
Called from the data callback of asynchronous backends to allow miniaudio to process the data and fire the miniaudio data callback.


Parameters
----------
pDevice (in)
A pointer to device whose processing the data callback.

pOutput (out)
A pointer to the buffer that will receive the output PCM frame data. On a playback device this must not be NULL. On a duplex device
this can be NULL, in which case pInput must not be NULL.

pInput (in)
A pointer to the buffer containing input PCM frame data. On a capture device this must not be NULL. On a duplex device this can be
NULL, in which case `pOutput` must not be NULL.

frameCount (in)
The number of frames being processed.


Return Value
------------
MA_SUCCESS if successful; any other result code otherwise.


Thread Safety
-------------
This function should only ever be called from the internal data callback of the backend. It is safe to call this simultaneously between a
playback and capture device in duplex setups.


Callback Safety
---------------
Do not call this from the miniaudio data callback. It should only ever be called from the internal data callback of the backend.


Remarks
-------
If both `pOutput` and `pInput` are NULL, and error will be returned. In duplex scenarios, both `pOutput` and `pInput` can be non-NULL, in
which case `pInput` will be processed first, followed by `pOutput`.

If you are implementing a custom backend, and that backend uses a callback for data delivery, you'll need to call this from inside that
callback.
*/
ma_device_handle_backend_data_callback :: (pDevice: *ma_device, pOutput: *void, pInput: *void, frameCount: ma_uint32) -> ma_result #foreign miniaudio;

/*
Calculates an appropriate buffer size from a descriptor, native sample rate and performance profile.

This function is used by backends for helping determine an appropriately sized buffer to use with
the device depending on the values of `periodSizeInFrames` and `periodSizeInMilliseconds` in the
`pDescriptor` object. Since buffer size calculations based on time depends on the sample rate, a
best guess at the device's native sample rate is also required which is where `nativeSampleRate`
comes in. In addition, the performance profile is also needed for cases where both the period size
in frames and milliseconds are both zero.


Parameters
----------
pDescriptor (in)
A pointer to device descriptor whose `periodSizeInFrames` and `periodSizeInMilliseconds` members
will be used for the calculation of the buffer size.

nativeSampleRate (in)
The device's native sample rate. This is only ever used when the `periodSizeInFrames` member of
`pDescriptor` is zero. In this case, `periodSizeInMilliseconds` will be used instead, in which
case a sample rate is required to convert to a size in frames.

performanceProfile (in)
When both the `periodSizeInFrames` and `periodSizeInMilliseconds` members of `pDescriptor` are
zero, miniaudio will fall back to a buffer size based on the performance profile. The profile
to use for this calculation is determine by this parameter.


Return Value
------------
The calculated buffer size in frames.


Thread Safety
-------------
This is safe so long as nothing modifies `pDescriptor` at the same time. However, this function
should only ever be called from within the backend's device initialization routine and therefore
shouldn't have any multithreading concerns.


Callback Safety
---------------
This is safe to call within the data callback, but there is no reason to ever do this.


Remarks
-------
If `nativeSampleRate` is zero, this function will fall back to `pDescriptor->sampleRate`. If that
is also zero, `MA_DEFAULT_SAMPLE_RATE` will be used instead.
*/
ma_calculate_buffer_size_in_frames_from_descriptor :: (pDescriptor: *ma_device_descriptor, nativeSampleRate: ma_uint32, performanceProfile: ma_performance_profile) -> ma_uint32 #foreign miniaudio;

/*
Retrieves a friendly name for a backend.
*/
ma_get_backend_name :: (backend: ma_backend) -> *u8 #foreign miniaudio;

/*
Retrieves the backend enum from the given name.
*/
ma_get_backend_from_name :: (pBackendName: *u8, pBackend: *ma_backend) -> ma_result #foreign miniaudio;

/*
Determines whether or not the given backend is available by the compilation environment.
*/
ma_is_backend_enabled :: (backend: ma_backend) -> ma_bool32 #foreign miniaudio;

/*
Retrieves compile-time enabled backends.


Parameters
----------
pBackends (out, optional)
A pointer to the buffer that will receive the enabled backends. Set to NULL to retrieve the backend count. Setting
the capacity of the buffer to `MA_BUFFER_COUNT` will guarantee it's large enough for all backends.

backendCap (in)
The capacity of the `pBackends` buffer.

pBackendCount (out)
A pointer to the variable that will receive the enabled backend count.


Return Value
------------
MA_SUCCESS if successful.
MA_INVALID_ARGS if `pBackendCount` is NULL.
MA_NO_SPACE if the capacity of `pBackends` is not large enough.

If `MA_NO_SPACE` is returned, the `pBackends` buffer will be filled with `*pBackendCount` values.


Thread Safety
-------------
Safe.


Callback Safety
---------------
Safe.


Remarks
-------
If you want to retrieve the number of backends so you can determine the capacity of `pBackends` buffer, you can call
this function with `pBackends` set to NULL.

This will also enumerate the null backend. If you don't want to include this you need to check for `ma_backend_null`
when you enumerate over the returned backends and handle it appropriately. Alternatively, you can disable it at
compile time with `MA_NO_NULL`.

The returned backends are determined based on compile time settings, not the platform it's currently running on. For
example, PulseAudio will be returned if it was enabled at compile time, even when the user doesn't actually have
PulseAudio installed.


Example 1
---------
The example below retrieves the enabled backend count using a fixed sized buffer allocated on the stack. The buffer is
given a capacity of `MA_BACKEND_COUNT` which will guarantee it'll be large enough to store all available backends.
Since `MA_BACKEND_COUNT` is always a relatively small value, this should be suitable for most scenarios.

```
ma_backend enabledBackends[MA_BACKEND_COUNT];
size_t enabledBackendCount;

result = ma_get_enabled_backends(enabledBackends, MA_BACKEND_COUNT, &enabledBackendCount);
if (result != MA_SUCCESS) {
// Failed to retrieve enabled backends. Should never happen in this example since all inputs are valid.
}
```


See Also
--------
ma_is_backend_enabled()
*/
ma_get_enabled_backends :: (pBackends: *ma_backend, backendCap: u64, pBackendCount: *u64) -> ma_result #foreign miniaudio;

/*
Determines whether or not loopback mode is support by a backend.
*/
ma_is_loopback_supported :: (backend: ma_backend) -> ma_bool32 #foreign miniaudio;

/*
Calculates a buffer size in milliseconds from the specified number of frames and sample rate.
*/
ma_calculate_buffer_size_in_milliseconds_from_frames :: (bufferSizeInFrames: ma_uint32, sampleRate: ma_uint32) -> ma_uint32 #foreign miniaudio;

/*
Calculates a buffer size in frames from the specified number of milliseconds and sample rate.
*/
ma_calculate_buffer_size_in_frames_from_milliseconds :: (bufferSizeInMilliseconds: ma_uint32, sampleRate: ma_uint32) -> ma_uint32 #foreign miniaudio;

/*
Copies PCM frames from one buffer to another.
*/
ma_copy_pcm_frames :: (dst: *void, src: *void, frameCount: ma_uint64, format: ma_format, channels: ma_uint32) -> void #foreign miniaudio;

/*
Copies silent frames into the given buffer.

Remarks
-------
For all formats except `ma_format_u8`, the output buffer will be filled with 0. For `ma_format_u8` it will be filled with 128. The reason for this is that it
makes more sense for the purpose of mixing to initialize it to the center point.
*/
ma_silence_pcm_frames :: (p: *void, frameCount: ma_uint64, format: ma_format, channels: ma_uint32) -> void #foreign miniaudio;

/*
Offsets a pointer by the specified number of PCM frames.
*/
ma_offset_pcm_frames_ptr :: (p: *void, offsetInFrames: ma_uint64, format: ma_format, channels: ma_uint32) -> *void #foreign miniaudio;

ma_offset_pcm_frames_const_ptr :: (p: *void, offsetInFrames: ma_uint64, format: ma_format, channels: ma_uint32) -> *void #foreign miniaudio;

/*
Clips samples.
*/
ma_clip_samples_u8 :: (pDst: *ma_uint8, pSrc: *ma_int16, count: ma_uint64) -> void #foreign miniaudio;

ma_clip_samples_s16 :: (pDst: *ma_int16, pSrc: *ma_int32, count: ma_uint64) -> void #foreign miniaudio;

ma_clip_samples_s24 :: (pDst: *ma_uint8, pSrc: *ma_int64, count: ma_uint64) -> void #foreign miniaudio;

ma_clip_samples_s32 :: (pDst: *ma_int32, pSrc: *ma_int64, count: ma_uint64) -> void #foreign miniaudio;

ma_clip_samples_f32 :: (pDst: *float, pSrc: *float, count: ma_uint64) -> void #foreign miniaudio;

ma_clip_pcm_frames :: (pDst: *void, pSrc: *void, frameCount: ma_uint64, format: ma_format, channels: ma_uint32) -> void #foreign miniaudio;

/*
Helper for applying a volume factor to samples.

Note that the source and destination buffers can be the same, in which case it'll perform the operation in-place.
*/
ma_copy_and_apply_volume_factor_u8 :: (pSamplesOut: *ma_uint8, pSamplesIn: *ma_uint8, sampleCount: ma_uint64, factor: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_factor_s16 :: (pSamplesOut: *ma_int16, pSamplesIn: *ma_int16, sampleCount: ma_uint64, factor: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_factor_s24 :: (pSamplesOut: *void, pSamplesIn: *void, sampleCount: ma_uint64, factor: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_factor_s32 :: (pSamplesOut: *ma_int32, pSamplesIn: *ma_int32, sampleCount: ma_uint64, factor: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_factor_f32 :: (pSamplesOut: *float, pSamplesIn: *float, sampleCount: ma_uint64, factor: float) -> void #foreign miniaudio;

ma_apply_volume_factor_u8 :: (pSamples: *ma_uint8, sampleCount: ma_uint64, factor: float) -> void #foreign miniaudio;

ma_apply_volume_factor_s16 :: (pSamples: *ma_int16, sampleCount: ma_uint64, factor: float) -> void #foreign miniaudio;

ma_apply_volume_factor_s24 :: (pSamples: *void, sampleCount: ma_uint64, factor: float) -> void #foreign miniaudio;

ma_apply_volume_factor_s32 :: (pSamples: *ma_int32, sampleCount: ma_uint64, factor: float) -> void #foreign miniaudio;

ma_apply_volume_factor_f32 :: (pSamples: *float, sampleCount: ma_uint64, factor: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_factor_pcm_frames_u8 :: (pFramesOut: *ma_uint8, pFramesIn: *ma_uint8, frameCount: ma_uint64, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_factor_pcm_frames_s16 :: (pFramesOut: *ma_int16, pFramesIn: *ma_int16, frameCount: ma_uint64, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_factor_pcm_frames_s24 :: (pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_factor_pcm_frames_s32 :: (pFramesOut: *ma_int32, pFramesIn: *ma_int32, frameCount: ma_uint64, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_factor_pcm_frames_f32 :: (pFramesOut: *float, pFramesIn: *float, frameCount: ma_uint64, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_factor_pcm_frames :: (pFramesOut: *void, pFramesIn: *void, frameCount: ma_uint64, format: ma_format, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_apply_volume_factor_pcm_frames_u8 :: (pFrames: *ma_uint8, frameCount: ma_uint64, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_apply_volume_factor_pcm_frames_s16 :: (pFrames: *ma_int16, frameCount: ma_uint64, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_apply_volume_factor_pcm_frames_s24 :: (pFrames: *void, frameCount: ma_uint64, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_apply_volume_factor_pcm_frames_s32 :: (pFrames: *ma_int32, frameCount: ma_uint64, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_apply_volume_factor_pcm_frames_f32 :: (pFrames: *float, frameCount: ma_uint64, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_apply_volume_factor_pcm_frames :: (pFrames: *void, frameCount: ma_uint64, format: ma_format, channels: ma_uint32, factor: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_factor_per_channel_f32 :: (pFramesOut: *float, pFramesIn: *float, frameCount: ma_uint64, channels: ma_uint32, pChannelGains: *float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_and_clip_samples_u8 :: (pDst: *ma_uint8, pSrc: *ma_int16, count: ma_uint64, volume: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_and_clip_samples_s16 :: (pDst: *ma_int16, pSrc: *ma_int32, count: ma_uint64, volume: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_and_clip_samples_s24 :: (pDst: *ma_uint8, pSrc: *ma_int64, count: ma_uint64, volume: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_and_clip_samples_s32 :: (pDst: *ma_int32, pSrc: *ma_int64, count: ma_uint64, volume: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_and_clip_samples_f32 :: (pDst: *float, pSrc: *float, count: ma_uint64, volume: float) -> void #foreign miniaudio;

ma_copy_and_apply_volume_and_clip_pcm_frames :: (pDst: *void, pSrc: *void, frameCount: ma_uint64, format: ma_format, channels: ma_uint32, volume: float) -> void #foreign miniaudio;

/*
Helper for converting a linear factor to gain in decibels.
*/
ma_volume_linear_to_db :: (factor: float) -> float #foreign miniaudio;

/*
Helper for converting gain in decibels to a linear factor.
*/
ma_volume_db_to_linear :: (gain: float) -> float #foreign miniaudio;

/*
Mixes the specified number of frames in floating point format with a volume factor.

This will run on an optimized path when the volume is equal to 1.
*/
ma_mix_pcm_frames_f32 :: (pDst: *float, pSrc: *float, frameCount: ma_uint64, channels: ma_uint32, volume: float) -> ma_result #foreign miniaudio;

/************************************************************************************************************************************************************

VFS
===

The VFS object (virtual file system) is what's used to customize file access. This is useful in cases where stdio FILE* based APIs may not be entirely
appropriate for a given situation.

************************************************************************************************************************************************************/
ma_vfs :: void;
ma_vfs_file :: ma_handle;

ma_open_mode_flags :: enum u32 {
    READ  :: 1;
    WRITE :: 2;
}

ma_seek_origin :: enum u32 {
    start   :: 0;
    current :: 1;
    end     :: 2;
}

ma_file_info :: struct {
    sizeInBytes: ma_uint64;
}

ma_vfs_callbacks :: struct {
    onOpen:  #type (pVFS: *ma_vfs, pFilePath: *u8, openMode: ma_uint32, pFile: *ma_vfs_file) -> ma_result #c_call;
    onOpenW: #type (pVFS: *ma_vfs, pFilePath: *s32, openMode: ma_uint32, pFile: *ma_vfs_file) -> ma_result #c_call;
    onClose: #type (pVFS: *ma_vfs, file: ma_vfs_file) -> ma_result #c_call;
    onRead:  #type (pVFS: *ma_vfs, file: ma_vfs_file, pDst: *void, sizeInBytes: u64, pBytesRead: *u64) -> ma_result #c_call;
    onWrite: #type (pVFS: *ma_vfs, file: ma_vfs_file, pSrc: *void, sizeInBytes: u64, pBytesWritten: *u64) -> ma_result #c_call;
    onSeek:  #type (pVFS: *ma_vfs, file: ma_vfs_file, offset: ma_int64, origin: ma_seek_origin) -> ma_result #c_call;
    onTell:  #type (pVFS: *ma_vfs, file: ma_vfs_file, pCursor: *ma_int64) -> ma_result #c_call;
    onInfo:  #type (pVFS: *ma_vfs, file: ma_vfs_file, pInfo: *ma_file_info) -> ma_result #c_call;
}

/**************************************************************************************************************************************************************

VFS

**************************************************************************************************************************************************************/
ma_vfs_open :: (pVFS: *ma_vfs, pFilePath: *u8, openMode: ma_uint32, pFile: *ma_vfs_file) -> ma_result #foreign miniaudio;

ma_vfs_open_w :: (pVFS: *ma_vfs, pFilePath: *s32, openMode: ma_uint32, pFile: *ma_vfs_file) -> ma_result #foreign miniaudio;

ma_vfs_close :: (pVFS: *ma_vfs, file: ma_vfs_file) -> ma_result #foreign miniaudio;

ma_vfs_read :: (pVFS: *ma_vfs, file: ma_vfs_file, pDst: *void, sizeInBytes: u64, pBytesRead: *u64) -> ma_result #foreign miniaudio;

ma_vfs_write :: (pVFS: *ma_vfs, file: ma_vfs_file, pSrc: *void, sizeInBytes: u64, pBytesWritten: *u64) -> ma_result #foreign miniaudio;

ma_vfs_seek :: (pVFS: *ma_vfs, file: ma_vfs_file, offset: ma_int64, origin: ma_seek_origin) -> ma_result #foreign miniaudio;

ma_vfs_tell :: (pVFS: *ma_vfs, file: ma_vfs_file, pCursor: *ma_int64) -> ma_result #foreign miniaudio;

ma_vfs_info :: (pVFS: *ma_vfs, file: ma_vfs_file, pInfo: *ma_file_info) -> ma_result #foreign miniaudio;

ma_vfs_open_and_read_file :: (pVFS: *ma_vfs, pFilePath: *u8, ppData: **void, pSize: *u64, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_result #foreign miniaudio;

ma_default_vfs :: struct {
    cb:                  ma_vfs_callbacks;
    allocationCallbacks: ma_allocation_callbacks; /* Only used for the wchar_t version of open() on non-Windows platforms. */
}

ma_default_vfs_init :: (pVFS: *ma_default_vfs, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_result #foreign miniaudio;

ma_read_proc :: #type (pUserData: *void, pBufferOut: *void, bytesToRead: u64, pBytesRead: *u64) -> ma_result #c_call;
ma_seek_proc :: #type (pUserData: *void, offset: ma_int64, origin: ma_seek_origin) -> ma_result #c_call;
ma_tell_proc :: #type (pUserData: *void, pCursor: *ma_int64) -> ma_result #c_call;

ma_encoding_format :: enum u32 {
    unknown :: 0;
    wav     :: 1;
    flac    :: 2;
    mp3     :: 3;
    vorbis  :: 4;
}

ma_decoding_backend_config :: struct {
    preferredFormat: ma_format;
    seekPointCount:  ma_uint32; /* Set to > 0 to generate a seektable if the decoding backend supports it. */
}

ma_decoding_backend_config_init :: (preferredFormat: ma_format, seekPointCount: ma_uint32) -> ma_decoding_backend_config #foreign miniaudio;

ma_decoding_backend_vtable :: struct {
    onInit:       #type (pUserData: *void, onRead: ma_read_proc, onSeek: ma_seek_proc, onTell: ma_tell_proc, pReadSeekTellUserData: *void, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, ppBackend: **ma_data_source) -> ma_result #c_call;
    onInitFile:   #type (pUserData: *void, pFilePath: *u8, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, ppBackend: **ma_data_source) -> ma_result #c_call; /* Optional. */
    onInitFileW:  #type (pUserData: *void, pFilePath: *s32, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, ppBackend: **ma_data_source) -> ma_result #c_call; /* Optional. */
    onInitMemory: #type (pUserData: *void, pData: *void, dataSize: u64, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, ppBackend: **ma_data_source) -> ma_result #c_call; /* Optional. */
    onUninit:     #type (pUserData: *void, pBackend: *ma_data_source, pAllocationCallbacks: *ma_allocation_callbacks) -> void #c_call;
}

ma_decoder_read_proc :: #type (pDecoder: *ma_decoder, pBufferOut: *void, bytesToRead: u64, pBytesRead: *u64) -> ma_result #c_call;
ma_decoder_seek_proc :: #type (pDecoder: *ma_decoder, byteOffset: ma_int64, origin: ma_seek_origin) -> ma_result #c_call;
ma_decoder_tell_proc :: #type (pDecoder: *ma_decoder, pCursor: *ma_int64) -> ma_result #c_call;

ma_decoder_config :: struct {
    format:                 ma_format; /* Set to 0 or ma_format_unknown to use the stream's internal format. */
    channels:               ma_uint32; /* Set to 0 to use the stream's internal channels. */
    sampleRate:             ma_uint32; /* Set to 0 to use the stream's internal sample rate. */
    pChannelMap:            *ma_channel;
    channelMixMode:         ma_channel_mix_mode;
    ditherMode:             ma_dither_mode;
    resampling:             ma_resampler_config;
    allocationCallbacks:    ma_allocation_callbacks;
    encodingFormat:         ma_encoding_format;
    seekPointCount:         ma_uint32; /* When set to > 0, specifies the number of seek points to use for the generation of a seek table. Not all decoding backends support this. */
    ppCustomBackendVTables: **ma_decoding_backend_vtable;
    customBackendCount:     ma_uint32;
    pCustomBackendUserData: *void;
}

ma_decoder :: struct {
    ds:                     ma_data_source_base;
    pBackend:               *ma_data_source; /* The decoding backend we'll be pulling data from. */
    pBackendVTable:         *ma_decoding_backend_vtable; /* The vtable for the decoding backend. This needs to be stored so we can access the onUninit() callback. */
    pBackendUserData:       *void;
    onRead:                 ma_decoder_read_proc;
    onSeek:                 ma_decoder_seek_proc;
    onTell:                 ma_decoder_tell_proc;
    pUserData:              *void;
    readPointerInPCMFrames: ma_uint64; /* In output sample rate. Used for keeping track of how many frames are available for decoding. */
    outputFormat:           ma_format;
    outputChannels:         ma_uint32;
    outputSampleRate:       ma_uint32;
    converter:              ma_data_converter; /* Data conversion is achieved by running frames through this. */
    pInputCache:            *void; /* In input format. Can be null if it's not needed. */
    inputCacheCap:          ma_uint64; /* The capacity of the input cache. */
    inputCacheConsumed:     ma_uint64; /* The number of frames that have been consumed in the cache. Used for determining the next valid frame. */
    inputCacheRemaining:    ma_uint64; /* The number of valid frames remaining in the cahce. */
    allocationCallbacks:    ma_allocation_callbacks;
    data:                   union {
        vfs:    struct {
            pVFS: *ma_vfs;
            file: ma_vfs_file;
        };

        memory: struct {
            pData:          *ma_uint8;
            dataSize:       u64;
            currentReadPos: u64;
        }; /* Only used for decoders that were opened against a block of memory. */
    };
}

ma_decoder_config_init :: (outputFormat: ma_format, outputChannels: ma_uint32, outputSampleRate: ma_uint32) -> ma_decoder_config #foreign miniaudio;

ma_decoder_config_init_default :: () -> ma_decoder_config #foreign miniaudio;

ma_decoder_init :: (onRead: ma_decoder_read_proc, onSeek: ma_decoder_seek_proc, pUserData: *void, pConfig: *ma_decoder_config, pDecoder: *ma_decoder) -> ma_result #foreign miniaudio;

ma_decoder_init_memory :: (pData: *void, dataSize: u64, pConfig: *ma_decoder_config, pDecoder: *ma_decoder) -> ma_result #foreign miniaudio;

ma_decoder_init_vfs :: (pVFS: *ma_vfs, pFilePath: *u8, pConfig: *ma_decoder_config, pDecoder: *ma_decoder) -> ma_result #foreign miniaudio;

ma_decoder_init_vfs_w :: (pVFS: *ma_vfs, pFilePath: *s32, pConfig: *ma_decoder_config, pDecoder: *ma_decoder) -> ma_result #foreign miniaudio;

ma_decoder_init_file :: (pFilePath: *u8, pConfig: *ma_decoder_config, pDecoder: *ma_decoder) -> ma_result #foreign miniaudio;

ma_decoder_init_file_w :: (pFilePath: *s32, pConfig: *ma_decoder_config, pDecoder: *ma_decoder) -> ma_result #foreign miniaudio;

/*
Uninitializes a decoder.
*/
ma_decoder_uninit :: (pDecoder: *ma_decoder) -> ma_result #foreign miniaudio;

/*
Reads PCM frames from the given decoder.

This is not thread safe without your own synchronization.
*/
ma_decoder_read_pcm_frames :: (pDecoder: *ma_decoder, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

/*
Seeks to a PCM frame based on it's absolute index.

This is not thread safe without your own synchronization.
*/
ma_decoder_seek_to_pcm_frame :: (pDecoder: *ma_decoder, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

/*
Retrieves the decoder's output data format.
*/
ma_decoder_get_data_format :: (pDecoder: *ma_decoder, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

/*
Retrieves the current position of the read cursor in PCM frames.
*/
ma_decoder_get_cursor_in_pcm_frames :: (pDecoder: *ma_decoder, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

/*
Retrieves the length of the decoder in PCM frames.

Do not call this on streams of an undefined length, such as internet radio.

If the length is unknown or an error occurs, 0 will be returned.

This will always return 0 for Vorbis decoders. This is due to a limitation with stb_vorbis in push mode which is what miniaudio
uses internally.

For MP3's, this will decode the entire file. Do not call this in time critical scenarios.

This function is not thread safe without your own synchronization.
*/
ma_decoder_get_length_in_pcm_frames :: (pDecoder: *ma_decoder, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

/*
Retrieves the number of frames that can be read before reaching the end.

This calls `ma_decoder_get_length_in_pcm_frames()` so you need to be aware of the rules for that function, in
particular ensuring you do not call it on streams of an undefined length, such as internet radio.

If the total length of the decoder cannot be retrieved, such as with Vorbis decoders, `MA_NOT_IMPLEMENTED` will be
returned.
*/
ma_decoder_get_available_frames :: (pDecoder: *ma_decoder, pAvailableFrames: *ma_uint64) -> ma_result #foreign miniaudio;

/*
Helper for opening and decoding a file into a heap allocated block of memory. Free the returned pointer with ma_free(). On input,
pConfig should be set to what you want. On output it will be set to what you got.
*/
ma_decode_from_vfs :: (pVFS: *ma_vfs, pFilePath: *u8, pConfig: *ma_decoder_config, pFrameCountOut: *ma_uint64, ppPCMFramesOut: **void) -> ma_result #foreign miniaudio;

ma_decode_file :: (pFilePath: *u8, pConfig: *ma_decoder_config, pFrameCountOut: *ma_uint64, ppPCMFramesOut: **void) -> ma_result #foreign miniaudio;

ma_decode_memory :: (pData: *void, dataSize: u64, pConfig: *ma_decoder_config, pFrameCountOut: *ma_uint64, ppPCMFramesOut: **void) -> ma_result #foreign miniaudio;

ma_encoder_write_proc :: #type (pEncoder: *ma_encoder, pBufferIn: *void, bytesToWrite: u64, pBytesWritten: *u64) -> ma_result #c_call;
ma_encoder_seek_proc :: #type (pEncoder: *ma_encoder, offset: ma_int64, origin: ma_seek_origin) -> ma_result #c_call;
ma_encoder_init_proc :: #type (pEncoder: *ma_encoder) -> ma_result #c_call;
ma_encoder_uninit_proc :: #type (pEncoder: *ma_encoder) -> void #c_call;
ma_encoder_write_pcm_frames_proc :: #type (pEncoder: *ma_encoder, pFramesIn: *void, frameCount: ma_uint64, pFramesWritten: *ma_uint64) -> ma_result #c_call;

ma_encoder_config :: struct {
    encodingFormat:      ma_encoding_format;
    format:              ma_format;
    channels:            ma_uint32;
    sampleRate:          ma_uint32;
    allocationCallbacks: ma_allocation_callbacks;
}

ma_encoder_config_init :: (encodingFormat: ma_encoding_format, format: ma_format, channels: ma_uint32, sampleRate: ma_uint32) -> ma_encoder_config #foreign miniaudio;

ma_encoder :: struct {
    config:           ma_encoder_config;
    onWrite:          ma_encoder_write_proc;
    onSeek:           ma_encoder_seek_proc;
    onInit:           ma_encoder_init_proc;
    onUninit:         ma_encoder_uninit_proc;
    onWritePCMFrames: ma_encoder_write_pcm_frames_proc;
    pUserData:        *void;
    pInternalEncoder: *void;
    data:             union {
        vfs: struct {
            pVFS: *ma_vfs;
            file: ma_vfs_file;
        };
    };
}

ma_encoder_init :: (onWrite: ma_encoder_write_proc, onSeek: ma_encoder_seek_proc, pUserData: *void, pConfig: *ma_encoder_config, pEncoder: *ma_encoder) -> ma_result #foreign miniaudio;

ma_encoder_init_vfs :: (pVFS: *ma_vfs, pFilePath: *u8, pConfig: *ma_encoder_config, pEncoder: *ma_encoder) -> ma_result #foreign miniaudio;

ma_encoder_init_vfs_w :: (pVFS: *ma_vfs, pFilePath: *s32, pConfig: *ma_encoder_config, pEncoder: *ma_encoder) -> ma_result #foreign miniaudio;

ma_encoder_init_file :: (pFilePath: *u8, pConfig: *ma_encoder_config, pEncoder: *ma_encoder) -> ma_result #foreign miniaudio;

ma_encoder_init_file_w :: (pFilePath: *s32, pConfig: *ma_encoder_config, pEncoder: *ma_encoder) -> ma_result #foreign miniaudio;

ma_encoder_uninit :: (pEncoder: *ma_encoder) -> void #foreign miniaudio;

ma_encoder_write_pcm_frames :: (pEncoder: *ma_encoder, pFramesIn: *void, frameCount: ma_uint64, pFramesWritten: *ma_uint64) -> ma_result #foreign miniaudio;

ma_waveform_type :: enum u32 {
    sine     :: 0;
    square   :: 1;
    triangle :: 2;
    sawtooth :: 3;
}

ma_waveform_config :: struct {
    format:     ma_format;
    channels:   ma_uint32;
    sampleRate: ma_uint32;
    type:       ma_waveform_type;
    amplitude:  float64;
    frequency:  float64;
}

ma_waveform_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, type: ma_waveform_type, amplitude: float64, frequency: float64) -> ma_waveform_config #foreign miniaudio;

ma_waveform :: struct {
    ds:      ma_data_source_base;
    config:  ma_waveform_config;
    advance: float64;
    time:    float64;
}

ma_waveform_init :: (pConfig: *ma_waveform_config, pWaveform: *ma_waveform) -> ma_result #foreign miniaudio;

ma_waveform_uninit :: (pWaveform: *ma_waveform) -> void #foreign miniaudio;

ma_waveform_read_pcm_frames :: (pWaveform: *ma_waveform, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_waveform_seek_to_pcm_frame :: (pWaveform: *ma_waveform, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_waveform_set_amplitude :: (pWaveform: *ma_waveform, amplitude: float64) -> ma_result #foreign miniaudio;

ma_waveform_set_frequency :: (pWaveform: *ma_waveform, frequency: float64) -> ma_result #foreign miniaudio;

ma_waveform_set_type :: (pWaveform: *ma_waveform, type: ma_waveform_type) -> ma_result #foreign miniaudio;

ma_waveform_set_sample_rate :: (pWaveform: *ma_waveform, sampleRate: ma_uint32) -> ma_result #foreign miniaudio;

ma_pulsewave_config :: struct {
    format:     ma_format;
    channels:   ma_uint32;
    sampleRate: ma_uint32;
    dutyCycle:  float64;
    amplitude:  float64;
    frequency:  float64;
}

ma_pulsewave_config_init :: (format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, dutyCycle: float64, amplitude: float64, frequency: float64) -> ma_pulsewave_config #foreign miniaudio;

ma_pulsewave :: struct {
    waveform: ma_waveform;
    config:   ma_pulsewave_config;
}

ma_pulsewave_init :: (pConfig: *ma_pulsewave_config, pWaveform: *ma_pulsewave) -> ma_result #foreign miniaudio;

ma_pulsewave_uninit :: (pWaveform: *ma_pulsewave) -> void #foreign miniaudio;

ma_pulsewave_read_pcm_frames :: (pWaveform: *ma_pulsewave, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_pulsewave_seek_to_pcm_frame :: (pWaveform: *ma_pulsewave, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_pulsewave_set_amplitude :: (pWaveform: *ma_pulsewave, amplitude: float64) -> ma_result #foreign miniaudio;

ma_pulsewave_set_frequency :: (pWaveform: *ma_pulsewave, frequency: float64) -> ma_result #foreign miniaudio;

ma_pulsewave_set_sample_rate :: (pWaveform: *ma_pulsewave, sampleRate: ma_uint32) -> ma_result #foreign miniaudio;

ma_pulsewave_set_duty_cycle :: (pWaveform: *ma_pulsewave, dutyCycle: float64) -> ma_result #foreign miniaudio;

ma_noise_type :: enum u32 {
    white    :: 0;
    pink     :: 1;
    brownian :: 2;
}

ma_noise_config :: struct {
    format:            ma_format;
    channels:          ma_uint32;
    type:              ma_noise_type;
    seed:              ma_int32;
    amplitude:         float64;
    duplicateChannels: ma_bool32;
}

ma_noise_config_init :: (format: ma_format, channels: ma_uint32, type: ma_noise_type, seed: ma_int32, amplitude: float64) -> ma_noise_config #foreign miniaudio;

ma_noise :: struct {
    ds:        ma_data_source_vtable;
    config:    ma_noise_config;
    lcg:       ma_lcg;
    state:     union {
        pink:     struct {
            bin:          **float64;
            accumulation: *float64;
            counter:      *ma_uint32;
        };

        brownian: struct {
            accumulation: *float64;
        };
    };

    /* Memory management. */
    _pHeap:    *void;
    _ownsHeap: ma_bool32;
}

ma_noise_get_heap_size :: (pConfig: *ma_noise_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_noise_init_preallocated :: (pConfig: *ma_noise_config, pHeap: *void, pNoise: *ma_noise) -> ma_result #foreign miniaudio;

ma_noise_init :: (pConfig: *ma_noise_config, pAllocationCallbacks: *ma_allocation_callbacks, pNoise: *ma_noise) -> ma_result #foreign miniaudio;

ma_noise_uninit :: (pNoise: *ma_noise, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_noise_read_pcm_frames :: (pNoise: *ma_noise, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_noise_set_amplitude :: (pNoise: *ma_noise, amplitude: float64) -> ma_result #foreign miniaudio;

ma_noise_set_seed :: (pNoise: *ma_noise, seed: ma_int32) -> ma_result #foreign miniaudio;

ma_noise_set_type :: (pNoise: *ma_noise, type: ma_noise_type) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_flags :: enum u32 {
    STREAM         :: 1;
    DECODE         :: 2;
    ASYNC          :: 4;
    WAIT_INIT      :: 8;
    UNKNOWN_LENGTH :: 16;
}

/*
Pipeline notifications used by the resource manager. Made up of both an async notification and a fence, both of which are optional.
*/
ma_resource_manager_pipeline_stage_notification :: struct {
    pNotification: *ma_async_notification;
    pFence:        *ma_fence;
}

ma_resource_manager_pipeline_notifications :: struct {
    init: ma_resource_manager_pipeline_stage_notification; /* Initialization of the decoder. */
    done: ma_resource_manager_pipeline_stage_notification; /* Decoding fully completed. */
}

ma_resource_manager_pipeline_notifications_init :: () -> ma_resource_manager_pipeline_notifications #foreign miniaudio;

ma_resource_manager_flags :: enum u32 {
    NON_BLOCKING :: 1;

    NO_THREADING :: 2;
}

ma_resource_manager_data_source_config :: struct {
    pFilePath:                   *u8;
    pFilePathW:                  *s32;
    pNotifications:              *ma_resource_manager_pipeline_notifications;
    initialSeekPointInPCMFrames: ma_uint64;
    rangeBegInPCMFrames:         ma_uint64;
    rangeEndInPCMFrames:         ma_uint64;
    loopPointBegInPCMFrames:     ma_uint64;
    loopPointEndInPCMFrames:     ma_uint64;
    isLooping:                   ma_bool32;
    flags:                       ma_uint32;
}

ma_resource_manager_data_source_config_init :: () -> ma_resource_manager_data_source_config #foreign miniaudio;

ma_resource_manager_data_supply_type :: enum u32 {
    unknown       :: 0;
    encoded       :: 1;
    decoded       :: 2;
    decoded_paged :: 3;
}

ma_resource_manager_data_supply :: struct {
    type:    ma_resource_manager_data_supply_type; /* Read and written from different threads so needs to be accessed atomically. */
    backend: union {
        encoded:      struct {
            pData:       *void;
            sizeInBytes: u64;
        };

        decoded:      struct {
            pData:             *void;
            totalFrameCount:   ma_uint64;
            decodedFrameCount: ma_uint64;
            format:            ma_format;
            channels:          ma_uint32;
            sampleRate:        ma_uint32;
        };

        decodedPaged: struct {
            data:              ma_paged_audio_buffer_data;
            decodedFrameCount: ma_uint64;
            sampleRate:        ma_uint32;
        };
    };
}

ma_resource_manager_data_buffer_node :: struct {
    hashedName32:                 ma_uint32; /* The hashed name. This is the key. */
    refCount:                     ma_uint32;
    result:                       ma_result; /* Result from asynchronous loading. When loading set to MA_BUSY. When fully loaded set to MA_SUCCESS. When deleting set to MA_UNAVAILABLE. */
    executionCounter:             ma_uint32; /* For allocating execution orders for jobs. */
    executionPointer:             ma_uint32; /* For managing the order of execution for asynchronous jobs relating to this object. Incremented as jobs complete processing. */
    isDataOwnedByResourceManager: ma_bool32; /* Set to true when the underlying data buffer was allocated the resource manager. Set to false if it is owned by the application (via ma_resource_manager_register_*()). */
    data:                         ma_resource_manager_data_supply;
    pParent:                      *ma_resource_manager_data_buffer_node;
    pChildLo:                     *ma_resource_manager_data_buffer_node;
    pChildHi:                     *ma_resource_manager_data_buffer_node;
}

ma_resource_manager_data_buffer :: struct {
    ds:                     ma_data_source_base; /* Base data source. A data buffer is a data source. */
    pResourceManager:       *ma_resource_manager; /* A pointer to the resource manager that owns this buffer. */
    pNode:                  *ma_resource_manager_data_buffer_node; /* The data node. This is reference counted and is what supplies the data. */
    flags:                  ma_uint32; /* The flags that were passed used to initialize the buffer. */
    executionCounter:       ma_uint32; /* For allocating execution orders for jobs. */
    executionPointer:       ma_uint32; /* For managing the order of execution for asynchronous jobs relating to this object. Incremented as jobs complete processing. */
    seekTargetInPCMFrames:  ma_uint64; /* Only updated by the public API. Never written nor read from the job thread. */
    seekToCursorOnNextRead: ma_bool32; /* On the next read we need to seek to the frame cursor. */
    result:                 ma_result; /* Keeps track of a result of decoding. Set to MA_BUSY while the buffer is still loading. Set to MA_SUCCESS when loading is finished successfully. Otherwise set to some other code. */
    isLooping:              ma_bool32; /* Can be read and written by different threads at the same time. Must be used atomically. */
    isConnectorInitialized: ma_atomic_bool32; /* Used for asynchronous loading to ensure we don't try to initialize the connector multiple times while waiting for the node to fully load. */
    connector:              union {
        decoder:     ma_decoder; /* Supply type is ma_resource_manager_data_supply_type_encoded */
        buffer:      ma_audio_buffer; /* Supply type is ma_resource_manager_data_supply_type_decoded */
        pagedBuffer: ma_paged_audio_buffer; /* Supply type is ma_resource_manager_data_supply_type_decoded_paged */
    }; /* Connects this object to the node's data supply. */
}

ma_resource_manager_data_stream :: struct {
    ds:                     ma_data_source_base; /* Base data source. A data stream is a data source. */
    pResourceManager:       *ma_resource_manager; /* A pointer to the resource manager that owns this data stream. */
    flags:                  ma_uint32; /* The flags that were passed used to initialize the stream. */
    decoder:                ma_decoder; /* Used for filling pages with data. This is only ever accessed by the job thread. The public API should never touch this. */
    isDecoderInitialized:   ma_bool32; /* Required for determining whether or not the decoder should be uninitialized in MA_JOB_TYPE_RESOURCE_MANAGER_FREE_DATA_STREAM. */
    totalLengthInPCMFrames: ma_uint64; /* This is calculated when first loaded by the MA_JOB_TYPE_RESOURCE_MANAGER_LOAD_DATA_STREAM. */
    relativeCursor:         ma_uint32; /* The playback cursor, relative to the current page. Only ever accessed by the public API. Never accessed by the job thread. */
    absoluteCursor:         ma_uint64; /* The playback cursor, in absolute position starting from the start of the file. */
    currentPageIndex:       ma_uint32; /* Toggles between 0 and 1. Index 0 is the first half of pPageData. Index 1 is the second half. Only ever accessed by the public API. Never accessed by the job thread. */
    executionCounter:       ma_uint32; /* For allocating execution orders for jobs. */
    executionPointer:       ma_uint32; /* For managing the order of execution for asynchronous jobs relating to this object. Incremented as jobs complete processing. */

    isLooping:              ma_bool32; /* Whether or not the stream is looping. It's important to set the looping flag at the data stream level for smooth loop transitions. */

    pPageData:              *void; /* Buffer containing the decoded data of each page. Allocated once at initialization time. */
    pageFrameCount:         [2] ma_uint32; /* The number of valid PCM frames in each page. Used to determine the last valid frame. */

    result:                 ma_result; /* Result from asynchronous loading. When loading set to MA_BUSY. When initialized set to MA_SUCCESS. When deleting set to MA_UNAVAILABLE. If an error occurs when loading, set to an error code. */
    isDecoderAtEnd:         ma_bool32; /* Whether or not the decoder has reached the end. */
    isPageValid:            [2] ma_bool32; /* Booleans to indicate whether or not a page is valid. Set to false by the public API, set to true by the job thread. Set to false as the pages are consumed, true when they are filled. */
    seekCounter:            ma_bool32; /* When 0, no seeking is being performed. When > 0, a seek is being performed and reading should be delayed with MA_BUSY. */
}

ma_resource_manager_data_source :: struct {
    backend:          union {
        buffer: ma_resource_manager_data_buffer;
        stream: ma_resource_manager_data_stream;
    }; /* Must be the first item because we need the first item to be the data source callbacks for the buffer or stream. */

    flags:            ma_uint32; /* The flags that were passed in to ma_resource_manager_data_source_init(). */
    executionCounter: ma_uint32; /* For allocating execution orders for jobs. */
    executionPointer: ma_uint32; /* For managing the order of execution for asynchronous jobs relating to this object. Incremented as jobs complete processing. */
}

ma_resource_manager_config :: struct {
    allocationCallbacks:            ma_allocation_callbacks;
    pLog:                           *ma_log;
    decodedFormat:                  ma_format; /* The decoded format to use. Set to ma_format_unknown (default) to use the file's native format. */
    decodedChannels:                ma_uint32; /* The decoded channel count to use. Set to 0 (default) to use the file's native channel count. */
    decodedSampleRate:              ma_uint32; /* the decoded sample rate to use. Set to 0 (default) to use the file's native sample rate. */
    jobThreadCount:                 ma_uint32; /* Set to 0 if you want to self-manage your job threads. Defaults to 1. */
    jobThreadStackSize:             u64;
    jobQueueCapacity:               ma_uint32; /* The maximum number of jobs that can fit in the queue at a time. Defaults to MA_JOB_TYPE_RESOURCE_MANAGER_QUEUE_CAPACITY. Cannot be zero. */
    flags:                          ma_uint32;
    pVFS:                           *ma_vfs; /* Can be NULL in which case defaults will be used. */
    ppCustomDecodingBackendVTables: **ma_decoding_backend_vtable;
    customDecodingBackendCount:     ma_uint32;
    pCustomDecodingBackendUserData: *void;
}

ma_resource_manager_config_init :: () -> ma_resource_manager_config #foreign miniaudio;

ma_resource_manager :: struct {
    config:              ma_resource_manager_config;
    pRootDataBufferNode: *ma_resource_manager_data_buffer_node; /* The root buffer in the binary tree. */

    dataBufferBSTLock:   ma_mutex; /* For synchronizing access to the data buffer binary tree. */
    jobThreads:          [64] ma_thread; /* The threads for executing jobs. */

    jobQueue:            ma_job_queue; /* Multi-consumer, multi-producer job queue for managing jobs for asynchronous decoding and streaming. */
    defaultVFS:          ma_default_vfs; /* Only used if a custom VFS is not specified. */
    log:                 ma_log; /* Only used if no log was specified in the config. */
}

/* Init. */
ma_resource_manager_init :: (pConfig: *ma_resource_manager_config, pResourceManager: *ma_resource_manager) -> ma_result #foreign miniaudio;

ma_resource_manager_uninit :: (pResourceManager: *ma_resource_manager) -> void #foreign miniaudio;

ma_resource_manager_get_log :: (pResourceManager: *ma_resource_manager) -> *ma_log #foreign miniaudio;

/* Registration. */
ma_resource_manager_register_file :: (pResourceManager: *ma_resource_manager, pFilePath: *u8, flags: ma_uint32) -> ma_result #foreign miniaudio;

ma_resource_manager_register_file_w :: (pResourceManager: *ma_resource_manager, pFilePath: *s32, flags: ma_uint32) -> ma_result #foreign miniaudio;

ma_resource_manager_register_decoded_data :: (pResourceManager: *ma_resource_manager, pName: *u8, pData: *void, frameCount: ma_uint64, format: ma_format, channels: ma_uint32, sampleRate: ma_uint32) -> ma_result #foreign miniaudio;

ma_resource_manager_register_decoded_data_w :: (pResourceManager: *ma_resource_manager, pName: *s32, pData: *void, frameCount: ma_uint64, format: ma_format, channels: ma_uint32, sampleRate: ma_uint32) -> ma_result #foreign miniaudio;

ma_resource_manager_register_encoded_data :: (pResourceManager: *ma_resource_manager, pName: *u8, pData: *void, sizeInBytes: u64) -> ma_result #foreign miniaudio;

ma_resource_manager_register_encoded_data_w :: (pResourceManager: *ma_resource_manager, pName: *s32, pData: *void, sizeInBytes: u64) -> ma_result #foreign miniaudio;

ma_resource_manager_unregister_file :: (pResourceManager: *ma_resource_manager, pFilePath: *u8) -> ma_result #foreign miniaudio;

ma_resource_manager_unregister_file_w :: (pResourceManager: *ma_resource_manager, pFilePath: *s32) -> ma_result #foreign miniaudio;

ma_resource_manager_unregister_data :: (pResourceManager: *ma_resource_manager, pName: *u8) -> ma_result #foreign miniaudio;

ma_resource_manager_unregister_data_w :: (pResourceManager: *ma_resource_manager, pName: *s32) -> ma_result #foreign miniaudio;

/* Data Buffers. */
ma_resource_manager_data_buffer_init_ex :: (pResourceManager: *ma_resource_manager, pConfig: *ma_resource_manager_data_source_config, pDataBuffer: *ma_resource_manager_data_buffer) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_init :: (pResourceManager: *ma_resource_manager, pFilePath: *u8, flags: ma_uint32, pNotifications: *ma_resource_manager_pipeline_notifications, pDataBuffer: *ma_resource_manager_data_buffer) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_init_w :: (pResourceManager: *ma_resource_manager, pFilePath: *s32, flags: ma_uint32, pNotifications: *ma_resource_manager_pipeline_notifications, pDataBuffer: *ma_resource_manager_data_buffer) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_init_copy :: (pResourceManager: *ma_resource_manager, pExistingDataBuffer: *ma_resource_manager_data_buffer, pDataBuffer: *ma_resource_manager_data_buffer) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_uninit :: (pDataBuffer: *ma_resource_manager_data_buffer) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_read_pcm_frames :: (pDataBuffer: *ma_resource_manager_data_buffer, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_seek_to_pcm_frame :: (pDataBuffer: *ma_resource_manager_data_buffer, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_get_data_format :: (pDataBuffer: *ma_resource_manager_data_buffer, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_get_cursor_in_pcm_frames :: (pDataBuffer: *ma_resource_manager_data_buffer, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_get_length_in_pcm_frames :: (pDataBuffer: *ma_resource_manager_data_buffer, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_result :: (pDataBuffer: *ma_resource_manager_data_buffer) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_set_looping :: (pDataBuffer: *ma_resource_manager_data_buffer, isLooping: ma_bool32) -> ma_result #foreign miniaudio;

ma_resource_manager_data_buffer_is_looping :: (pDataBuffer: *ma_resource_manager_data_buffer) -> ma_bool32 #foreign miniaudio;

ma_resource_manager_data_buffer_get_available_frames :: (pDataBuffer: *ma_resource_manager_data_buffer, pAvailableFrames: *ma_uint64) -> ma_result #foreign miniaudio;

/* Data Streams. */
ma_resource_manager_data_stream_init_ex :: (pResourceManager: *ma_resource_manager, pConfig: *ma_resource_manager_data_source_config, pDataStream: *ma_resource_manager_data_stream) -> ma_result #foreign miniaudio;

ma_resource_manager_data_stream_init :: (pResourceManager: *ma_resource_manager, pFilePath: *u8, flags: ma_uint32, pNotifications: *ma_resource_manager_pipeline_notifications, pDataStream: *ma_resource_manager_data_stream) -> ma_result #foreign miniaudio;

ma_resource_manager_data_stream_init_w :: (pResourceManager: *ma_resource_manager, pFilePath: *s32, flags: ma_uint32, pNotifications: *ma_resource_manager_pipeline_notifications, pDataStream: *ma_resource_manager_data_stream) -> ma_result #foreign miniaudio;

ma_resource_manager_data_stream_uninit :: (pDataStream: *ma_resource_manager_data_stream) -> ma_result #foreign miniaudio;

ma_resource_manager_data_stream_read_pcm_frames :: (pDataStream: *ma_resource_manager_data_stream, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_stream_seek_to_pcm_frame :: (pDataStream: *ma_resource_manager_data_stream, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_stream_get_data_format :: (pDataStream: *ma_resource_manager_data_stream, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_stream_get_cursor_in_pcm_frames :: (pDataStream: *ma_resource_manager_data_stream, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_stream_get_length_in_pcm_frames :: (pDataStream: *ma_resource_manager_data_stream, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_stream_result :: (pDataStream: *ma_resource_manager_data_stream) -> ma_result #foreign miniaudio;

ma_resource_manager_data_stream_set_looping :: (pDataStream: *ma_resource_manager_data_stream, isLooping: ma_bool32) -> ma_result #foreign miniaudio;

ma_resource_manager_data_stream_is_looping :: (pDataStream: *ma_resource_manager_data_stream) -> ma_bool32 #foreign miniaudio;

ma_resource_manager_data_stream_get_available_frames :: (pDataStream: *ma_resource_manager_data_stream, pAvailableFrames: *ma_uint64) -> ma_result #foreign miniaudio;

/* Data Sources. */
ma_resource_manager_data_source_init_ex :: (pResourceManager: *ma_resource_manager, pConfig: *ma_resource_manager_data_source_config, pDataSource: *ma_resource_manager_data_source) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_init :: (pResourceManager: *ma_resource_manager, pName: *u8, flags: ma_uint32, pNotifications: *ma_resource_manager_pipeline_notifications, pDataSource: *ma_resource_manager_data_source) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_init_w :: (pResourceManager: *ma_resource_manager, pName: *s32, flags: ma_uint32, pNotifications: *ma_resource_manager_pipeline_notifications, pDataSource: *ma_resource_manager_data_source) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_init_copy :: (pResourceManager: *ma_resource_manager, pExistingDataSource: *ma_resource_manager_data_source, pDataSource: *ma_resource_manager_data_source) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_uninit :: (pDataSource: *ma_resource_manager_data_source) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_read_pcm_frames :: (pDataSource: *ma_resource_manager_data_source, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_seek_to_pcm_frame :: (pDataSource: *ma_resource_manager_data_source, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_get_data_format :: (pDataSource: *ma_resource_manager_data_source, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_get_cursor_in_pcm_frames :: (pDataSource: *ma_resource_manager_data_source, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_get_length_in_pcm_frames :: (pDataSource: *ma_resource_manager_data_source, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_result :: (pDataSource: *ma_resource_manager_data_source) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_set_looping :: (pDataSource: *ma_resource_manager_data_source, isLooping: ma_bool32) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_is_looping :: (pDataSource: *ma_resource_manager_data_source) -> ma_bool32 #foreign miniaudio;

ma_resource_manager_data_source_get_available_frames :: (pDataSource: *ma_resource_manager_data_source, pAvailableFrames: *ma_uint64) -> ma_result #foreign miniaudio;

/* Job management. */
ma_resource_manager_post_job :: (pResourceManager: *ma_resource_manager, pJob: *ma_job) -> ma_result #foreign miniaudio;

ma_resource_manager_post_job_quit :: (pResourceManager: *ma_resource_manager) -> ma_result #foreign miniaudio;

ma_resource_manager_next_job :: (pResourceManager: *ma_resource_manager, pJob: *ma_job) -> ma_result #foreign miniaudio;

ma_resource_manager_process_job :: (pResourceManager: *ma_resource_manager, pJob: *ma_job) -> ma_result #foreign miniaudio;

ma_resource_manager_process_next_job :: (pResourceManager: *ma_resource_manager) -> ma_result #foreign miniaudio;

ma_node :: void;

/* Node flags. */
ma_node_flags :: enum u32 {
    PASSTHROUGH                :: 1;
    CONTINUOUS_PROCESSING      :: 2;
    ALLOW_NULL_INPUT           :: 4;
    DIFFERENT_PROCESSING_RATES :: 8;
    SILENT_OUTPUT              :: 16;
}

/* The playback state of a node. Either started or stopped. */
ma_node_state :: enum u32 {
    started :: 0;
    stopped :: 1;
}

ma_node_vtable :: struct {
    /*
    Extended processing callback. This callback is used for effects that process input and output
    at different rates (i.e. they perform resampling). This is similar to the simple version, only
    they take two seperate frame counts: one for input, and one for output.
    
    On input, `pFrameCountOut` is equal to the capacity of the output buffer for each bus, whereas
    `pFrameCountIn` will be equal to the number of PCM frames in each of the buffers in `ppFramesIn`.
    
    On output, set `pFrameCountOut` to the number of PCM frames that were actually output and set
    `pFrameCountIn` to the number of input frames that were consumed.
    */
    onProcess:                    #type (pNode: *ma_node, ppFramesIn: **float, pFrameCountIn: *ma_uint32, ppFramesOut: **float, pFrameCountOut: *ma_uint32) -> void #c_call;

    /*
    A callback for retrieving the number of a input frames that are required to output the
    specified number of output frames. You would only want to implement this when the node performs
    resampling. This is optional, even for nodes that perform resampling, but it does offer a
    small reduction in latency as it allows miniaudio to calculate the exact number of input frames
    to read at a time instead of having to estimate.
    */
    onGetRequiredInputFrameCount: #type (pNode: *ma_node, outputFrameCount: ma_uint32, pInputFrameCount: *ma_uint32) -> ma_result #c_call;

    /*
    The number of input buses. This is how many sub-buffers will be contained in the `ppFramesIn`
    parameters of the callbacks above.
    */
    inputBusCount:                ma_uint8;

    /*
    The number of output buses. This is how many sub-buffers will be contained in the `ppFramesOut`
    parameters of the callbacks above.
    */
    outputBusCount:               ma_uint8;

    /*
    Flags describing characteristics of the node. This is currently just a placeholder for some
    ideas for later on.
    */
    flags:                        ma_uint32;
}

ma_node_config :: struct {
    vtable:          *ma_node_vtable; /* Should never be null. Initialization of the node will fail if so. */
    initialState:    ma_node_state; /* Defaults to ma_node_state_started. */
    inputBusCount:   ma_uint32; /* Only used if the vtable specifies an input bus count of `MA_NODE_BUS_COUNT_UNKNOWN`, otherwise must be set to `MA_NODE_BUS_COUNT_UNKNOWN` (default). */
    outputBusCount:  ma_uint32; /* Only used if the vtable specifies an output bus count of `MA_NODE_BUS_COUNT_UNKNOWN`, otherwise  be set to `MA_NODE_BUS_COUNT_UNKNOWN` (default). */
    pInputChannels:  *ma_uint32; /* The number of elements are determined by the input bus count as determined by the vtable, or `inputBusCount` if the vtable specifies `MA_NODE_BUS_COUNT_UNKNOWN`. */
    pOutputChannels: *ma_uint32; /* The number of elements are determined by the output bus count as determined by the vtable, or `outputBusCount` if the vtable specifies `MA_NODE_BUS_COUNT_UNKNOWN`. */
}

ma_node_config_init :: () -> ma_node_config #foreign miniaudio;

ma_node_output_bus :: struct {
    pNode:                  *ma_node; /* The node that owns this output bus. The input node. Will be null for dummy head and tail nodes. */
    outputBusIndex:         ma_uint8; /* The index of the output bus on pNode that this output bus represents. */
    channels:               ma_uint8; /* The number of channels in the audio stream for this bus. */

    inputNodeInputBusIndex: ma_uint8; /* The index of the input bus on the input. Required for detaching. Will only be used within the spinlock so does not need to be atomic. */
    flags:                  ma_uint32; /* Some state flags for tracking the read state of the output buffer. A combination of MA_NODE_OUTPUT_BUS_FLAG_*. */
    refCount:               ma_uint32; /* Reference count for some thread-safety when detaching. */
    isAttached:             ma_bool32; /* This is used to prevent iteration of nodes that are in the middle of being detached. Used for thread safety. */
    lock:                   ma_spinlock; /* Unfortunate lock, but significantly simplifies the implementation. Required for thread-safe attaching and detaching. */
    volume:                 float; /* Linear. */
    pNext:                  *ma_node_output_bus; /* If null, it's the tail node or detached. */
    pPrev:                  *ma_node_output_bus; /* If null, it's the head node or detached. */
    pInputNode:             *ma_node; /* The node that this output bus is attached to. Required for detaching. */
}

ma_node_input_bus :: struct {
    head:        ma_node_output_bus; /* Dummy head node for simplifying some lock-free thread-safety stuff. */
    nextCounter: ma_uint32; /* This is used to determine whether or not the input bus is finding the next node in the list. Used for thread safety when detaching output buses. */
    lock:        ma_spinlock; /* Unfortunate lock, but significantly simplifies the implementation. Required for thread-safe attaching and detaching. */

    channels:    ma_uint8; /* The number of channels in the audio stream for this bus. */
}

ma_node_base :: struct {
    pNodeGraph:                  *ma_node_graph; /* The graph this node belongs to. */
    vtable:                      *ma_node_vtable;
    pCachedData:                 *float; /* Allocated on the heap. Fixed size. Needs to be stored on the heap because reading from output buses is done in separate function calls. */
    cachedDataCapInFramesPerBus: ma_uint16; /* The capacity of the input data cache in frames, per bus. */

    /* These variables are read and written only from the audio thread. */
    cachedFrameCountOut:         ma_uint16;
    cachedFrameCountIn:          ma_uint16;
    consumedFrameCountIn:        ma_uint16;

    state:                       ma_node_state; /* When set to stopped, nothing will be read, regardless of the times in stateTimes. */
    stateTimes:                  [2] ma_uint64; /* Indexed by ma_node_state. Specifies the time based on the global clock that a node should be considered to be in the relevant state. */
    localTime:                   ma_uint64; /* The node's local clock. This is just a running sum of the number of output frames that have been processed. Can be modified by any thread with `ma_node_set_time()`. */
    inputBusCount:               ma_uint32;
    outputBusCount:              ma_uint32;
    pInputBuses:                 *ma_node_input_bus;
    pOutputBuses:                *ma_node_output_bus;

    /* Memory management. */
    _inputBuses:                 [2] ma_node_input_bus;
    _outputBuses:                [2] ma_node_output_bus;
    _pHeap:                      *void; /* A heap allocation for internal use only. pInputBuses and/or pOutputBuses will point to this if the bus count exceeds MA_MAX_NODE_LOCAL_BUS_COUNT. */
    _ownsHeap:                   ma_bool32; /* If set to true, the node owns the heap allocation and _pHeap will be freed in ma_node_uninit(). */
}

ma_node_get_heap_size :: (pNodeGraph: *ma_node_graph, pConfig: *ma_node_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_node_init_preallocated :: (pNodeGraph: *ma_node_graph, pConfig: *ma_node_config, pHeap: *void, pNode: *ma_node) -> ma_result #foreign miniaudio;

ma_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pNode: *ma_node) -> ma_result #foreign miniaudio;

ma_node_uninit :: (pNode: *ma_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_node_get_node_graph :: (pNode: *ma_node) -> *ma_node_graph #foreign miniaudio;

ma_node_get_input_bus_count :: (pNode: *ma_node) -> ma_uint32 #foreign miniaudio;

ma_node_get_output_bus_count :: (pNode: *ma_node) -> ma_uint32 #foreign miniaudio;

ma_node_get_input_channels :: (pNode: *ma_node, inputBusIndex: ma_uint32) -> ma_uint32 #foreign miniaudio;

ma_node_get_output_channels :: (pNode: *ma_node, outputBusIndex: ma_uint32) -> ma_uint32 #foreign miniaudio;

ma_node_attach_output_bus :: (pNode: *ma_node, outputBusIndex: ma_uint32, pOtherNode: *ma_node, otherNodeInputBusIndex: ma_uint32) -> ma_result #foreign miniaudio;

ma_node_detach_output_bus :: (pNode: *ma_node, outputBusIndex: ma_uint32) -> ma_result #foreign miniaudio;

ma_node_detach_all_output_buses :: (pNode: *ma_node) -> ma_result #foreign miniaudio;

ma_node_set_output_bus_volume :: (pNode: *ma_node, outputBusIndex: ma_uint32, volume: float) -> ma_result #foreign miniaudio;

ma_node_get_output_bus_volume :: (pNode: *ma_node, outputBusIndex: ma_uint32) -> float #foreign miniaudio;

ma_node_set_state :: (pNode: *ma_node, state: ma_node_state) -> ma_result #foreign miniaudio;

ma_node_get_state :: (pNode: *ma_node) -> ma_node_state #foreign miniaudio;

ma_node_set_state_time :: (pNode: *ma_node, state: ma_node_state, globalTime: ma_uint64) -> ma_result #foreign miniaudio;

ma_node_get_state_time :: (pNode: *ma_node, state: ma_node_state) -> ma_uint64 #foreign miniaudio;

ma_node_get_state_by_time :: (pNode: *ma_node, globalTime: ma_uint64) -> ma_node_state #foreign miniaudio;

ma_node_get_state_by_time_range :: (pNode: *ma_node, globalTimeBeg: ma_uint64, globalTimeEnd: ma_uint64) -> ma_node_state #foreign miniaudio;

ma_node_get_time :: (pNode: *ma_node) -> ma_uint64 #foreign miniaudio;

ma_node_set_time :: (pNode: *ma_node, localTime: ma_uint64) -> ma_result #foreign miniaudio;

ma_node_graph_config :: struct {
    channels:             ma_uint32;
    nodeCacheCapInFrames: ma_uint16;
}

ma_node_graph_config_init :: (channels: ma_uint32) -> ma_node_graph_config #foreign miniaudio;

ma_node_graph :: struct {
    base:                 ma_node_base; /* The node graph itself is a node so it can be connected as an input to different node graph. This has zero inputs and calls ma_node_graph_read_pcm_frames() to generate it's output. */
    endpoint:             ma_node_base; /* Special node that all nodes eventually connect to. Data is read from this node in ma_node_graph_read_pcm_frames(). */
    nodeCacheCapInFrames: ma_uint16;

    /* Read and written by multiple threads. */
    isReading:            ma_bool32;
}

ma_node_graph_init :: (pConfig: *ma_node_graph_config, pAllocationCallbacks: *ma_allocation_callbacks, pNodeGraph: *ma_node_graph) -> ma_result #foreign miniaudio;

ma_node_graph_uninit :: (pNodeGraph: *ma_node_graph, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_node_graph_get_endpoint :: (pNodeGraph: *ma_node_graph) -> *ma_node #foreign miniaudio;

ma_node_graph_read_pcm_frames :: (pNodeGraph: *ma_node_graph, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_node_graph_get_channels :: (pNodeGraph: *ma_node_graph) -> ma_uint32 #foreign miniaudio;

ma_node_graph_get_time :: (pNodeGraph: *ma_node_graph) -> ma_uint64 #foreign miniaudio;

ma_node_graph_set_time :: (pNodeGraph: *ma_node_graph, globalTime: ma_uint64) -> ma_result #foreign miniaudio;

/* Data source node. 0 input buses, 1 output bus. Used for reading from a data source. */
ma_data_source_node_config :: struct {
    nodeConfig:  ma_node_config;
    pDataSource: *ma_data_source;
}

/* Data source node. */
ma_data_source_node_config_init :: (pDataSource: *ma_data_source) -> ma_data_source_node_config #foreign miniaudio;

ma_data_source_node :: struct {
    base:        ma_node_base;
    pDataSource: *ma_data_source;
}

ma_data_source_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_data_source_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pDataSourceNode: *ma_data_source_node) -> ma_result #foreign miniaudio;

ma_data_source_node_uninit :: (pDataSourceNode: *ma_data_source_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_data_source_node_set_looping :: (pDataSourceNode: *ma_data_source_node, isLooping: ma_bool32) -> ma_result #foreign miniaudio;

ma_data_source_node_is_looping :: (pDataSourceNode: *ma_data_source_node) -> ma_bool32 #foreign miniaudio;

/* Splitter Node. 1 input, many outputs. Used for splitting/copying a stream so it can be as input into two separate output nodes. */
ma_splitter_node_config :: struct {
    nodeConfig:     ma_node_config;
    channels:       ma_uint32;
    outputBusCount: ma_uint32;
}

/* Splitter Node. */
ma_splitter_node_config_init :: (channels: ma_uint32) -> ma_splitter_node_config #foreign miniaudio;

ma_splitter_node :: struct {
    base: ma_node_base;
}

ma_splitter_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_splitter_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pSplitterNode: *ma_splitter_node) -> ma_result #foreign miniaudio;

ma_splitter_node_uninit :: (pSplitterNode: *ma_splitter_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/*
Biquad Node
*/
ma_biquad_node_config :: struct {
    nodeConfig: ma_node_config;
    biquad:     ma_biquad_config;
}

/*
Biquad Node
*/
ma_biquad_node_config_init :: (channels: ma_uint32, b0: float, b1: float, b2: float, a0: float, a1: float, a2: float) -> ma_biquad_node_config #foreign miniaudio;

ma_biquad_node :: struct {
    baseNode: ma_node_base;
    biquad:   ma_biquad;
}

ma_biquad_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_biquad_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pNode: *ma_biquad_node) -> ma_result #foreign miniaudio;

ma_biquad_node_reinit :: (pConfig: *ma_biquad_config, pNode: *ma_biquad_node) -> ma_result #foreign miniaudio;

ma_biquad_node_uninit :: (pNode: *ma_biquad_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/*
Low Pass Filter Node
*/
ma_lpf_node_config :: struct {
    nodeConfig: ma_node_config;
    lpf:        ma_lpf_config;
}

/*
Low Pass Filter Node
*/
ma_lpf_node_config_init :: (channels: ma_uint32, sampleRate: ma_uint32, cutoffFrequency: float64, order: ma_uint32) -> ma_lpf_node_config #foreign miniaudio;

ma_lpf_node :: struct {
    baseNode: ma_node_base;
    lpf:      ma_lpf;
}

ma_lpf_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_lpf_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pNode: *ma_lpf_node) -> ma_result #foreign miniaudio;

ma_lpf_node_reinit :: (pConfig: *ma_lpf_config, pNode: *ma_lpf_node) -> ma_result #foreign miniaudio;

ma_lpf_node_uninit :: (pNode: *ma_lpf_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/*
High Pass Filter Node
*/
ma_hpf_node_config :: struct {
    nodeConfig: ma_node_config;
    hpf:        ma_hpf_config;
}

/*
High Pass Filter Node
*/
ma_hpf_node_config_init :: (channels: ma_uint32, sampleRate: ma_uint32, cutoffFrequency: float64, order: ma_uint32) -> ma_hpf_node_config #foreign miniaudio;

ma_hpf_node :: struct {
    baseNode: ma_node_base;
    hpf:      ma_hpf;
}

ma_hpf_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_hpf_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pNode: *ma_hpf_node) -> ma_result #foreign miniaudio;

ma_hpf_node_reinit :: (pConfig: *ma_hpf_config, pNode: *ma_hpf_node) -> ma_result #foreign miniaudio;

ma_hpf_node_uninit :: (pNode: *ma_hpf_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/*
Band Pass Filter Node
*/
ma_bpf_node_config :: struct {
    nodeConfig: ma_node_config;
    bpf:        ma_bpf_config;
}

/*
Band Pass Filter Node
*/
ma_bpf_node_config_init :: (channels: ma_uint32, sampleRate: ma_uint32, cutoffFrequency: float64, order: ma_uint32) -> ma_bpf_node_config #foreign miniaudio;

ma_bpf_node :: struct {
    baseNode: ma_node_base;
    bpf:      ma_bpf;
}

ma_bpf_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_bpf_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pNode: *ma_bpf_node) -> ma_result #foreign miniaudio;

ma_bpf_node_reinit :: (pConfig: *ma_bpf_config, pNode: *ma_bpf_node) -> ma_result #foreign miniaudio;

ma_bpf_node_uninit :: (pNode: *ma_bpf_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/*
Notching Filter Node
*/
ma_notch_node_config :: struct {
    nodeConfig: ma_node_config;
    notch:      ma_notch_config;
}

/*
Notching Filter Node
*/
ma_notch_node_config_init :: (channels: ma_uint32, sampleRate: ma_uint32, q: float64, frequency: float64) -> ma_notch_node_config #foreign miniaudio;

ma_notch_node :: struct {
    baseNode: ma_node_base;
    notch:    ma_notch2;
}

ma_notch_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_notch_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pNode: *ma_notch_node) -> ma_result #foreign miniaudio;

ma_notch_node_reinit :: (pConfig: *ma_notch_config, pNode: *ma_notch_node) -> ma_result #foreign miniaudio;

ma_notch_node_uninit :: (pNode: *ma_notch_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/*
Peaking Filter Node
*/
ma_peak_node_config :: struct {
    nodeConfig: ma_node_config;
    peak:       ma_peak_config;
}

/*
Peaking Filter Node
*/
ma_peak_node_config_init :: (channels: ma_uint32, sampleRate: ma_uint32, gainDB: float64, q: float64, frequency: float64) -> ma_peak_node_config #foreign miniaudio;

ma_peak_node :: struct {
    baseNode: ma_node_base;
    peak:     ma_peak2;
}

ma_peak_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_peak_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pNode: *ma_peak_node) -> ma_result #foreign miniaudio;

ma_peak_node_reinit :: (pConfig: *ma_peak_config, pNode: *ma_peak_node) -> ma_result #foreign miniaudio;

ma_peak_node_uninit :: (pNode: *ma_peak_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/*
Low Shelf Filter Node
*/
ma_loshelf_node_config :: struct {
    nodeConfig: ma_node_config;
    loshelf:    ma_loshelf_config;
}

/*
Low Shelf Filter Node
*/
ma_loshelf_node_config_init :: (channels: ma_uint32, sampleRate: ma_uint32, gainDB: float64, q: float64, frequency: float64) -> ma_loshelf_node_config #foreign miniaudio;

ma_loshelf_node :: struct {
    baseNode: ma_node_base;
    loshelf:  ma_loshelf2;
}

ma_loshelf_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_loshelf_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pNode: *ma_loshelf_node) -> ma_result #foreign miniaudio;

ma_loshelf_node_reinit :: (pConfig: *ma_loshelf_config, pNode: *ma_loshelf_node) -> ma_result #foreign miniaudio;

ma_loshelf_node_uninit :: (pNode: *ma_loshelf_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/*
High Shelf Filter Node
*/
ma_hishelf_node_config :: struct {
    nodeConfig: ma_node_config;
    hishelf:    ma_hishelf_config;
}

/*
High Shelf Filter Node
*/
ma_hishelf_node_config_init :: (channels: ma_uint32, sampleRate: ma_uint32, gainDB: float64, q: float64, frequency: float64) -> ma_hishelf_node_config #foreign miniaudio;

ma_hishelf_node :: struct {
    baseNode: ma_node_base;
    hishelf:  ma_hishelf2;
}

ma_hishelf_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_hishelf_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pNode: *ma_hishelf_node) -> ma_result #foreign miniaudio;

ma_hishelf_node_reinit :: (pConfig: *ma_hishelf_config, pNode: *ma_hishelf_node) -> ma_result #foreign miniaudio;

ma_hishelf_node_uninit :: (pNode: *ma_hishelf_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_delay_node_config :: struct {
    nodeConfig: ma_node_config;
    delay:      ma_delay_config;
}

ma_delay_node_config_init :: (channels: ma_uint32, sampleRate: ma_uint32, delayInFrames: ma_uint32, decay: float) -> ma_delay_node_config #foreign miniaudio;

ma_delay_node :: struct {
    baseNode: ma_node_base;
    delay:    ma_delay;
}

ma_delay_node_init :: (pNodeGraph: *ma_node_graph, pConfig: *ma_delay_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pDelayNode: *ma_delay_node) -> ma_result #foreign miniaudio;

ma_delay_node_uninit :: (pDelayNode: *ma_delay_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_delay_node_set_wet :: (pDelayNode: *ma_delay_node, value: float) -> void #foreign miniaudio;

ma_delay_node_get_wet :: (pDelayNode: *ma_delay_node) -> float #foreign miniaudio;

ma_delay_node_set_dry :: (pDelayNode: *ma_delay_node, value: float) -> void #foreign miniaudio;

ma_delay_node_get_dry :: (pDelayNode: *ma_delay_node) -> float #foreign miniaudio;

ma_delay_node_set_decay :: (pDelayNode: *ma_delay_node, value: float) -> void #foreign miniaudio;

ma_delay_node_get_decay :: (pDelayNode: *ma_delay_node) -> float #foreign miniaudio;

/* Sound flags. */
ma_sound_flags :: enum u32 {
    STREAM                :: 1;
    DECODE                :: 2;
    ASYNC                 :: 4;
    WAIT_INIT             :: 8;
    UNKNOWN_LENGTH        :: 16;

    NO_DEFAULT_ATTACHMENT :: 4096;
    NO_PITCH              :: 8192;
    NO_SPATIALIZATION     :: 16384;
}

ma_engine_node_type :: enum u32 {
    sound :: 0;
    group :: 1;
}

ma_engine_node_config :: struct {
    pEngine:                     *ma_engine;
    type:                        ma_engine_node_type;
    channelsIn:                  ma_uint32;
    channelsOut:                 ma_uint32;
    sampleRate:                  ma_uint32; /* Only used when the type is set to ma_engine_node_type_sound. */
    volumeSmoothTimeInPCMFrames: ma_uint32; /* The number of frames to smooth over volume changes. Defaults to 0 in which case no smoothing is used. */
    monoExpansionMode:           ma_mono_expansion_mode;
    isPitchDisabled:             ma_bool8; /* Pitching can be explicitly disabled with MA_SOUND_FLAG_NO_PITCH to optimize processing. */
    isSpatializationDisabled:    ma_bool8; /* Spatialization can be explicitly disabled with MA_SOUND_FLAG_NO_SPATIALIZATION. */
    pinnedListenerIndex:         ma_uint8; /* The index of the listener this node should always use for spatialization. If set to MA_LISTENER_INDEX_CLOSEST the engine will use the closest listener. */
}

ma_engine_node_config_init :: (pEngine: *ma_engine, type: ma_engine_node_type, flags: ma_uint32) -> ma_engine_node_config #foreign miniaudio;

/* Base node object for both ma_sound and ma_sound_group. */
ma_engine_node :: struct {
    baseNode:                    ma_node_base; /* Must be the first member for compatiblity with the ma_node API. */
    pEngine:                     *ma_engine; /* A pointer to the engine. Set based on the value from the config. */
    sampleRate:                  ma_uint32; /* The sample rate of the input data. For sounds backed by a data source, this will be the data source's sample rate. Otherwise it'll be the engine's sample rate. */
    volumeSmoothTimeInPCMFrames: ma_uint32;
    monoExpansionMode:           ma_mono_expansion_mode;
    fader:                       ma_fader;
    resampler:                   ma_linear_resampler; /* For pitch shift. */
    spatializer:                 ma_spatializer;
    panner:                      ma_panner;
    volumeGainer:                ma_gainer; /* This will only be used if volumeSmoothTimeInPCMFrames is > 0. */
    volume:                      ma_atomic_float; /* Defaults to 1. */
    pitch:                       float;
    oldPitch:                    float; /* For determining whether or not the resampler needs to be updated to reflect the new pitch. The resampler will be updated on the mixing thread. */
    oldDopplerPitch:             float; /* For determining whether or not the resampler needs to be updated to take a new doppler pitch into account. */
    isPitchDisabled:             ma_bool32; /* When set to true, pitching will be disabled which will allow the resampler to be bypassed to save some computation. */
    isSpatializationDisabled:    ma_bool32; /* Set to false by default. When set to false, will not have spatialisation applied. */
    pinnedListenerIndex:         ma_uint32; /* The index of the listener this node should always use for spatialization. If set to MA_LISTENER_INDEX_CLOSEST the engine will use the closest listener. */

    fadeSettings:                struct {
        volumeBeg:                  ma_atomic_float;
        volumeEnd:                  ma_atomic_float;
        fadeLengthInFrames:         ma_atomic_uint64; /* <-- Defaults to (~(ma_uint64)0) which is used to indicate that no fade should be applied. */
        absoluteGlobalTimeInFrames: ma_atomic_uint64; /* <-- The time to start the fade. */
    };

    /* Memory management. */
    _ownsHeap:                   ma_bool8;
    _pHeap:                      *void;
}

ma_engine_node_get_heap_size :: (pConfig: *ma_engine_node_config, pHeapSizeInBytes: *u64) -> ma_result #foreign miniaudio;

ma_engine_node_init_preallocated :: (pConfig: *ma_engine_node_config, pHeap: *void, pEngineNode: *ma_engine_node) -> ma_result #foreign miniaudio;

ma_engine_node_init :: (pConfig: *ma_engine_node_config, pAllocationCallbacks: *ma_allocation_callbacks, pEngineNode: *ma_engine_node) -> ma_result #foreign miniaudio;

ma_engine_node_uninit :: (pEngineNode: *ma_engine_node, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

/* Callback for when a sound reaches the end. */
ma_sound_end_proc :: #type (pUserData: *void, pSound: *ma_sound) -> void #c_call;

ma_sound_config :: struct {
    pFilePath:                      *u8; /* Set this to load from the resource manager. */
    pFilePathW:                     *s32; /* Set this to load from the resource manager. */
    pDataSource:                    *ma_data_source; /* Set this to load from an existing data source. */
    pInitialAttachment:             *ma_node; /* If set, the sound will be attached to an input of this node. This can be set to a ma_sound. If set to NULL, the sound will be attached directly to the endpoint unless MA_SOUND_FLAG_NO_DEFAULT_ATTACHMENT is set in `flags`. */
    initialAttachmentInputBusIndex: ma_uint32; /* The index of the input bus of pInitialAttachment to attach the sound to. */
    channelsIn:                     ma_uint32; /* Ignored if using a data source as input (the data source's channel count will be used always). Otherwise, setting to 0 will cause the engine's channel count to be used. */
    channelsOut:                    ma_uint32; /* Set this to 0 (default) to use the engine's channel count. Set to MA_SOUND_SOURCE_CHANNEL_COUNT to use the data source's channel count (only used if using a data source as input). */
    monoExpansionMode:              ma_mono_expansion_mode; /* Controls how the mono channel should be expanded to other channels when spatialization is disabled on a sound. */
    flags:                          ma_uint32; /* A combination of MA_SOUND_FLAG_* flags. */
    volumeSmoothTimeInPCMFrames:    ma_uint32; /* The number of frames to smooth over volume changes. Defaults to 0 in which case no smoothing is used. */
    initialSeekPointInPCMFrames:    ma_uint64; /* Initializes the sound such that it's seeked to this location by default. */
    rangeBegInPCMFrames:            ma_uint64;
    rangeEndInPCMFrames:            ma_uint64;
    loopPointBegInPCMFrames:        ma_uint64;
    loopPointEndInPCMFrames:        ma_uint64;
    isLooping:                      ma_bool32;
    endCallback:                    ma_sound_end_proc; /* Fired when the sound reaches the end. Will be fired from the audio thread. Do not restart, uninitialize or otherwise change the state of the sound from here. Instead fire an event or set a variable to indicate to a different thread to change the start of the sound. Will not be fired in response to a scheduled stop with ma_sound_set_stop_time_*(). */
    pEndCallbackUserData:           *void;

    initNotifications:              ma_resource_manager_pipeline_notifications;

    pDoneFence:                     *ma_fence; /* Deprecated. Use initNotifications instead. Released when the resource manager has finished decoding the entire sound. Not used with streams. */
}

ma_sound_config_init :: () -> ma_sound_config #foreign miniaudio;

ma_sound_config_init_2 :: (pEngine: *ma_engine) -> ma_sound_config #foreign miniaudio;

ma_sound :: struct {
    engineNode:                 ma_engine_node; /* Must be the first member for compatibility with the ma_node API. */
    pDataSource:                *ma_data_source;
    seekTarget:                 ma_uint64; /* The PCM frame index to seek to in the mixing thread. Set to (~(ma_uint64)0) to not perform any seeking. */
    atEnd:                      ma_bool32;
    endCallback:                ma_sound_end_proc;
    pEndCallbackUserData:       *void;
    ownsDataSource:             ma_bool8;

    pResourceManagerDataSource: *ma_resource_manager_data_source;
}

ma_sound_inlined :: struct {
    sound: ma_sound;
    pNext: *ma_sound_inlined;
    pPrev: *ma_sound_inlined;
}

/* A sound group is just a sound. */
ma_sound_group_config :: ma_sound_config;
ma_sound_group :: ma_sound;

ma_sound_group_config_init :: () -> ma_sound_group_config #foreign miniaudio;

ma_sound_group_config_init_2 :: (pEngine: *ma_engine) -> ma_sound_group_config #foreign miniaudio;

ma_engine_process_proc :: #type (pUserData: *void, pFramesOut: *float, frameCount: ma_uint64) -> void #c_call;

ma_engine_config :: struct {
    pResourceManager:                   *ma_resource_manager; /* Can be null in which case a resource manager will be created for you. */

    pContext:                           *ma_context;
    pDevice:                            *ma_device; /* If set, the caller is responsible for calling ma_engine_data_callback() in the device's data callback. */
    pPlaybackDeviceID:                  *ma_device_id; /* The ID of the playback device to use with the default listener. */
    dataCallback:                       ma_device_data_proc; /* Can be null. Can be used to provide a custom device data callback. */
    notificationCallback:               ma_device_notification_proc;

    pLog:                               *ma_log; /* When set to NULL, will use the context's log. */
    listenerCount:                      ma_uint32; /* Must be between 1 and MA_ENGINE_MAX_LISTENERS. */
    channels:                           ma_uint32; /* The number of channels to use when mixing and spatializing. When set to 0, will use the native channel count of the device. */
    sampleRate:                         ma_uint32; /* The sample rate. When set to 0 will use the native channel count of the device. */
    periodSizeInFrames:                 ma_uint32; /* If set to something other than 0, updates will always be exactly this size. The underlying device may be a different size, but from the perspective of the mixer that won't matter.*/
    periodSizeInMilliseconds:           ma_uint32; /* Used if periodSizeInFrames is unset. */
    gainSmoothTimeInFrames:             ma_uint32; /* The number of frames to interpolate the gain of spatialized sounds across. If set to 0, will use gainSmoothTimeInMilliseconds. */
    gainSmoothTimeInMilliseconds:       ma_uint32; /* When set to 0, gainSmoothTimeInFrames will be used. If both are set to 0, a default value will be used. */
    defaultVolumeSmoothTimeInPCMFrames: ma_uint32; /* Defaults to 0. Controls the default amount of smoothing to apply to volume changes to sounds. High values means more smoothing at the expense of high latency (will take longer to reach the new volume). */
    allocationCallbacks:                ma_allocation_callbacks;
    noAutoStart:                        ma_bool32; /* When set to true, requires an explicit call to ma_engine_start(). This is false by default, meaning the engine will be started automatically in ma_engine_init(). */
    noDevice:                           ma_bool32; /* When set to true, don't create a default device. ma_engine_read_pcm_frames() can be called manually to read data. */
    monoExpansionMode:                  ma_mono_expansion_mode; /* Controls how the mono channel should be expanded to other channels when spatialization is disabled on a sound. */
    pResourceManagerVFS:                *ma_vfs; /* A pointer to a pre-allocated VFS object to use with the resource manager. This is ignored if pResourceManager is not NULL. */
    onProcess:                          ma_engine_process_proc; /* Fired at the end of each call to ma_engine_read_pcm_frames(). For engine's that manage their own internal device (the default configuration), this will be fired from the audio thread, and you do not need to call ma_engine_read_pcm_frames() manually in order to trigger this. */
    pProcessUserData:                   *void; /* User data that's passed into onProcess. */
}

ma_engine_config_init :: () -> ma_engine_config #foreign miniaudio;

ma_engine :: struct {
    nodeGraph:                          ma_node_graph; /* An engine is a node graph. It should be able to be plugged into any ma_node_graph API (with a cast) which means this must be the first member of this struct. */

    pResourceManager:                   *ma_resource_manager;

    pDevice:                            *ma_device; /* Optionally set via the config, otherwise allocated by the engine in ma_engine_init(). */

    pLog:                               *ma_log;
    sampleRate:                         ma_uint32;
    listenerCount:                      ma_uint32;
    listeners:                          [4] ma_spatializer_listener;
    allocationCallbacks:                ma_allocation_callbacks;
    ownsResourceManager:                ma_bool8;
    ownsDevice:                         ma_bool8;
    inlinedSoundLock:                   ma_spinlock; /* For synchronizing access so the inlined sound list. */
    pInlinedSoundHead:                  *ma_sound_inlined; /* The first inlined sound. Inlined sounds are tracked in a linked list. */
    inlinedSoundCount:                  ma_uint32; /* The total number of allocated inlined sound objects. Used for debugging. */
    gainSmoothTimeInFrames:             ma_uint32; /* The number of frames to interpolate the gain of spatialized sounds across. */
    defaultVolumeSmoothTimeInPCMFrames: ma_uint32;
    monoExpansionMode:                  ma_mono_expansion_mode;
    onProcess:                          ma_engine_process_proc;
    pProcessUserData:                   *void;
}

ma_engine_init :: (pConfig: *ma_engine_config, pEngine: *ma_engine) -> ma_result #foreign miniaudio;

ma_engine_uninit :: (pEngine: *ma_engine) -> void #foreign miniaudio;

ma_engine_read_pcm_frames :: (pEngine: *ma_engine, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_engine_get_node_graph :: (pEngine: *ma_engine) -> *ma_node_graph #foreign miniaudio;

ma_engine_get_resource_manager :: (pEngine: *ma_engine) -> *ma_resource_manager #foreign miniaudio;

ma_engine_get_device :: (pEngine: *ma_engine) -> *ma_device #foreign miniaudio;

ma_engine_get_log :: (pEngine: *ma_engine) -> *ma_log #foreign miniaudio;

ma_engine_get_endpoint :: (pEngine: *ma_engine) -> *ma_node #foreign miniaudio;

ma_engine_get_time_in_pcm_frames :: (pEngine: *ma_engine) -> ma_uint64 #foreign miniaudio;

ma_engine_get_time_in_milliseconds :: (pEngine: *ma_engine) -> ma_uint64 #foreign miniaudio;

ma_engine_set_time_in_pcm_frames :: (pEngine: *ma_engine, globalTime: ma_uint64) -> ma_result #foreign miniaudio;

ma_engine_set_time_in_milliseconds :: (pEngine: *ma_engine, globalTime: ma_uint64) -> ma_result #foreign miniaudio;

ma_engine_get_time :: (pEngine: *ma_engine) -> ma_uint64 #foreign miniaudio;

ma_engine_set_time :: (pEngine: *ma_engine, globalTime: ma_uint64) -> ma_result #foreign miniaudio;

ma_engine_get_channels :: (pEngine: *ma_engine) -> ma_uint32 #foreign miniaudio;

ma_engine_get_sample_rate :: (pEngine: *ma_engine) -> ma_uint32 #foreign miniaudio;

ma_engine_start :: (pEngine: *ma_engine) -> ma_result #foreign miniaudio;

ma_engine_stop :: (pEngine: *ma_engine) -> ma_result #foreign miniaudio;

ma_engine_set_volume :: (pEngine: *ma_engine, volume: float) -> ma_result #foreign miniaudio;

ma_engine_get_volume :: (pEngine: *ma_engine) -> float #foreign miniaudio;

ma_engine_set_gain_db :: (pEngine: *ma_engine, gainDB: float) -> ma_result #foreign miniaudio;

ma_engine_get_gain_db :: (pEngine: *ma_engine) -> float #foreign miniaudio;

ma_engine_get_listener_count :: (pEngine: *ma_engine) -> ma_uint32 #foreign miniaudio;

ma_engine_find_closest_listener :: (pEngine: *ma_engine, absolutePosX: float, absolutePosY: float, absolutePosZ: float) -> ma_uint32 #foreign miniaudio;

ma_engine_listener_set_position :: (pEngine: *ma_engine, listenerIndex: ma_uint32, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_engine_listener_get_position :: (pEngine: *ma_engine, listenerIndex: ma_uint32) -> ma_vec3f #foreign miniaudio;

ma_engine_listener_set_direction :: (pEngine: *ma_engine, listenerIndex: ma_uint32, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_engine_listener_get_direction :: (pEngine: *ma_engine, listenerIndex: ma_uint32) -> ma_vec3f #foreign miniaudio;

ma_engine_listener_set_velocity :: (pEngine: *ma_engine, listenerIndex: ma_uint32, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_engine_listener_get_velocity :: (pEngine: *ma_engine, listenerIndex: ma_uint32) -> ma_vec3f #foreign miniaudio;

ma_engine_listener_set_cone :: (pEngine: *ma_engine, listenerIndex: ma_uint32, innerAngleInRadians: float, outerAngleInRadians: float, outerGain: float) -> void #foreign miniaudio;

ma_engine_listener_get_cone :: (pEngine: *ma_engine, listenerIndex: ma_uint32, pInnerAngleInRadians: *float, pOuterAngleInRadians: *float, pOuterGain: *float) -> void #foreign miniaudio;

ma_engine_listener_set_world_up :: (pEngine: *ma_engine, listenerIndex: ma_uint32, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_engine_listener_get_world_up :: (pEngine: *ma_engine, listenerIndex: ma_uint32) -> ma_vec3f #foreign miniaudio;

ma_engine_listener_set_enabled :: (pEngine: *ma_engine, listenerIndex: ma_uint32, isEnabled: ma_bool32) -> void #foreign miniaudio;

ma_engine_listener_is_enabled :: (pEngine: *ma_engine, listenerIndex: ma_uint32) -> ma_bool32 #foreign miniaudio;

ma_engine_play_sound_ex :: (pEngine: *ma_engine, pFilePath: *u8, pNode: *ma_node, nodeInputBusIndex: ma_uint32) -> ma_result #foreign miniaudio;

ma_engine_play_sound :: (pEngine: *ma_engine, pFilePath: *u8, pGroup: *ma_sound_group) -> ma_result #foreign miniaudio;

ma_sound_init_from_file :: (pEngine: *ma_engine, pFilePath: *u8, flags: ma_uint32, pGroup: *ma_sound_group, pDoneFence: *ma_fence, pSound: *ma_sound) -> ma_result #foreign miniaudio;

ma_sound_init_from_file_w :: (pEngine: *ma_engine, pFilePath: *s32, flags: ma_uint32, pGroup: *ma_sound_group, pDoneFence: *ma_fence, pSound: *ma_sound) -> ma_result #foreign miniaudio;

ma_sound_init_copy :: (pEngine: *ma_engine, pExistingSound: *ma_sound, flags: ma_uint32, pGroup: *ma_sound_group, pSound: *ma_sound) -> ma_result #foreign miniaudio;

ma_sound_init_from_data_source :: (pEngine: *ma_engine, pDataSource: *ma_data_source, flags: ma_uint32, pGroup: *ma_sound_group, pSound: *ma_sound) -> ma_result #foreign miniaudio;

ma_sound_init_ex :: (pEngine: *ma_engine, pConfig: *ma_sound_config, pSound: *ma_sound) -> ma_result #foreign miniaudio;

ma_sound_uninit :: (pSound: *ma_sound) -> void #foreign miniaudio;

ma_sound_get_engine :: (pSound: *ma_sound) -> *ma_engine #foreign miniaudio;

ma_sound_get_data_source :: (pSound: *ma_sound) -> *ma_data_source #foreign miniaudio;

ma_sound_start :: (pSound: *ma_sound) -> ma_result #foreign miniaudio;

ma_sound_stop :: (pSound: *ma_sound) -> ma_result #foreign miniaudio;

ma_sound_stop_with_fade_in_pcm_frames :: (pSound: *ma_sound, fadeLengthInFrames: ma_uint64) -> ma_result #foreign miniaudio;

ma_sound_stop_with_fade_in_milliseconds :: (pSound: *ma_sound, fadeLengthInFrames: ma_uint64) -> ma_result #foreign miniaudio;

ma_sound_set_volume :: (pSound: *ma_sound, volume: float) -> void #foreign miniaudio;

ma_sound_get_volume :: (pSound: *ma_sound) -> float #foreign miniaudio;

ma_sound_set_pan :: (pSound: *ma_sound, pan: float) -> void #foreign miniaudio;

ma_sound_get_pan :: (pSound: *ma_sound) -> float #foreign miniaudio;

ma_sound_set_pan_mode :: (pSound: *ma_sound, panMode: ma_pan_mode) -> void #foreign miniaudio;

ma_sound_get_pan_mode :: (pSound: *ma_sound) -> ma_pan_mode #foreign miniaudio;

ma_sound_set_pitch :: (pSound: *ma_sound, pitch: float) -> void #foreign miniaudio;

ma_sound_get_pitch :: (pSound: *ma_sound) -> float #foreign miniaudio;

ma_sound_set_spatialization_enabled :: (pSound: *ma_sound, enabled: ma_bool32) -> void #foreign miniaudio;

ma_sound_is_spatialization_enabled :: (pSound: *ma_sound) -> ma_bool32 #foreign miniaudio;

ma_sound_set_pinned_listener_index :: (pSound: *ma_sound, listenerIndex: ma_uint32) -> void #foreign miniaudio;

ma_sound_get_pinned_listener_index :: (pSound: *ma_sound) -> ma_uint32 #foreign miniaudio;

ma_sound_get_listener_index :: (pSound: *ma_sound) -> ma_uint32 #foreign miniaudio;

ma_sound_get_direction_to_listener :: (pSound: *ma_sound) -> ma_vec3f #foreign miniaudio;

ma_sound_set_position :: (pSound: *ma_sound, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_sound_get_position :: (pSound: *ma_sound) -> ma_vec3f #foreign miniaudio;

ma_sound_set_direction :: (pSound: *ma_sound, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_sound_get_direction :: (pSound: *ma_sound) -> ma_vec3f #foreign miniaudio;

ma_sound_set_velocity :: (pSound: *ma_sound, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_sound_get_velocity :: (pSound: *ma_sound) -> ma_vec3f #foreign miniaudio;

ma_sound_set_attenuation_model :: (pSound: *ma_sound, attenuationModel: ma_attenuation_model) -> void #foreign miniaudio;

ma_sound_get_attenuation_model :: (pSound: *ma_sound) -> ma_attenuation_model #foreign miniaudio;

ma_sound_set_positioning :: (pSound: *ma_sound, positioning: ma_positioning) -> void #foreign miniaudio;

ma_sound_get_positioning :: (pSound: *ma_sound) -> ma_positioning #foreign miniaudio;

ma_sound_set_rolloff :: (pSound: *ma_sound, rolloff: float) -> void #foreign miniaudio;

ma_sound_get_rolloff :: (pSound: *ma_sound) -> float #foreign miniaudio;

ma_sound_set_min_gain :: (pSound: *ma_sound, minGain: float) -> void #foreign miniaudio;

ma_sound_get_min_gain :: (pSound: *ma_sound) -> float #foreign miniaudio;

ma_sound_set_max_gain :: (pSound: *ma_sound, maxGain: float) -> void #foreign miniaudio;

ma_sound_get_max_gain :: (pSound: *ma_sound) -> float #foreign miniaudio;

ma_sound_set_min_distance :: (pSound: *ma_sound, minDistance: float) -> void #foreign miniaudio;

ma_sound_get_min_distance :: (pSound: *ma_sound) -> float #foreign miniaudio;

ma_sound_set_max_distance :: (pSound: *ma_sound, maxDistance: float) -> void #foreign miniaudio;

ma_sound_get_max_distance :: (pSound: *ma_sound) -> float #foreign miniaudio;

ma_sound_set_cone :: (pSound: *ma_sound, innerAngleInRadians: float, outerAngleInRadians: float, outerGain: float) -> void #foreign miniaudio;

ma_sound_get_cone :: (pSound: *ma_sound, pInnerAngleInRadians: *float, pOuterAngleInRadians: *float, pOuterGain: *float) -> void #foreign miniaudio;

ma_sound_set_doppler_factor :: (pSound: *ma_sound, dopplerFactor: float) -> void #foreign miniaudio;

ma_sound_get_doppler_factor :: (pSound: *ma_sound) -> float #foreign miniaudio;

ma_sound_set_directional_attenuation_factor :: (pSound: *ma_sound, directionalAttenuationFactor: float) -> void #foreign miniaudio;

ma_sound_get_directional_attenuation_factor :: (pSound: *ma_sound) -> float #foreign miniaudio;

ma_sound_set_fade_in_pcm_frames :: (pSound: *ma_sound, volumeBeg: float, volumeEnd: float, fadeLengthInFrames: ma_uint64) -> void #foreign miniaudio;

ma_sound_set_fade_in_milliseconds :: (pSound: *ma_sound, volumeBeg: float, volumeEnd: float, fadeLengthInMilliseconds: ma_uint64) -> void #foreign miniaudio;

ma_sound_set_fade_start_in_pcm_frames :: (pSound: *ma_sound, volumeBeg: float, volumeEnd: float, fadeLengthInFrames: ma_uint64, absoluteGlobalTimeInFrames: ma_uint64) -> void #foreign miniaudio;

ma_sound_set_fade_start_in_milliseconds :: (pSound: *ma_sound, volumeBeg: float, volumeEnd: float, fadeLengthInMilliseconds: ma_uint64, absoluteGlobalTimeInMilliseconds: ma_uint64) -> void #foreign miniaudio;

ma_sound_get_current_fade_volume :: (pSound: *ma_sound) -> float #foreign miniaudio;

ma_sound_set_start_time_in_pcm_frames :: (pSound: *ma_sound, absoluteGlobalTimeInFrames: ma_uint64) -> void #foreign miniaudio;

ma_sound_set_start_time_in_milliseconds :: (pSound: *ma_sound, absoluteGlobalTimeInMilliseconds: ma_uint64) -> void #foreign miniaudio;

ma_sound_set_stop_time_in_pcm_frames :: (pSound: *ma_sound, absoluteGlobalTimeInFrames: ma_uint64) -> void #foreign miniaudio;

ma_sound_set_stop_time_in_milliseconds :: (pSound: *ma_sound, absoluteGlobalTimeInMilliseconds: ma_uint64) -> void #foreign miniaudio;

ma_sound_set_stop_time_with_fade_in_pcm_frames :: (pSound: *ma_sound, stopAbsoluteGlobalTimeInFrames: ma_uint64, fadeLengthInFrames: ma_uint64) -> void #foreign miniaudio;

ma_sound_set_stop_time_with_fade_in_milliseconds :: (pSound: *ma_sound, stopAbsoluteGlobalTimeInMilliseconds: ma_uint64, fadeLengthInMilliseconds: ma_uint64) -> void #foreign miniaudio;

ma_sound_is_playing :: (pSound: *ma_sound) -> ma_bool32 #foreign miniaudio;

ma_sound_get_time_in_pcm_frames :: (pSound: *ma_sound) -> ma_uint64 #foreign miniaudio;

ma_sound_get_time_in_milliseconds :: (pSound: *ma_sound) -> ma_uint64 #foreign miniaudio;

ma_sound_set_looping :: (pSound: *ma_sound, isLooping: ma_bool32) -> void #foreign miniaudio;

ma_sound_is_looping :: (pSound: *ma_sound) -> ma_bool32 #foreign miniaudio;

ma_sound_at_end :: (pSound: *ma_sound) -> ma_bool32 #foreign miniaudio;

ma_sound_seek_to_pcm_frame :: (pSound: *ma_sound, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_sound_get_data_format :: (pSound: *ma_sound, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

ma_sound_get_cursor_in_pcm_frames :: (pSound: *ma_sound, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_sound_get_length_in_pcm_frames :: (pSound: *ma_sound, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_sound_get_cursor_in_seconds :: (pSound: *ma_sound, pCursor: *float) -> ma_result #foreign miniaudio;

ma_sound_get_length_in_seconds :: (pSound: *ma_sound, pLength: *float) -> ma_result #foreign miniaudio;

ma_sound_set_end_callback :: (pSound: *ma_sound, callback: ma_sound_end_proc, pUserData: *void) -> ma_result #foreign miniaudio;

ma_sound_group_init :: (pEngine: *ma_engine, flags: ma_uint32, pParentGroup: *ma_sound_group, pGroup: *ma_sound_group) -> ma_result #foreign miniaudio;

ma_sound_group_init_ex :: (pEngine: *ma_engine, pConfig: *ma_sound_group_config, pGroup: *ma_sound_group) -> ma_result #foreign miniaudio;

ma_sound_group_uninit :: (pGroup: *ma_sound_group) -> void #foreign miniaudio;

ma_sound_group_get_engine :: (pGroup: *ma_sound_group) -> *ma_engine #foreign miniaudio;

ma_sound_group_start :: (pGroup: *ma_sound_group) -> ma_result #foreign miniaudio;

ma_sound_group_stop :: (pGroup: *ma_sound_group) -> ma_result #foreign miniaudio;

ma_sound_group_set_volume :: (pGroup: *ma_sound_group, volume: float) -> void #foreign miniaudio;

ma_sound_group_get_volume :: (pGroup: *ma_sound_group) -> float #foreign miniaudio;

ma_sound_group_set_pan :: (pGroup: *ma_sound_group, pan: float) -> void #foreign miniaudio;

ma_sound_group_get_pan :: (pGroup: *ma_sound_group) -> float #foreign miniaudio;

ma_sound_group_set_pan_mode :: (pGroup: *ma_sound_group, panMode: ma_pan_mode) -> void #foreign miniaudio;

ma_sound_group_get_pan_mode :: (pGroup: *ma_sound_group) -> ma_pan_mode #foreign miniaudio;

ma_sound_group_set_pitch :: (pGroup: *ma_sound_group, pitch: float) -> void #foreign miniaudio;

ma_sound_group_get_pitch :: (pGroup: *ma_sound_group) -> float #foreign miniaudio;

ma_sound_group_set_spatialization_enabled :: (pGroup: *ma_sound_group, enabled: ma_bool32) -> void #foreign miniaudio;

ma_sound_group_is_spatialization_enabled :: (pGroup: *ma_sound_group) -> ma_bool32 #foreign miniaudio;

ma_sound_group_set_pinned_listener_index :: (pGroup: *ma_sound_group, listenerIndex: ma_uint32) -> void #foreign miniaudio;

ma_sound_group_get_pinned_listener_index :: (pGroup: *ma_sound_group) -> ma_uint32 #foreign miniaudio;

ma_sound_group_get_listener_index :: (pGroup: *ma_sound_group) -> ma_uint32 #foreign miniaudio;

ma_sound_group_get_direction_to_listener :: (pGroup: *ma_sound_group) -> ma_vec3f #foreign miniaudio;

ma_sound_group_set_position :: (pGroup: *ma_sound_group, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_sound_group_get_position :: (pGroup: *ma_sound_group) -> ma_vec3f #foreign miniaudio;

ma_sound_group_set_direction :: (pGroup: *ma_sound_group, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_sound_group_get_direction :: (pGroup: *ma_sound_group) -> ma_vec3f #foreign miniaudio;

ma_sound_group_set_velocity :: (pGroup: *ma_sound_group, x: float, y: float, z: float) -> void #foreign miniaudio;

ma_sound_group_get_velocity :: (pGroup: *ma_sound_group) -> ma_vec3f #foreign miniaudio;

ma_sound_group_set_attenuation_model :: (pGroup: *ma_sound_group, attenuationModel: ma_attenuation_model) -> void #foreign miniaudio;

ma_sound_group_get_attenuation_model :: (pGroup: *ma_sound_group) -> ma_attenuation_model #foreign miniaudio;

ma_sound_group_set_positioning :: (pGroup: *ma_sound_group, positioning: ma_positioning) -> void #foreign miniaudio;

ma_sound_group_get_positioning :: (pGroup: *ma_sound_group) -> ma_positioning #foreign miniaudio;

ma_sound_group_set_rolloff :: (pGroup: *ma_sound_group, rolloff: float) -> void #foreign miniaudio;

ma_sound_group_get_rolloff :: (pGroup: *ma_sound_group) -> float #foreign miniaudio;

ma_sound_group_set_min_gain :: (pGroup: *ma_sound_group, minGain: float) -> void #foreign miniaudio;

ma_sound_group_get_min_gain :: (pGroup: *ma_sound_group) -> float #foreign miniaudio;

ma_sound_group_set_max_gain :: (pGroup: *ma_sound_group, maxGain: float) -> void #foreign miniaudio;

ma_sound_group_get_max_gain :: (pGroup: *ma_sound_group) -> float #foreign miniaudio;

ma_sound_group_set_min_distance :: (pGroup: *ma_sound_group, minDistance: float) -> void #foreign miniaudio;

ma_sound_group_get_min_distance :: (pGroup: *ma_sound_group) -> float #foreign miniaudio;

ma_sound_group_set_max_distance :: (pGroup: *ma_sound_group, maxDistance: float) -> void #foreign miniaudio;

ma_sound_group_get_max_distance :: (pGroup: *ma_sound_group) -> float #foreign miniaudio;

ma_sound_group_set_cone :: (pGroup: *ma_sound_group, innerAngleInRadians: float, outerAngleInRadians: float, outerGain: float) -> void #foreign miniaudio;

ma_sound_group_get_cone :: (pGroup: *ma_sound_group, pInnerAngleInRadians: *float, pOuterAngleInRadians: *float, pOuterGain: *float) -> void #foreign miniaudio;

ma_sound_group_set_doppler_factor :: (pGroup: *ma_sound_group, dopplerFactor: float) -> void #foreign miniaudio;

ma_sound_group_get_doppler_factor :: (pGroup: *ma_sound_group) -> float #foreign miniaudio;

ma_sound_group_set_directional_attenuation_factor :: (pGroup: *ma_sound_group, directionalAttenuationFactor: float) -> void #foreign miniaudio;

ma_sound_group_get_directional_attenuation_factor :: (pGroup: *ma_sound_group) -> float #foreign miniaudio;

ma_sound_group_set_fade_in_pcm_frames :: (pGroup: *ma_sound_group, volumeBeg: float, volumeEnd: float, fadeLengthInFrames: ma_uint64) -> void #foreign miniaudio;

ma_sound_group_set_fade_in_milliseconds :: (pGroup: *ma_sound_group, volumeBeg: float, volumeEnd: float, fadeLengthInMilliseconds: ma_uint64) -> void #foreign miniaudio;

ma_sound_group_get_current_fade_volume :: (pGroup: *ma_sound_group) -> float #foreign miniaudio;

ma_sound_group_set_start_time_in_pcm_frames :: (pGroup: *ma_sound_group, absoluteGlobalTimeInFrames: ma_uint64) -> void #foreign miniaudio;

ma_sound_group_set_start_time_in_milliseconds :: (pGroup: *ma_sound_group, absoluteGlobalTimeInMilliseconds: ma_uint64) -> void #foreign miniaudio;

ma_sound_group_set_stop_time_in_pcm_frames :: (pGroup: *ma_sound_group, absoluteGlobalTimeInFrames: ma_uint64) -> void #foreign miniaudio;

ma_sound_group_set_stop_time_in_milliseconds :: (pGroup: *ma_sound_group, absoluteGlobalTimeInMilliseconds: ma_uint64) -> void #foreign miniaudio;

ma_sound_group_is_playing :: (pGroup: *ma_sound_group) -> ma_bool32 #foreign miniaudio;

ma_sound_group_get_time_in_pcm_frames :: (pGroup: *ma_sound_group) -> ma_uint64 #foreign miniaudio;

/*
Return Values:
0:  Success
22: EINVAL
34: ERANGE

Not using symbolic constants for errors because I want to avoid #including errno.h

These are marked as no-inline because of some bad code generation by Clang. None of these functions
are used in any performance-critical code within miniaudio.
*/
ma_strcpy_s :: (dst: *u8, dstSizeInBytes: u64, src: *u8) -> s32 #foreign miniaudio;

ma_wcscpy_s :: (dst: *s32, dstCap: u64, src: *s32) -> s32 #foreign miniaudio;

ma_strncpy_s :: (dst: *u8, dstSizeInBytes: u64, src: *u8, count: u64) -> s32 #foreign miniaudio;

ma_strcat_s :: (dst: *u8, dstSizeInBytes: u64, src: *u8) -> s32 #foreign miniaudio;

ma_strncat_s :: (dst: *u8, dstSizeInBytes: u64, src: *u8, count: u64) -> s32 #foreign miniaudio;

ma_itoa_s :: (value: s32, dst: *u8, dstSizeInBytes: u64, radix: s32) -> s32 #foreign miniaudio;

ma_strcmp :: (str1: *u8, str2: *u8) -> s32 #foreign miniaudio;

ma_strappend :: (dst: *u8, dstSize: u64, srcA: *u8, srcB: *u8) -> s32 #foreign miniaudio;

ma_copy_string :: (src: *u8, pAllocationCallbacks: *ma_allocation_callbacks) -> *u8 #foreign miniaudio;

ma_copy_string_w :: (src: *s32, pAllocationCallbacks: *ma_allocation_callbacks) -> *s32 #foreign miniaudio;

ma_fopen :: (ppFile: **FILE, pFilePath: *u8, pOpenMode: *u8) -> ma_result #foreign miniaudio;

ma_wfopen :: (ppFile: **FILE, pFilePath: *s32, pOpenMode: *s32, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_result #foreign miniaudio;

ma_atomic_memory_order :: s32;

ma_atomic_flag :: ma_uint8;

ma_atomic_if32 :: union {
    i: ma_uint32;
    f: float;
}

ma_atomic_if64 :: union {
    i: ma_uint64;
    f: float64;
}

ma_atomic_spinlock :: ma_atomic_flag;

ma_calculate_frame_count_after_resampling :: (sampleRateOut: ma_uint32, sampleRateIn: ma_uint32, frameCountIn: ma_uint64) -> ma_uint64 #foreign miniaudio;

ma_thread_result :: *void;

ma_thread_entry_proc :: #type (pData: *void) -> ma_thread_result #c_call;

ma_thread_proxy_data :: struct {
    entryProc:           ma_thread_entry_proc;
    pData:               *void;
    allocationCallbacks: ma_allocation_callbacks;
}

ma_semaphore_init :: (initialValue: s32, pSemaphore: *ma_semaphore) -> ma_result #foreign miniaudio;

ma_semaphore_uninit :: (pSemaphore: *ma_semaphore) -> void #foreign miniaudio;

ma_semaphore_wait :: (pSemaphore: *ma_semaphore) -> ma_result #foreign miniaudio;

ma_semaphore_release :: (pSemaphore: *ma_semaphore) -> ma_result #foreign miniaudio;

ma_slot_allocator_heap_layout :: struct {
    sizeInBytes:  u64;
    groupsOffset: u64;
    slotsOffset:  u64;
}

ma_job_queue_heap_layout :: struct {
    sizeInBytes:     u64;
    allocatorOffset: u64;
    jobsOffset:      u64;
}

ma_dlopen :: (pLog: *ma_log, filename: *u8) -> ma_handle #foreign miniaudio;

ma_dlclose :: (pLog: *ma_log, handle: ma_handle) -> void #foreign miniaudio;

ma_dlsym :: (pLog: *ma_log, handle: ma_handle, symbol: *u8) -> ma_proc #foreign miniaudio;

ma_device_info_add_native_data_format :: (pDeviceInfo: *ma_device_info, format: ma_format, channels: ma_uint32, sampleRate: ma_uint32, flags: ma_uint32) -> void #foreign miniaudio;

ma_backend_info :: struct {
    backend: ma_backend;
    pName:   *u8;
}

ma_device__on_notification_started :: (pDevice: *ma_device) -> void #foreign miniaudio;

ma_device__on_notification_stopped :: (pDevice: *ma_device) -> void #foreign miniaudio;

ma_device__on_notification_rerouted :: (pDevice: *ma_device) -> void #foreign miniaudio;

ma_device__on_notification_interruption_began :: (pDevice: *ma_device) -> void #foreign miniaudio;

ma_device__on_notification_interruption_ended :: (pDevice: *ma_device) -> void #foreign miniaudio;

ma_get_format_priority_index :: (format: ma_format) -> ma_uint32 #foreign miniaudio;

/* CoreFoundation */
ma_CFStringGetCString_proc :: #type (theString: CFStringRef, buffer: *u8, bufferSize: CFIndex, encoding: CFStringEncoding) -> Boolean #c_call;
ma_CFRelease_proc :: #type (cf: CFTypeRef) -> void #c_call;

ma_AudioObjectGetPropertyData_proc :: #type (inObjectID: AudioObjectID, inAddress: *AudioObjectPropertyAddress, inQualifierDataSize: u32, inQualifierData: *void, ioDataSize: *u32, outData: *void) -> OSStatus #c_call;
ma_AudioObjectGetPropertyDataSize_proc :: #type (inObjectID: AudioObjectID, inAddress: *AudioObjectPropertyAddress, inQualifierDataSize: u32, inQualifierData: *void, outDataSize: *u32) -> OSStatus #c_call;
ma_AudioObjectSetPropertyData_proc :: #type (inObjectID: AudioObjectID, inAddress: *AudioObjectPropertyAddress, inQualifierDataSize: u32, inQualifierData: *void, inDataSize: u32, inData: *void) -> OSStatus #c_call;
ma_AudioObjectAddPropertyListener_proc :: #type (inObjectID: AudioObjectID, inAddress: *AudioObjectPropertyAddress, inListener: AudioObjectPropertyListenerProc, inClientData: *void) -> OSStatus #c_call;
ma_AudioObjectRemovePropertyListener_proc :: #type (inObjectID: AudioObjectID, inAddress: *AudioObjectPropertyAddress, inListener: AudioObjectPropertyListenerProc, inClientData: *void) -> OSStatus #c_call;

/* AudioToolbox */
ma_AudioComponentFindNext_proc :: #type (inComponent: AudioComponent, inDesc: *AudioComponentDescription) -> AudioComponent #c_call;
ma_AudioComponentInstanceDispose_proc :: #type (inInstance: AudioComponentInstance) -> OSStatus #c_call;
ma_AudioComponentInstanceNew_proc :: #type (inComponent: AudioComponent, outInstance: *AudioComponentInstance) -> OSStatus #c_call;
ma_AudioOutputUnitStart_proc :: #type (inUnit: AudioUnit) -> OSStatus #c_call;
ma_AudioOutputUnitStop_proc :: #type (inUnit: AudioUnit) -> OSStatus #c_call;
ma_AudioUnitAddPropertyListener_proc :: #type (inUnit: AudioUnit, inID: AudioUnitPropertyID, inProc: AudioUnitPropertyListenerProc, inProcUserData: *void) -> OSStatus #c_call;
ma_AudioUnitGetPropertyInfo_proc :: #type (inUnit: AudioUnit, inID: AudioUnitPropertyID, inScope: AudioUnitScope, inElement: AudioUnitElement, outDataSize: *u32, outWriteable: *Boolean) -> OSStatus #c_call;
ma_AudioUnitGetProperty_proc :: #type (inUnit: AudioUnit, inID: AudioUnitPropertyID, inScope: AudioUnitScope, inElement: AudioUnitElement, outData: *void, ioDataSize: *u32) -> OSStatus #c_call;
ma_AudioUnitSetProperty_proc :: #type (inUnit: AudioUnit, inID: AudioUnitPropertyID, inScope: AudioUnitScope, inElement: AudioUnitElement, inData: *void, inDataSize: u32) -> OSStatus #c_call;
ma_AudioUnitInitialize_proc :: #type (inUnit: AudioUnit) -> OSStatus #c_call;
ma_AudioUnitRender_proc :: #type (inUnit: AudioUnit, ioActionFlags: *AudioUnitRenderActionFlags, inTimeStamp: *AudioTimeStamp, inOutputBusNumber: u32, inNumberFrames: u32, ioData: *AudioBufferList) -> OSStatus #c_call;

ma_device_init_internal_data__coreaudio :: struct {
    allowNominalSampleRateChange: ma_bool32;

    /* Input. */
    formatIn:                     ma_format;
    channelsIn:                   ma_uint32;
    sampleRateIn:                 ma_uint32;
    channelMapIn:                 [254] ma_channel;
    periodSizeInFramesIn:         ma_uint32;
    periodSizeInMillisecondsIn:   ma_uint32;
    periodsIn:                    ma_uint32;
    shareMode:                    ma_share_mode;
    performanceProfile:           ma_performance_profile;
    registerStopEvent:            ma_bool32;

    deviceObjectID:               AudioObjectID;

    component:                    AudioComponent;
    audioUnit:                    AudioUnit;
    pAudioBufferList:             *AudioBufferList; /* Only used for input devices. */
    formatOut:                    ma_format;
    channelsOut:                  ma_uint32;
    sampleRateOut:                ma_uint32;
    channelMapOut:                [254] ma_channel;
    periodSizeInFramesOut:        ma_uint32;
    periodsOut:                   ma_uint32;
    deviceName:                   [256] u8;
}

/* u8 */
ma_pcm_u8_to_u8 :: (dst: *void, src: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_interleave_u8 :: (dst: *void, src: **void, frameCount: ma_uint64, channels: ma_uint32) -> void #foreign miniaudio;

ma_pcm_deinterleave_u8 :: (dst: **void, src: *void, frameCount: ma_uint64, channels: ma_uint32) -> void #foreign miniaudio;

ma_pcm_s16_to_s16 :: (dst: *void, src: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_interleave_s16 :: (dst: *void, src: **void, frameCount: ma_uint64, channels: ma_uint32) -> void #foreign miniaudio;

ma_pcm_deinterleave_s16 :: (dst: **void, src: *void, frameCount: ma_uint64, channels: ma_uint32) -> void #foreign miniaudio;

ma_pcm_s24_to_s24 :: (dst: *void, src: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_interleave_s24 :: (dst: *void, src: **void, frameCount: ma_uint64, channels: ma_uint32) -> void #foreign miniaudio;

ma_pcm_deinterleave_s24 :: (dst: **void, src: *void, frameCount: ma_uint64, channels: ma_uint32) -> void #foreign miniaudio;

ma_pcm_s32_to_s32 :: (dst: *void, src: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_interleave_s32 :: (dst: *void, src: **void, frameCount: ma_uint64, channels: ma_uint32) -> void #foreign miniaudio;

ma_pcm_deinterleave_s32 :: (dst: **void, src: *void, frameCount: ma_uint64, channels: ma_uint32) -> void #foreign miniaudio;

ma_pcm_f32_to_f32 :: (dst: *void, src: *void, count: ma_uint64, ditherMode: ma_dither_mode) -> void #foreign miniaudio;

ma_pcm_interleave_f32 :: (dst: *void, src: **void, frameCount: ma_uint64, channels: ma_uint32) -> void #foreign miniaudio;

ma_pcm_deinterleave_f32 :: (dst: **void, src: *void, frameCount: ma_uint64, channels: ma_uint32) -> void #foreign miniaudio;

ma_biquad_heap_layout :: struct {
    sizeInBytes: u64;
    r1Offset:    u64;
    r2Offset:    u64;
}

ma_lpf1_heap_layout :: struct {
    sizeInBytes: u64;
    r1Offset:    u64;
}

ma_lpf_heap_layout :: struct {
    sizeInBytes: u64;
    lpf1Offset:  u64;
    lpf2Offset:  u64; /* Offset of the first second order filter. Subsequent filters will come straight after, and will each have the same heap size. */
}

ma_hpf1_heap_layout :: struct {
    sizeInBytes: u64;
    r1Offset:    u64;
}

ma_hpf_heap_layout :: struct {
    sizeInBytes: u64;
    hpf1Offset:  u64;
    hpf2Offset:  u64; /* Offset of the first second order filter. Subsequent filters will come straight after, and will each have the same heap size. */
}

ma_bpf_heap_layout :: struct {
    sizeInBytes: u64;
    bpf2Offset:  u64;
}

ma_gainer_heap_layout :: struct {
    sizeInBytes:    u64;
    oldGainsOffset: u64;
    newGainsOffset: u64;
}

ma_vec3f_init_3f :: (x: float, y: float, z: float) -> ma_vec3f #foreign miniaudio;

ma_vec3f_sub :: (a: ma_vec3f, b: ma_vec3f) -> ma_vec3f #foreign miniaudio;

ma_vec3f_neg :: (a: ma_vec3f) -> ma_vec3f #foreign miniaudio;

ma_vec3f_dot :: (a: ma_vec3f, b: ma_vec3f) -> float #foreign miniaudio;

ma_vec3f_len2 :: (v: ma_vec3f) -> float #foreign miniaudio;

ma_vec3f_len :: (v: ma_vec3f) -> float #foreign miniaudio;

ma_vec3f_dist :: (a: ma_vec3f, b: ma_vec3f) -> float #foreign miniaudio;

ma_vec3f_normalize :: (v: ma_vec3f) -> ma_vec3f #foreign miniaudio;

ma_vec3f_cross :: (a: ma_vec3f, b: ma_vec3f) -> ma_vec3f #foreign miniaudio;

ma_atomic_vec3f_init :: (v: *ma_atomic_vec3f, value: ma_vec3f) -> void #foreign miniaudio;

ma_atomic_vec3f_set :: (v: *ma_atomic_vec3f, value: ma_vec3f) -> void #foreign miniaudio;

ma_atomic_vec3f_get :: (v: *ma_atomic_vec3f) -> ma_vec3f #foreign miniaudio;

ma_spatializer_listener_heap_layout :: struct {
    sizeInBytes:         u64;
    channelMapOutOffset: u64;
}

ma_spatializer_heap_layout :: struct {
    sizeInBytes:           u64;
    channelMapInOffset:    u64;
    newChannelGainsOffset: u64;
    gainerOffset:          u64;
}

ma_linear_resampler_heap_layout :: struct {
    sizeInBytes: u64;
    x0Offset:    u64;
    x1Offset:    u64;
    lpfOffset:   u64;
}

ma_channel_converter_heap_layout :: struct {
    sizeInBytes:         u64;
    channelMapInOffset:  u64;
    channelMapOutOffset: u64;
    shuffleTableOffset:  u64;
    weightsOffset:       u64;
}

ma_data_converter_heap_layout :: struct {
    sizeInBytes:            u64;
    channelConverterOffset: u64;
    resamplerOffset:        u64;
}

fileno :: (stream: *FILE) -> s32 #foreign miniaudio;

ma_vfs_or_default_open :: (pVFS: *ma_vfs, pFilePath: *u8, openMode: ma_uint32, pFile: *ma_vfs_file) -> ma_result #foreign miniaudio;

ma_vfs_or_default_open_w :: (pVFS: *ma_vfs, pFilePath: *s32, openMode: ma_uint32, pFile: *ma_vfs_file) -> ma_result #foreign miniaudio;

ma_vfs_or_default_close :: (pVFS: *ma_vfs, file: ma_vfs_file) -> ma_result #foreign miniaudio;

ma_vfs_or_default_read :: (pVFS: *ma_vfs, file: ma_vfs_file, pDst: *void, sizeInBytes: u64, pBytesRead: *u64) -> ma_result #foreign miniaudio;

ma_vfs_or_default_write :: (pVFS: *ma_vfs, file: ma_vfs_file, pSrc: *void, sizeInBytes: u64, pBytesWritten: *u64) -> ma_result #foreign miniaudio;

ma_vfs_or_default_seek :: (pVFS: *ma_vfs, file: ma_vfs_file, offset: ma_int64, origin: ma_seek_origin) -> ma_result #foreign miniaudio;

ma_vfs_or_default_tell :: (pVFS: *ma_vfs, file: ma_vfs_file, pCursor: *ma_int64) -> ma_result #foreign miniaudio;

ma_vfs_or_default_info :: (pVFS: *ma_vfs, file: ma_vfs_file, pInfo: *ma_file_info) -> ma_result #foreign miniaudio;

ma_vfs_open_and_read_file_w :: (pVFS: *ma_vfs, pFilePath: *s32, ppData: **void, pSize: *u64, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_result #foreign miniaudio;

ma_dr_wav_version :: (pMajor: *ma_uint32, pMinor: *ma_uint32, pRevision: *ma_uint32) -> void #foreign miniaudio;

ma_dr_wav_version_string :: () -> *u8 #foreign miniaudio;

ma_dr_wav_seek_origin :: enum u32 {
    start   :: 0;
    current :: 1;
}

ma_dr_wav_container :: enum u32 {
    riff :: 0;
    rifx :: 1;
    w64  :: 2;
    rf64 :: 3;
    aiff :: 4;
}

ma_dr_wav_chunk_header :: struct {
    id:          union {
        fourcc: [4] ma_uint8;
        guid:   [16] ma_uint8;
    };

    sizeInBytes: ma_uint64;
    paddingSize: u32;
}

ma_dr_wav_fmt :: struct {
    formatTag:          ma_uint16;
    channels:           ma_uint16;
    sampleRate:         ma_uint32;
    avgBytesPerSec:     ma_uint32;
    blockAlign:         ma_uint16;
    bitsPerSample:      ma_uint16;
    extendedSize:       ma_uint16;
    validBitsPerSample: ma_uint16;
    channelMask:        ma_uint32;
    subFormat:          [16] ma_uint8;
}

ma_dr_wav_fmt_get_format :: (pFMT: *ma_dr_wav_fmt) -> ma_uint16 #foreign miniaudio;

ma_dr_wav_read_proc :: #type (pUserData: *void, pBufferOut: *void, bytesToRead: u64) -> u64 #c_call;
ma_dr_wav_write_proc :: #type (pUserData: *void, pData: *void, bytesToWrite: u64) -> u64 #c_call;
ma_dr_wav_seek_proc :: #type (pUserData: *void, offset: s32, origin: ma_dr_wav_seek_origin) -> ma_bool32 #c_call;
ma_dr_wav_chunk_proc :: #type (pChunkUserData: *void, onRead: ma_dr_wav_read_proc, onSeek: ma_dr_wav_seek_proc, pReadSeekUserData: *void, pChunkHeader: *ma_dr_wav_chunk_header, container: ma_dr_wav_container, pFMT: *ma_dr_wav_fmt) -> ma_uint64 #c_call;
ma_dr_wav__memory_stream :: struct {
    data:           *ma_uint8;
    dataSize:       u64;
    currentReadPos: u64;
}

ma_dr_wav__memory_stream_write :: struct {
    ppData:          **void;
    pDataSize:       *u64;
    dataSize:        u64;
    dataCapacity:    u64;
    currentWritePos: u64;
}

ma_dr_wav_data_format :: struct {
    container:     ma_dr_wav_container;
    format:        ma_uint32;
    channels:      ma_uint32;
    sampleRate:    ma_uint32;
    bitsPerSample: ma_uint32;
}

ma_dr_wav_metadata_type :: enum s32 {
    none                     :: 0;
    unknown                  :: 1;
    smpl                     :: 2;
    inst                     :: 4;
    cue                      :: 8;
    acid                     :: 16;
    bext                     :: 32;
    list_label               :: 64;
    list_note                :: 128;
    list_labelled_cue_region :: 256;
    list_info_software       :: 512;
    list_info_copyright      :: 1024;
    list_info_title          :: 2048;
    list_info_artist         :: 4096;
    list_info_comment        :: 8192;
    list_info_date           :: 16384;
    list_info_genre          :: 32768;
    list_info_album          :: 65536;
    list_info_tracknumber    :: 131072;
    list_all_info_strings    :: 261632;

    list_all_adtl            :: 448;

    all                      :: -2;
    all_including_unknown    :: -1;
}

ma_dr_wav_smpl_loop_type :: enum u32 {
    forward  :: 0;
    pingpong :: 1;
    backward :: 2;
}

ma_dr_wav_smpl_loop :: struct {
    cuePointId:            ma_uint32;
    type:                  ma_uint32;
    firstSampleByteOffset: ma_uint32;
    lastSampleByteOffset:  ma_uint32;
    sampleFraction:        ma_uint32;
    playCount:             ma_uint32;
}

ma_dr_wav_smpl :: struct {
    manufacturerId:                 ma_uint32;
    productId:                      ma_uint32;
    samplePeriodNanoseconds:        ma_uint32;
    midiUnityNote:                  ma_uint32;
    midiPitchFraction:              ma_uint32;
    smpteFormat:                    ma_uint32;
    smpteOffset:                    ma_uint32;
    sampleLoopCount:                ma_uint32;
    samplerSpecificDataSizeInBytes: ma_uint32;
    pLoops:                         *ma_dr_wav_smpl_loop;
    pSamplerSpecificData:           *ma_uint8;
}

ma_dr_wav_inst :: struct {
    midiUnityNote: ma_int8;
    fineTuneCents: ma_int8;
    gainDecibels:  ma_int8;
    lowNote:       ma_int8;
    highNote:      ma_int8;
    lowVelocity:   ma_int8;
    highVelocity:  ma_int8;
}

ma_dr_wav_cue_point :: struct {
    id:                ma_uint32;
    playOrderPosition: ma_uint32;
    dataChunkId:       [4] ma_uint8;
    chunkStart:        ma_uint32;
    blockStart:        ma_uint32;
    sampleByteOffset:  ma_uint32;
}

ma_dr_wav_cue :: struct {
    cuePointCount: ma_uint32;
    pCuePoints:    *ma_dr_wav_cue_point;
}

ma_dr_wav_acid_flag :: enum u32 {
    one_shot      :: 1;
    root_note_set :: 2;
    stretch       :: 4;
    disk_based    :: 8;
    acidizer      :: 16;
}

ma_dr_wav_acid :: struct {
    flags:            ma_uint32;
    midiUnityNote:    ma_uint16;
    reserved1:        ma_uint16;
    reserved2:        float;
    numBeats:         ma_uint32;
    meterDenominator: ma_uint16;
    meterNumerator:   ma_uint16;
    tempo:            float;
}

ma_dr_wav_list_label_or_note :: struct {
    cuePointId:   ma_uint32;
    stringLength: ma_uint32;
    pString:      *u8;
}

ma_dr_wav_bext :: struct {
    pDescription:         *u8;
    pOriginatorName:      *u8;
    pOriginatorReference: *u8;
    pOriginationDate:     [10] u8;
    pOriginationTime:     [8] u8;
    timeReference:        ma_uint64;
    version:              ma_uint16;
    pCodingHistory:       *u8;
    codingHistorySize:    ma_uint32;
    pUMID:                *ma_uint8;
    loudnessValue:        ma_uint16;
    loudnessRange:        ma_uint16;
    maxTruePeakLevel:     ma_uint16;
    maxMomentaryLoudness: ma_uint16;
    maxShortTermLoudness: ma_uint16;
}

ma_dr_wav_list_info_text :: struct {
    stringLength: ma_uint32;
    pString:      *u8;
}

ma_dr_wav_list_labelled_cue_region :: struct {
    cuePointId:   ma_uint32;
    sampleLength: ma_uint32;
    purposeId:    [4] ma_uint8;
    country:      ma_uint16;
    language:     ma_uint16;
    dialect:      ma_uint16;
    codePage:     ma_uint16;
    stringLength: ma_uint32;
    pString:      *u8;
}

ma_dr_wav_metadata_location :: enum u32 {
    invalid          :: 0;
    top_level        :: 1;
    inside_info_list :: 2;
    inside_adtl_list :: 3;
}

ma_dr_wav_unknown_metadata :: struct {
    id:              [4] ma_uint8;
    chunkLocation:   ma_dr_wav_metadata_location;
    dataSizeInBytes: ma_uint32;
    pData:           *ma_uint8;
}

ma_dr_wav_metadata :: struct {
    type: ma_dr_wav_metadata_type;
    data: union {
        cue:               ma_dr_wav_cue;
        smpl:              ma_dr_wav_smpl;
        acid:              ma_dr_wav_acid;
        inst:              ma_dr_wav_inst;
        bext:              ma_dr_wav_bext;
        labelOrNote:       ma_dr_wav_list_label_or_note;
        labelledCueRegion: ma_dr_wav_list_labelled_cue_region;
        infoText:          ma_dr_wav_list_info_text;
        unknown:           ma_dr_wav_unknown_metadata;
    };
}

ma_dr_wav :: struct {
    onRead:                       ma_dr_wav_read_proc;
    onWrite:                      ma_dr_wav_write_proc;
    onSeek:                       ma_dr_wav_seek_proc;
    pUserData:                    *void;
    allocationCallbacks:          ma_allocation_callbacks;
    container:                    ma_dr_wav_container;
    fmt:                          ma_dr_wav_fmt;
    sampleRate:                   ma_uint32;
    channels:                     ma_uint16;
    bitsPerSample:                ma_uint16;
    translatedFormatTag:          ma_uint16;
    totalPCMFrameCount:           ma_uint64;
    dataChunkDataSize:            ma_uint64;
    dataChunkDataPos:             ma_uint64;
    bytesRemaining:               ma_uint64;
    readCursorInPCMFrames:        ma_uint64;
    dataChunkDataSizeTargetWrite: ma_uint64;
    isSequentialWrite:            ma_bool32;
    pMetadata:                    *ma_dr_wav_metadata;
    metadataCount:                ma_uint32;
    memoryStream:                 ma_dr_wav__memory_stream;
    memoryStreamWrite:            ma_dr_wav__memory_stream_write;
    msadpcm:                      struct {
        bytesRemainingInBlock: ma_uint32;
        predictor:             [2] ma_uint16;
        delta:                 [2] ma_int32;
        cachedFrames:          [4] ma_int32;
        cachedFrameCount:      ma_uint32;
        prevFrames:            [2] [2] ma_int32;
    };

    ima:                          struct {
        bytesRemainingInBlock: ma_uint32;
        predictor:             [2] ma_int32;
        stepIndex:             [2] ma_int32;
        cachedFrames:          [16] ma_int32;
        cachedFrameCount:      ma_uint32;
    };

    aiff:                         struct {
        isLE:       ma_bool8;
        isUnsigned: ma_bool8;
    };
}

ma_dr_wav_init :: (pWav: *ma_dr_wav, onRead: ma_dr_wav_read_proc, onSeek: ma_dr_wav_seek_proc, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_ex :: (pWav: *ma_dr_wav, onRead: ma_dr_wav_read_proc, onSeek: ma_dr_wav_seek_proc, onChunk: ma_dr_wav_chunk_proc, pReadSeekUserData: *void, pChunkUserData: *void, flags: ma_uint32, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_with_metadata :: (pWav: *ma_dr_wav, onRead: ma_dr_wav_read_proc, onSeek: ma_dr_wav_seek_proc, pUserData: *void, flags: ma_uint32, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_write :: (pWav: *ma_dr_wav, pFormat: *ma_dr_wav_data_format, onWrite: ma_dr_wav_write_proc, onSeek: ma_dr_wav_seek_proc, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_write_sequential :: (pWav: *ma_dr_wav, pFormat: *ma_dr_wav_data_format, totalSampleCount: ma_uint64, onWrite: ma_dr_wav_write_proc, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_write_sequential_pcm_frames :: (pWav: *ma_dr_wav, pFormat: *ma_dr_wav_data_format, totalPCMFrameCount: ma_uint64, onWrite: ma_dr_wav_write_proc, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_write_with_metadata :: (pWav: *ma_dr_wav, pFormat: *ma_dr_wav_data_format, onWrite: ma_dr_wav_write_proc, onSeek: ma_dr_wav_seek_proc, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks, pMetadata: *ma_dr_wav_metadata, metadataCount: ma_uint32) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_target_write_size_bytes :: (pFormat: *ma_dr_wav_data_format, totalFrameCount: ma_uint64, pMetadata: *ma_dr_wav_metadata, metadataCount: ma_uint32) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_take_ownership_of_metadata :: (pWav: *ma_dr_wav) -> *ma_dr_wav_metadata #foreign miniaudio;

ma_dr_wav_uninit :: (pWav: *ma_dr_wav) -> ma_result #foreign miniaudio;

ma_dr_wav_read_raw :: (pWav: *ma_dr_wav, bytesToRead: u64, pBufferOut: *void) -> u64 #foreign miniaudio;

ma_dr_wav_read_pcm_frames :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *void) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_read_pcm_frames_le :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *void) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_read_pcm_frames_be :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *void) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_seek_to_pcm_frame :: (pWav: *ma_dr_wav, targetFrameIndex: ma_uint64) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_get_cursor_in_pcm_frames :: (pWav: *ma_dr_wav, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_dr_wav_get_length_in_pcm_frames :: (pWav: *ma_dr_wav, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_dr_wav_write_raw :: (pWav: *ma_dr_wav, bytesToWrite: u64, pData: *void) -> u64 #foreign miniaudio;

ma_dr_wav_write_pcm_frames :: (pWav: *ma_dr_wav, framesToWrite: ma_uint64, pData: *void) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_write_pcm_frames_le :: (pWav: *ma_dr_wav, framesToWrite: ma_uint64, pData: *void) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_write_pcm_frames_be :: (pWav: *ma_dr_wav, framesToWrite: ma_uint64, pData: *void) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_read_pcm_frames_s16 :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *ma_int16) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_read_pcm_frames_s16le :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *ma_int16) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_read_pcm_frames_s16be :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *ma_int16) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_u8_to_s16 :: (pOut: *ma_int16, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_s24_to_s16 :: (pOut: *ma_int16, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_s32_to_s16 :: (pOut: *ma_int16, pIn: *ma_int32, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_f32_to_s16 :: (pOut: *ma_int16, pIn: *float, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_f64_to_s16 :: (pOut: *ma_int16, pIn: *float64, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_alaw_to_s16 :: (pOut: *ma_int16, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_mulaw_to_s16 :: (pOut: *ma_int16, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_read_pcm_frames_f32 :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *float) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_read_pcm_frames_f32le :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *float) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_read_pcm_frames_f32be :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *float) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_u8_to_f32 :: (pOut: *float, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_s16_to_f32 :: (pOut: *float, pIn: *ma_int16, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_s24_to_f32 :: (pOut: *float, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_s32_to_f32 :: (pOut: *float, pIn: *ma_int32, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_f64_to_f32 :: (pOut: *float, pIn: *float64, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_alaw_to_f32 :: (pOut: *float, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_mulaw_to_f32 :: (pOut: *float, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_read_pcm_frames_s32 :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *ma_int32) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_read_pcm_frames_s32le :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *ma_int32) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_read_pcm_frames_s32be :: (pWav: *ma_dr_wav, framesToRead: ma_uint64, pBufferOut: *ma_int32) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_u8_to_s32 :: (pOut: *ma_int32, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_s16_to_s32 :: (pOut: *ma_int32, pIn: *ma_int16, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_s24_to_s32 :: (pOut: *ma_int32, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_f32_to_s32 :: (pOut: *ma_int32, pIn: *float, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_f64_to_s32 :: (pOut: *ma_int32, pIn: *float64, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_alaw_to_s32 :: (pOut: *ma_int32, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_mulaw_to_s32 :: (pOut: *ma_int32, pIn: *ma_uint8, sampleCount: u64) -> void #foreign miniaudio;

ma_dr_wav_init_file :: (pWav: *ma_dr_wav, filename: *u8, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_file_ex :: (pWav: *ma_dr_wav, filename: *u8, onChunk: ma_dr_wav_chunk_proc, pChunkUserData: *void, flags: ma_uint32, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_file_w :: (pWav: *ma_dr_wav, filename: *s32, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_file_ex_w :: (pWav: *ma_dr_wav, filename: *s32, onChunk: ma_dr_wav_chunk_proc, pChunkUserData: *void, flags: ma_uint32, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_file_with_metadata :: (pWav: *ma_dr_wav, filename: *u8, flags: ma_uint32, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_file_with_metadata_w :: (pWav: *ma_dr_wav, filename: *s32, flags: ma_uint32, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_file_write :: (pWav: *ma_dr_wav, filename: *u8, pFormat: *ma_dr_wav_data_format, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_file_write_sequential :: (pWav: *ma_dr_wav, filename: *u8, pFormat: *ma_dr_wav_data_format, totalSampleCount: ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_file_write_sequential_pcm_frames :: (pWav: *ma_dr_wav, filename: *u8, pFormat: *ma_dr_wav_data_format, totalPCMFrameCount: ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_file_write_w :: (pWav: *ma_dr_wav, filename: *s32, pFormat: *ma_dr_wav_data_format, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_file_write_sequential_w :: (pWav: *ma_dr_wav, filename: *s32, pFormat: *ma_dr_wav_data_format, totalSampleCount: ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_file_write_sequential_pcm_frames_w :: (pWav: *ma_dr_wav, filename: *s32, pFormat: *ma_dr_wav_data_format, totalPCMFrameCount: ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_memory :: (pWav: *ma_dr_wav, data: *void, dataSize: u64, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_memory_ex :: (pWav: *ma_dr_wav, data: *void, dataSize: u64, onChunk: ma_dr_wav_chunk_proc, pChunkUserData: *void, flags: ma_uint32, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_memory_with_metadata :: (pWav: *ma_dr_wav, data: *void, dataSize: u64, flags: ma_uint32, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_memory_write :: (pWav: *ma_dr_wav, ppData: **void, pDataSize: *u64, pFormat: *ma_dr_wav_data_format, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_memory_write_sequential :: (pWav: *ma_dr_wav, ppData: **void, pDataSize: *u64, pFormat: *ma_dr_wav_data_format, totalSampleCount: ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_init_memory_write_sequential_pcm_frames :: (pWav: *ma_dr_wav, ppData: **void, pDataSize: *u64, pFormat: *ma_dr_wav_data_format, totalPCMFrameCount: ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_open_and_read_pcm_frames_s16 :: (onRead: ma_dr_wav_read_proc, onSeek: ma_dr_wav_seek_proc, pUserData: *void, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int16 #foreign miniaudio;

ma_dr_wav_open_and_read_pcm_frames_f32 :: (onRead: ma_dr_wav_read_proc, onSeek: ma_dr_wav_seek_proc, pUserData: *void, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *float #foreign miniaudio;

ma_dr_wav_open_and_read_pcm_frames_s32 :: (onRead: ma_dr_wav_read_proc, onSeek: ma_dr_wav_seek_proc, pUserData: *void, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int32 #foreign miniaudio;

ma_dr_wav_open_file_and_read_pcm_frames_s16 :: (filename: *u8, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int16 #foreign miniaudio;

ma_dr_wav_open_file_and_read_pcm_frames_f32 :: (filename: *u8, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *float #foreign miniaudio;

ma_dr_wav_open_file_and_read_pcm_frames_s32 :: (filename: *u8, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int32 #foreign miniaudio;

ma_dr_wav_open_file_and_read_pcm_frames_s16_w :: (filename: *s32, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int16 #foreign miniaudio;

ma_dr_wav_open_file_and_read_pcm_frames_f32_w :: (filename: *s32, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *float #foreign miniaudio;

ma_dr_wav_open_file_and_read_pcm_frames_s32_w :: (filename: *s32, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int32 #foreign miniaudio;

ma_dr_wav_open_memory_and_read_pcm_frames_s16 :: (data: *void, dataSize: u64, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int16 #foreign miniaudio;

ma_dr_wav_open_memory_and_read_pcm_frames_f32 :: (data: *void, dataSize: u64, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *float #foreign miniaudio;

ma_dr_wav_open_memory_and_read_pcm_frames_s32 :: (data: *void, dataSize: u64, channelsOut: *u32, sampleRateOut: *u32, totalFrameCountOut: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int32 #foreign miniaudio;

ma_dr_wav_free :: (p: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_dr_wav_bytes_to_u16 :: (data: *ma_uint8) -> ma_uint16 #foreign miniaudio;

ma_dr_wav_bytes_to_s16 :: (data: *ma_uint8) -> ma_int16 #foreign miniaudio;

ma_dr_wav_bytes_to_u32 :: (data: *ma_uint8) -> ma_uint32 #foreign miniaudio;

ma_dr_wav_bytes_to_s32 :: (data: *ma_uint8) -> ma_int32 #foreign miniaudio;

ma_dr_wav_bytes_to_u64 :: (data: *ma_uint8) -> ma_uint64 #foreign miniaudio;

ma_dr_wav_bytes_to_s64 :: (data: *ma_uint8) -> ma_int64 #foreign miniaudio;

ma_dr_wav_bytes_to_f32 :: (data: *ma_uint8) -> float #foreign miniaudio;

ma_dr_wav_guid_equal :: (a: *[16] ma_uint8, b: *[16] ma_uint8) -> ma_bool32 #foreign miniaudio;

ma_dr_wav_fourcc_equal :: (a: *ma_uint8, b: *u8) -> ma_bool32 #foreign miniaudio;

ma_dr_flac_version :: (pMajor: *ma_uint32, pMinor: *ma_uint32, pRevision: *ma_uint32) -> void #foreign miniaudio;

ma_dr_flac_version_string :: () -> *u8 #foreign miniaudio;

ma_dr_flac_cache_t :: ma_uint64;

ma_dr_flac_container :: enum u32 {
    native  :: 0;
    ogg     :: 1;
    unknown :: 2;
}

ma_dr_flac_seek_origin :: enum u32 {
    start   :: 0;
    current :: 1;
}

ma_dr_flac_seekpoint :: struct {
    firstPCMFrame:   ma_uint64;
    flacFrameOffset: ma_uint64;
    pcmFrameCount:   ma_uint16;
}

ma_dr_flac_streaminfo :: struct {
    minBlockSizeInPCMFrames: ma_uint16;
    maxBlockSizeInPCMFrames: ma_uint16;
    minFrameSizeInPCMFrames: ma_uint32;
    maxFrameSizeInPCMFrames: ma_uint32;
    sampleRate:              ma_uint32;
    channels:                ma_uint8;
    bitsPerSample:           ma_uint8;
    totalPCMFrameCount:      ma_uint64;
    md5:                     [16] ma_uint8;
}

ma_dr_flac_metadata :: struct {
    type:        ma_uint32;
    pRawData:    *void;
    rawDataSize: ma_uint32;
    data:        union {
        streaminfo:     ma_dr_flac_streaminfo;
        padding:        struct {
            unused: s32;
        };

        application:    struct {
            id:       ma_uint32;
            pData:    *void;
            dataSize: ma_uint32;
        };

        seektable:      struct {
            seekpointCount: ma_uint32;
            pSeekpoints:    *ma_dr_flac_seekpoint;
        };

        vorbis_comment: struct {
            vendorLength: ma_uint32;
            vendor:       *u8;
            commentCount: ma_uint32;
            pComments:    *void;
        };

        cuesheet:       struct {
            catalog:           [128] u8;
            leadInSampleCount: ma_uint64;
            isCD:              ma_bool32;
            trackCount:        ma_uint8;
            pTrackData:        *void;
        };

        picture:        struct {
            type:              ma_uint32;
            mimeLength:        ma_uint32;
            mime:              *u8;
            descriptionLength: ma_uint32;
            description:       *u8;
            width:             ma_uint32;
            height:            ma_uint32;
            colorDepth:        ma_uint32;
            indexColorCount:   ma_uint32;
            pictureDataSize:   ma_uint32;
            pPictureData:      *ma_uint8;
        };
    };
}

ma_dr_flac_read_proc :: #type (pUserData: *void, pBufferOut: *void, bytesToRead: u64) -> u64 #c_call;
ma_dr_flac_seek_proc :: #type (pUserData: *void, offset: s32, origin: ma_dr_flac_seek_origin) -> ma_bool32 #c_call;
ma_dr_flac_meta_proc :: #type (pUserData: *void, pMetadata: *ma_dr_flac_metadata) -> void #c_call;
ma_dr_flac__memory_stream :: struct {
    data:           *ma_uint8;
    dataSize:       u64;
    currentReadPos: u64;
}

ma_dr_flac_bs :: struct {
    onRead:                 ma_dr_flac_read_proc;
    onSeek:                 ma_dr_flac_seek_proc;
    pUserData:              *void;
    unalignedByteCount:     u64;
    unalignedCache:         ma_dr_flac_cache_t;
    nextL2Line:             ma_uint32;
    consumedBits:           ma_uint32;
    cacheL2:                [512] ma_dr_flac_cache_t;
    cache:                  ma_dr_flac_cache_t;
    crc16:                  ma_uint16;
    crc16Cache:             ma_dr_flac_cache_t;
    crc16CacheIgnoredBytes: ma_uint32;
}

ma_dr_flac_subframe :: struct {
    subframeType:        ma_uint8;
    wastedBitsPerSample: ma_uint8;
    lpcOrder:            ma_uint8;
    pSamplesS32:         *ma_int32;
}

ma_dr_flac_frame_header :: struct {
    pcmFrameNumber:       ma_uint64;
    flacFrameNumber:      ma_uint32;
    sampleRate:           ma_uint32;
    blockSizeInPCMFrames: ma_uint16;
    channelAssignment:    ma_uint8;
    bitsPerSample:        ma_uint8;
    crc8:                 ma_uint8;
}

ma_dr_flac_frame :: struct {
    header:             ma_dr_flac_frame_header;
    pcmFramesRemaining: ma_uint32;
    subframes:          [8] ma_dr_flac_subframe;
}

ma_dr_flac :: struct {
    onMeta:                   ma_dr_flac_meta_proc;
    pUserDataMD:              *void;
    allocationCallbacks:      ma_allocation_callbacks;
    sampleRate:               ma_uint32;
    channels:                 ma_uint8;
    bitsPerSample:            ma_uint8;
    maxBlockSizeInPCMFrames:  ma_uint16;
    totalPCMFrameCount:       ma_uint64;
    container:                ma_dr_flac_container;
    seekpointCount:           ma_uint32;
    currentFLACFrame:         ma_dr_flac_frame;
    currentPCMFrame:          ma_uint64;
    firstFLACFramePosInBytes: ma_uint64;
    memoryStream:             ma_dr_flac__memory_stream;
    pDecodedSamples:          *ma_int32;
    pSeekpoints:              *ma_dr_flac_seekpoint;
    _oggbs:                   *void;
    __bitfield:               u8;
    /* 
        _noSeekTableSeek: ma_bool32; /* 1 bits */
        _noBinarySearchSeek: ma_bool32; /* 1 bits */
        _noBruteForceSeek: ma_bool32; /* 1 bits */;
    */

    bs:                       ma_dr_flac_bs;
    pExtraData:               [1] ma_uint8;
}

ma_dr_flac_open :: (onRead: ma_dr_flac_read_proc, onSeek: ma_dr_flac_seek_proc, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_dr_flac #foreign miniaudio;

ma_dr_flac_open_relaxed :: (onRead: ma_dr_flac_read_proc, onSeek: ma_dr_flac_seek_proc, container: ma_dr_flac_container, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_dr_flac #foreign miniaudio;

ma_dr_flac_open_with_metadata :: (onRead: ma_dr_flac_read_proc, onSeek: ma_dr_flac_seek_proc, onMeta: ma_dr_flac_meta_proc, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_dr_flac #foreign miniaudio;

ma_dr_flac_open_with_metadata_relaxed :: (onRead: ma_dr_flac_read_proc, onSeek: ma_dr_flac_seek_proc, onMeta: ma_dr_flac_meta_proc, container: ma_dr_flac_container, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_dr_flac #foreign miniaudio;

ma_dr_flac_close :: (pFlac: *ma_dr_flac) -> void #foreign miniaudio;

ma_dr_flac_read_pcm_frames_s32 :: (pFlac: *ma_dr_flac, framesToRead: ma_uint64, pBufferOut: *ma_int32) -> ma_uint64 #foreign miniaudio;

ma_dr_flac_read_pcm_frames_s16 :: (pFlac: *ma_dr_flac, framesToRead: ma_uint64, pBufferOut: *ma_int16) -> ma_uint64 #foreign miniaudio;

ma_dr_flac_read_pcm_frames_f32 :: (pFlac: *ma_dr_flac, framesToRead: ma_uint64, pBufferOut: *float) -> ma_uint64 #foreign miniaudio;

ma_dr_flac_seek_to_pcm_frame :: (pFlac: *ma_dr_flac, pcmFrameIndex: ma_uint64) -> ma_bool32 #foreign miniaudio;

ma_dr_flac_open_file :: (pFileName: *u8, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_dr_flac #foreign miniaudio;

ma_dr_flac_open_file_w :: (pFileName: *s32, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_dr_flac #foreign miniaudio;

ma_dr_flac_open_file_with_metadata :: (pFileName: *u8, onMeta: ma_dr_flac_meta_proc, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_dr_flac #foreign miniaudio;

ma_dr_flac_open_file_with_metadata_w :: (pFileName: *s32, onMeta: ma_dr_flac_meta_proc, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_dr_flac #foreign miniaudio;

ma_dr_flac_open_memory :: (pData: *void, dataSize: u64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_dr_flac #foreign miniaudio;

ma_dr_flac_open_memory_with_metadata :: (pData: *void, dataSize: u64, onMeta: ma_dr_flac_meta_proc, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_dr_flac #foreign miniaudio;

ma_dr_flac_open_and_read_pcm_frames_s32 :: (onRead: ma_dr_flac_read_proc, onSeek: ma_dr_flac_seek_proc, pUserData: *void, channels: *u32, sampleRate: *u32, totalPCMFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int32 #foreign miniaudio;

ma_dr_flac_open_and_read_pcm_frames_s16 :: (onRead: ma_dr_flac_read_proc, onSeek: ma_dr_flac_seek_proc, pUserData: *void, channels: *u32, sampleRate: *u32, totalPCMFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int16 #foreign miniaudio;

ma_dr_flac_open_and_read_pcm_frames_f32 :: (onRead: ma_dr_flac_read_proc, onSeek: ma_dr_flac_seek_proc, pUserData: *void, channels: *u32, sampleRate: *u32, totalPCMFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *float #foreign miniaudio;

ma_dr_flac_open_file_and_read_pcm_frames_s32 :: (filename: *u8, channels: *u32, sampleRate: *u32, totalPCMFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int32 #foreign miniaudio;

ma_dr_flac_open_file_and_read_pcm_frames_s16 :: (filename: *u8, channels: *u32, sampleRate: *u32, totalPCMFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int16 #foreign miniaudio;

ma_dr_flac_open_file_and_read_pcm_frames_f32 :: (filename: *u8, channels: *u32, sampleRate: *u32, totalPCMFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *float #foreign miniaudio;

ma_dr_flac_open_memory_and_read_pcm_frames_s32 :: (data: *void, dataSize: u64, channels: *u32, sampleRate: *u32, totalPCMFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int32 #foreign miniaudio;

ma_dr_flac_open_memory_and_read_pcm_frames_s16 :: (data: *void, dataSize: u64, channels: *u32, sampleRate: *u32, totalPCMFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int16 #foreign miniaudio;

ma_dr_flac_open_memory_and_read_pcm_frames_f32 :: (data: *void, dataSize: u64, channels: *u32, sampleRate: *u32, totalPCMFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *float #foreign miniaudio;

ma_dr_flac_free :: (p: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_dr_flac_vorbis_comment_iterator :: struct {
    countRemaining: ma_uint32;
    pRunningData:   *u8;
}

ma_dr_flac_init_vorbis_comment_iterator :: (pIter: *ma_dr_flac_vorbis_comment_iterator, commentCount: ma_uint32, pComments: *void) -> void #foreign miniaudio;

ma_dr_flac_next_vorbis_comment :: (pIter: *ma_dr_flac_vorbis_comment_iterator, pCommentLengthOut: *ma_uint32) -> *u8 #foreign miniaudio;

ma_dr_flac_cuesheet_track_iterator :: struct {
    countRemaining: ma_uint32;
    pRunningData:   *u8;
}

ma_dr_flac_cuesheet_track_index :: struct {
    offset:   ma_uint64;
    index:    ma_uint8;
    reserved: [3] ma_uint8;
}

ma_dr_flac_cuesheet_track :: struct {
    offset:       ma_uint64;
    trackNumber:  ma_uint8;
    ISRC:         [12] u8;
    isAudio:      ma_bool8;
    preEmphasis:  ma_bool8;
    indexCount:   ma_uint8;
    pIndexPoints: *ma_dr_flac_cuesheet_track_index;
}

ma_dr_flac_init_cuesheet_track_iterator :: (pIter: *ma_dr_flac_cuesheet_track_iterator, trackCount: ma_uint32, pTrackData: *void) -> void #foreign miniaudio;

ma_dr_flac_next_cuesheet_track :: (pIter: *ma_dr_flac_cuesheet_track_iterator, pCuesheetTrack: *ma_dr_flac_cuesheet_track) -> ma_bool32 #foreign miniaudio;

ma_dr_mp3_version :: (pMajor: *ma_uint32, pMinor: *ma_uint32, pRevision: *ma_uint32) -> void #foreign miniaudio;

ma_dr_mp3_version_string :: () -> *u8 #foreign miniaudio;

ma_dr_mp3dec_frame_info :: struct {
    frame_bytes:  s32;
    channels:     s32;
    hz:           s32;
    layer:        s32;
    bitrate_kbps: s32;
}

ma_dr_mp3dec :: struct {
    mdct_overlap:      [2] [288] float;
    qmf_state:         [960] float;
    reserv:            s32;
    free_format_bytes: s32;
    header:            [4] ma_uint8;
    reserv_buf:        [511] ma_uint8;
}

ma_dr_mp3dec_init :: (dec: *ma_dr_mp3dec) -> void #foreign miniaudio;

ma_dr_mp3dec_decode_frame :: (dec: *ma_dr_mp3dec, mp3: *ma_uint8, mp3_bytes: s32, pcm: *void, info: *ma_dr_mp3dec_frame_info) -> s32 #foreign miniaudio;

ma_dr_mp3dec_f32_to_s16 :: (in: *float, out: *ma_int16, num_samples: u64) -> void #foreign miniaudio;

ma_dr_mp3_seek_origin :: enum u32 {
    start   :: 0;
    current :: 1;
}

ma_dr_mp3_seek_point :: struct {
    seekPosInBytes:     ma_uint64;
    pcmFrameIndex:      ma_uint64;
    mp3FramesToDiscard: ma_uint16;
    pcmFramesToDiscard: ma_uint16;
}

ma_dr_mp3_read_proc :: #type (pUserData: *void, pBufferOut: *void, bytesToRead: u64) -> u64 #c_call;
ma_dr_mp3_seek_proc :: #type (pUserData: *void, offset: s32, origin: ma_dr_mp3_seek_origin) -> ma_bool32 #c_call;
ma_dr_mp3_config :: struct {
    channels:   ma_uint32;
    sampleRate: ma_uint32;
}

ma_dr_mp3 :: struct {
    decoder:                      ma_dr_mp3dec;
    channels:                     ma_uint32;
    sampleRate:                   ma_uint32;
    onRead:                       ma_dr_mp3_read_proc;
    onSeek:                       ma_dr_mp3_seek_proc;
    pUserData:                    *void;
    allocationCallbacks:          ma_allocation_callbacks;
    mp3FrameChannels:             ma_uint32;
    mp3FrameSampleRate:           ma_uint32;
    pcmFramesConsumedInMP3Frame:  ma_uint32;
    pcmFramesRemainingInMP3Frame: ma_uint32;
    pcmFrames:                    [9216] ma_uint8;
    currentPCMFrame:              ma_uint64;
    streamCursor:                 ma_uint64;
    pSeekPoints:                  *ma_dr_mp3_seek_point;
    seekPointCount:               ma_uint32;
    dataSize:                     u64;
    dataCapacity:                 u64;
    dataConsumed:                 u64;
    pData:                        *ma_uint8;
    atEnd:                        u8; /* 1 bits */
    memory:                       struct {
        pData:          *ma_uint8;
        dataSize:       u64;
        currentReadPos: u64;
    };
}

ma_dr_mp3_init :: (pMP3: *ma_dr_mp3, onRead: ma_dr_mp3_read_proc, onSeek: ma_dr_mp3_seek_proc, pUserData: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_mp3_init_memory :: (pMP3: *ma_dr_mp3, pData: *void, dataSize: u64, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_mp3_init_file :: (pMP3: *ma_dr_mp3, pFilePath: *u8, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_mp3_init_file_w :: (pMP3: *ma_dr_mp3, pFilePath: *s32, pAllocationCallbacks: *ma_allocation_callbacks) -> ma_bool32 #foreign miniaudio;

ma_dr_mp3_uninit :: (pMP3: *ma_dr_mp3) -> void #foreign miniaudio;

ma_dr_mp3_read_pcm_frames_f32 :: (pMP3: *ma_dr_mp3, framesToRead: ma_uint64, pBufferOut: *float) -> ma_uint64 #foreign miniaudio;

ma_dr_mp3_read_pcm_frames_s16 :: (pMP3: *ma_dr_mp3, framesToRead: ma_uint64, pBufferOut: *ma_int16) -> ma_uint64 #foreign miniaudio;

ma_dr_mp3_seek_to_pcm_frame :: (pMP3: *ma_dr_mp3, frameIndex: ma_uint64) -> ma_bool32 #foreign miniaudio;

ma_dr_mp3_get_pcm_frame_count :: (pMP3: *ma_dr_mp3) -> ma_uint64 #foreign miniaudio;

ma_dr_mp3_get_mp3_frame_count :: (pMP3: *ma_dr_mp3) -> ma_uint64 #foreign miniaudio;

ma_dr_mp3_get_mp3_and_pcm_frame_count :: (pMP3: *ma_dr_mp3, pMP3FrameCount: *ma_uint64, pPCMFrameCount: *ma_uint64) -> ma_bool32 #foreign miniaudio;

ma_dr_mp3_calculate_seek_points :: (pMP3: *ma_dr_mp3, pSeekPointCount: *ma_uint32, pSeekPoints: *ma_dr_mp3_seek_point) -> ma_bool32 #foreign miniaudio;

ma_dr_mp3_bind_seek_table :: (pMP3: *ma_dr_mp3, seekPointCount: ma_uint32, pSeekPoints: *ma_dr_mp3_seek_point) -> ma_bool32 #foreign miniaudio;

ma_dr_mp3_open_and_read_pcm_frames_f32 :: (onRead: ma_dr_mp3_read_proc, onSeek: ma_dr_mp3_seek_proc, pUserData: *void, pConfig: *ma_dr_mp3_config, pTotalFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *float #foreign miniaudio;

ma_dr_mp3_open_and_read_pcm_frames_s16 :: (onRead: ma_dr_mp3_read_proc, onSeek: ma_dr_mp3_seek_proc, pUserData: *void, pConfig: *ma_dr_mp3_config, pTotalFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int16 #foreign miniaudio;

ma_dr_mp3_open_memory_and_read_pcm_frames_f32 :: (pData: *void, dataSize: u64, pConfig: *ma_dr_mp3_config, pTotalFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *float #foreign miniaudio;

ma_dr_mp3_open_memory_and_read_pcm_frames_s16 :: (pData: *void, dataSize: u64, pConfig: *ma_dr_mp3_config, pTotalFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int16 #foreign miniaudio;

ma_dr_mp3_open_file_and_read_pcm_frames_f32 :: (filePath: *u8, pConfig: *ma_dr_mp3_config, pTotalFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *float #foreign miniaudio;

ma_dr_mp3_open_file_and_read_pcm_frames_s16 :: (filePath: *u8, pConfig: *ma_dr_mp3_config, pTotalFrameCount: *ma_uint64, pAllocationCallbacks: *ma_allocation_callbacks) -> *ma_int16 #foreign miniaudio;

ma_dr_mp3_malloc :: (sz: u64, pAllocationCallbacks: *ma_allocation_callbacks) -> *void #foreign miniaudio;

ma_dr_mp3_free :: (p: *void, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_decoder_config_init_copy :: (pConfig: *ma_decoder_config) -> ma_decoder_config #foreign miniaudio;

ma_wav :: struct {
    ds:                    ma_data_source_base;
    onRead:                ma_read_proc;
    onSeek:                ma_seek_proc;
    onTell:                ma_tell_proc;
    pReadSeekTellUserData: *void;
    format:                ma_format; /* Can be f32, s16 or s32. */

    dr:                    ma_dr_wav;
}

ma_wav_init :: (onRead: ma_read_proc, onSeek: ma_seek_proc, onTell: ma_tell_proc, pReadSeekTellUserData: *void, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pWav: *ma_wav) -> ma_result #foreign miniaudio;

ma_wav_init_file :: (pFilePath: *u8, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pWav: *ma_wav) -> ma_result #foreign miniaudio;

ma_wav_init_file_w :: (pFilePath: *s32, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pWav: *ma_wav) -> ma_result #foreign miniaudio;

ma_wav_init_memory :: (pData: *void, dataSize: u64, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pWav: *ma_wav) -> ma_result #foreign miniaudio;

ma_wav_uninit :: (pWav: *ma_wav, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_wav_read_pcm_frames :: (pWav: *ma_wav, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_wav_seek_to_pcm_frame :: (pWav: *ma_wav, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_wav_get_data_format :: (pWav: *ma_wav, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

ma_wav_get_cursor_in_pcm_frames :: (pWav: *ma_wav, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_wav_get_length_in_pcm_frames :: (pWav: *ma_wav, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_flac :: struct {
    ds:                    ma_data_source_base;
    onRead:                ma_read_proc;
    onSeek:                ma_seek_proc;
    onTell:                ma_tell_proc;
    pReadSeekTellUserData: *void;
    format:                ma_format; /* Can be f32, s16 or s32. */

    dr:                    *ma_dr_flac;
}

ma_flac_init :: (onRead: ma_read_proc, onSeek: ma_seek_proc, onTell: ma_tell_proc, pReadSeekTellUserData: *void, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pFlac: *ma_flac) -> ma_result #foreign miniaudio;

ma_flac_init_file :: (pFilePath: *u8, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pFlac: *ma_flac) -> ma_result #foreign miniaudio;

ma_flac_init_file_w :: (pFilePath: *s32, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pFlac: *ma_flac) -> ma_result #foreign miniaudio;

ma_flac_init_memory :: (pData: *void, dataSize: u64, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pFlac: *ma_flac) -> ma_result #foreign miniaudio;

ma_flac_uninit :: (pFlac: *ma_flac, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_flac_read_pcm_frames :: (pFlac: *ma_flac, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_flac_seek_to_pcm_frame :: (pFlac: *ma_flac, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_flac_get_data_format :: (pFlac: *ma_flac, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

ma_flac_get_cursor_in_pcm_frames :: (pFlac: *ma_flac, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_flac_get_length_in_pcm_frames :: (pFlac: *ma_flac, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_mp3 :: struct {
    ds:                    ma_data_source_base;
    onRead:                ma_read_proc;
    onSeek:                ma_seek_proc;
    onTell:                ma_tell_proc;
    pReadSeekTellUserData: *void;
    format:                ma_format; /* Can be f32 or s16. */

    dr:                    ma_dr_mp3;
    seekPointCount:        ma_uint32;
    pSeekPoints:           *ma_dr_mp3_seek_point; /* Only used if seek table generation is used. */
}

ma_mp3_init :: (onRead: ma_read_proc, onSeek: ma_seek_proc, onTell: ma_tell_proc, pReadSeekTellUserData: *void, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pMP3: *ma_mp3) -> ma_result #foreign miniaudio;

ma_mp3_init_file :: (pFilePath: *u8, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pMP3: *ma_mp3) -> ma_result #foreign miniaudio;

ma_mp3_init_file_w :: (pFilePath: *s32, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pMP3: *ma_mp3) -> ma_result #foreign miniaudio;

ma_mp3_init_memory :: (pData: *void, dataSize: u64, pConfig: *ma_decoding_backend_config, pAllocationCallbacks: *ma_allocation_callbacks, pMP3: *ma_mp3) -> ma_result #foreign miniaudio;

ma_mp3_uninit :: (pMP3: *ma_mp3, pAllocationCallbacks: *ma_allocation_callbacks) -> void #foreign miniaudio;

ma_mp3_read_pcm_frames :: (pMP3: *ma_mp3, pFramesOut: *void, frameCount: ma_uint64, pFramesRead: *ma_uint64) -> ma_result #foreign miniaudio;

ma_mp3_seek_to_pcm_frame :: (pMP3: *ma_mp3, frameIndex: ma_uint64) -> ma_result #foreign miniaudio;

ma_mp3_get_data_format :: (pMP3: *ma_mp3, pFormat: *ma_format, pChannels: *ma_uint32, pSampleRate: *ma_uint32, pChannelMap: *ma_channel, channelMapCap: u64) -> ma_result #foreign miniaudio;

ma_mp3_get_cursor_in_pcm_frames :: (pMP3: *ma_mp3, pCursor: *ma_uint64) -> ma_result #foreign miniaudio;

ma_mp3_get_length_in_pcm_frames :: (pMP3: *ma_mp3, pLength: *ma_uint64) -> ma_result #foreign miniaudio;

ma_encoder_preinit :: (pConfig: *ma_encoder_config, pEncoder: *ma_encoder) -> ma_result #foreign miniaudio;

ma_encoder_init__internal :: (onWrite: ma_encoder_write_proc, onSeek: ma_encoder_seek_proc, pUserData: *void, pEncoder: *ma_encoder) -> ma_result #foreign miniaudio;

ma_noise_heap_layout :: struct {
    sizeInBytes: u64;
    pink:        struct {
        binOffset:          u64;
        accumulationOffset: u64;
        counterOffset:      u64;
    };

    brownian:    struct {
        accumulationOffset: u64;
    };
}

ma_resource_manager_inline_notification :: struct {
    backend:          union {
        e: ma_async_notification_event;
        p: ma_async_notification_poll;
    }; /* Must be the first member. */

    pResourceManager: *ma_resource_manager;
}

ma_resource_manager_data_source_map :: (pDataSource: *ma_resource_manager_data_source, ppFramesOut: **void, pFrameCount: *ma_uint64) -> ma_result #foreign miniaudio;

ma_resource_manager_data_source_unmap :: (pDataSource: *ma_resource_manager_data_source, frameCount: ma_uint64) -> ma_result #foreign miniaudio;

ma_debug_fill_pcm_frames_with_sine_wave :: (pFramesOut: *float, frameCount: ma_uint32, format: ma_format, channels: ma_uint32, sampleRate: ma_uint32) -> void #foreign miniaudio;

ma_node_heap_layout :: struct {
    sizeInBytes:      u64;
    inputBusOffset:   u64;
    outputBusOffset:  u64;
    cachedDataOffset: u64;
    inputBusCount:    ma_uint32; /* So it doesn't have to be calculated twice. */
    outputBusCount:   ma_uint32; /* So it doesn't have to be calculated twice. */
}

ma_engine_node_heap_layout :: struct {
    sizeInBytes:       u64;
    baseNodeOffset:    u64;
    resamplerOffset:   u64;
    spatializerOffset: u64;
    gainerOffset:      u64;
}

ma_sound_init_from_file_internal :: (pEngine: *ma_engine, pConfig: *ma_sound_config, pSound: *ma_sound) -> ma_result #foreign miniaudio;

ma_dr_wav__metadata_parser_stage :: enum u32 {
    count :: 0;
    read  :: 1;
}

ma_dr_wav__metadata_parser :: struct {
    onRead:            ma_dr_wav_read_proc;
    onSeek:            ma_dr_wav_seek_proc;
    pReadSeekUserData: *void;
    stage:             ma_dr_wav__metadata_parser_stage;
    pMetadata:         *ma_dr_wav_metadata;
    metadataCount:     ma_uint32;
    pData:             *ma_uint8;
    pDataCursor:       *ma_uint8;
    metadataCursor:    ma_uint64;
    extraCapacity:     ma_uint64;
}

ma_dr_wav_buffer_reader :: struct {
    pBuffer:     *void;
    sizeInBytes: u64;
    cursor:      u64;
}

ma_dr_flac_ogg_page_header :: struct {
    capturePattern:   [4] ma_uint8;
    structureVersion: ma_uint8;
    headerType:       ma_uint8;
    granulePosition:  ma_uint64;
    serialNumber:     ma_uint32;
    sequenceNumber:   ma_uint32;
    checksum:         ma_uint32;
    segmentCount:     ma_uint8;
    segmentTable:     [255] ma_uint8;
}

ma_dr_flac_init_info :: struct {
    onRead:                  ma_dr_flac_read_proc;
    onSeek:                  ma_dr_flac_seek_proc;
    onMeta:                  ma_dr_flac_meta_proc;
    container:               ma_dr_flac_container;
    pUserData:               *void;
    pUserDataMD:             *void;
    sampleRate:              ma_uint32;
    channels:                ma_uint8;
    bitsPerSample:           ma_uint8;
    totalPCMFrameCount:      ma_uint64;
    maxBlockSizeInPCMFrames: ma_uint16;
    runningFilePos:          ma_uint64;
    hasStreamInfoBlock:      ma_bool32;
    hasMetadataBlocks:       ma_bool32;
    bs:                      ma_dr_flac_bs;
    firstFrameHeader:        ma_dr_flac_frame_header;

    oggSerial:               ma_uint32;
    oggFirstBytePos:         ma_uint64;
    oggBosHeader:            ma_dr_flac_ogg_page_header;
}

ma_dr_flac_ogg_crc_mismatch_recovery :: enum u32 {
    recover_on_crc_mismatch :: 0;
    fail_on_crc_mismatch    :: 1;
}

ma_dr_flac_oggbs :: struct {
    onRead:               ma_dr_flac_read_proc;
    onSeek:               ma_dr_flac_seek_proc;
    pUserData:            *void;
    currentBytePos:       ma_uint64;
    firstBytePos:         ma_uint64;
    serialNumber:         ma_uint32;
    bosPageHeader:        ma_dr_flac_ogg_page_header;
    currentPageHeader:    ma_dr_flac_ogg_page_header;
    bytesRemainingInPage: ma_uint32;
    pageDataSize:         ma_uint32;
    pageData:             [65307] ma_uint8;
}

ma_dr_mp3_bs :: struct {
    buf:   *ma_uint8;
    pos:   s32;
    limit: s32;
}

ma_dr_mp3_L12_scale_info :: struct {
    scf:          [192] float;
    total_bands:  ma_uint8;
    stereo_bands: ma_uint8;
    bitalloc:     [64] ma_uint8;
    scfcod:       [64] ma_uint8;
}

ma_dr_mp3_L12_subband_alloc :: struct {
    tab_offset:     ma_uint8;
    code_tab_width: ma_uint8;
    band_count:     ma_uint8;
}

ma_dr_mp3_L3_gr_info :: struct {
    sfbtab:            *ma_uint8;
    part_23_length:    ma_uint16;
    big_values:        ma_uint16;
    scalefac_compress: ma_uint16;
    global_gain:       ma_uint8;
    block_type:        ma_uint8;
    mixed_block_flag:  ma_uint8;
    n_long_sfb:        ma_uint8;
    n_short_sfb:       ma_uint8;
    table_select:      [3] ma_uint8;
    region_count:      [3] ma_uint8;
    subblock_gain:     [3] ma_uint8;
    preflag:           ma_uint8;
    scalefac_scale:    ma_uint8;
    count1_table:      ma_uint8;
    scfsi:             ma_uint8;
}

ma_dr_mp3dec_scratch :: struct {
    bs:       ma_dr_mp3_bs;
    maindata: [2815] ma_uint8;
    gr_info:  [4] ma_dr_mp3_L3_gr_info;
    grbuf:    [2] [576] float;
    scf:      [40] float;
    syn:      [33] [64] float;
    ist_pos:  [2] [39] ma_uint8;
}

ma_dr_mp3d_sample_t :: ma_int16;

ma_dr_mp3__seeking_mp3_frame_info :: struct {
    bytePos:       ma_uint64;
    pcmFrameIndex: ma_uint64;
}

#scope_file

#import "Basic"; // For assert, push_context


#run {
    {
        instance: ma_allocation_callbacks;
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 0, "ma_allocation_callbacks.pUserData has unexpected offset % instead of 0", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_allocation_callbacks.pUserData)) == 8, "ma_allocation_callbacks.pUserData has unexpected size % instead of 8", size_of(type_of(ma_allocation_callbacks.pUserData)));
        assert(((cast(*void)(*instance.onMalloc)) - cast(*void)(*instance)) == 8, "ma_allocation_callbacks.onMalloc has unexpected offset % instead of 8", ((cast(*void)(*instance.onMalloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_allocation_callbacks.onMalloc)) == 8, "ma_allocation_callbacks.onMalloc has unexpected size % instead of 8", size_of(type_of(ma_allocation_callbacks.onMalloc)));
        assert(((cast(*void)(*instance.onRealloc)) - cast(*void)(*instance)) == 16, "ma_allocation_callbacks.onRealloc has unexpected offset % instead of 16", ((cast(*void)(*instance.onRealloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_allocation_callbacks.onRealloc)) == 8, "ma_allocation_callbacks.onRealloc has unexpected size % instead of 8", size_of(type_of(ma_allocation_callbacks.onRealloc)));
        assert(((cast(*void)(*instance.onFree)) - cast(*void)(*instance)) == 24, "ma_allocation_callbacks.onFree has unexpected offset % instead of 24", ((cast(*void)(*instance.onFree)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_allocation_callbacks.onFree)) == 8, "ma_allocation_callbacks.onFree has unexpected size % instead of 8", size_of(type_of(ma_allocation_callbacks.onFree)));
        assert(size_of(ma_allocation_callbacks) == 32, "ma_allocation_callbacks has size % instead of 32", size_of(ma_allocation_callbacks));
    }

    {
        instance: ma_lcg;
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 0, "ma_lcg.state has unexpected offset % instead of 0", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lcg.state)) == 4, "ma_lcg.state has unexpected size % instead of 4", size_of(type_of(ma_lcg.state)));
        assert(size_of(ma_lcg) == 4, "ma_lcg has size % instead of 4", size_of(ma_lcg));
    }

    {
        instance: ma_atomic_uint32;
        assert(((cast(*void)(*instance.value)) - cast(*void)(*instance)) == 0, "ma_atomic_uint32.value has unexpected offset % instead of 0", ((cast(*void)(*instance.value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_uint32.value)) == 4, "ma_atomic_uint32.value has unexpected size % instead of 4", size_of(type_of(ma_atomic_uint32.value)));
        assert(size_of(ma_atomic_uint32) == 4, "ma_atomic_uint32 has size % instead of 4", size_of(ma_atomic_uint32));
    }

    {
        instance: ma_atomic_int32;
        assert(((cast(*void)(*instance.value)) - cast(*void)(*instance)) == 0, "ma_atomic_int32.value has unexpected offset % instead of 0", ((cast(*void)(*instance.value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_int32.value)) == 4, "ma_atomic_int32.value has unexpected size % instead of 4", size_of(type_of(ma_atomic_int32.value)));
        assert(size_of(ma_atomic_int32) == 4, "ma_atomic_int32 has size % instead of 4", size_of(ma_atomic_int32));
    }

    {
        instance: ma_atomic_uint64;
        assert(((cast(*void)(*instance.value)) - cast(*void)(*instance)) == 0, "ma_atomic_uint64.value has unexpected offset % instead of 0", ((cast(*void)(*instance.value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_uint64.value)) == 8, "ma_atomic_uint64.value has unexpected size % instead of 8", size_of(type_of(ma_atomic_uint64.value)));
        assert(size_of(ma_atomic_uint64) == 8, "ma_atomic_uint64 has size % instead of 8", size_of(ma_atomic_uint64));
    }

    {
        instance: ma_atomic_float;
        assert(((cast(*void)(*instance.value)) - cast(*void)(*instance)) == 0, "ma_atomic_float.value has unexpected offset % instead of 0", ((cast(*void)(*instance.value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_float.value)) == 4, "ma_atomic_float.value has unexpected size % instead of 4", size_of(type_of(ma_atomic_float.value)));
        assert(size_of(ma_atomic_float) == 4, "ma_atomic_float has size % instead of 4", size_of(ma_atomic_float));
    }

    {
        instance: ma_atomic_bool32;
        assert(((cast(*void)(*instance.value)) - cast(*void)(*instance)) == 0, "ma_atomic_bool32.value has unexpected offset % instead of 0", ((cast(*void)(*instance.value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_bool32.value)) == 4, "ma_atomic_bool32.value has unexpected size % instead of 4", size_of(type_of(ma_atomic_bool32.value)));
        assert(size_of(ma_atomic_bool32) == 4, "ma_atomic_bool32 has size % instead of 4", size_of(ma_atomic_bool32));
    }

    {
        instance: ma_event;
        assert(((cast(*void)(*instance.value)) - cast(*void)(*instance)) == 0, "ma_event.value has unexpected offset % instead of 0", ((cast(*void)(*instance.value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_event.value)) == 4, "ma_event.value has unexpected size % instead of 4", size_of(type_of(ma_event.value)));
        assert(((cast(*void)(*instance.lock)) - cast(*void)(*instance)) == 8, "ma_event.lock has unexpected offset % instead of 8", ((cast(*void)(*instance.lock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_event.lock)) == 64, "ma_event.lock has unexpected size % instead of 64", size_of(type_of(ma_event.lock)));
        assert(((cast(*void)(*instance.cond)) - cast(*void)(*instance)) == 72, "ma_event.cond has unexpected offset % instead of 72", ((cast(*void)(*instance.cond)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_event.cond)) == 48, "ma_event.cond has unexpected size % instead of 48", size_of(type_of(ma_event.cond)));
        assert(size_of(ma_event) == 120, "ma_event has size % instead of 120", size_of(ma_event));
    }

    {
        instance: ma_semaphore;
        assert(((cast(*void)(*instance.value)) - cast(*void)(*instance)) == 0, "ma_semaphore.value has unexpected offset % instead of 0", ((cast(*void)(*instance.value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_semaphore.value)) == 4, "ma_semaphore.value has unexpected size % instead of 4", size_of(type_of(ma_semaphore.value)));
        assert(((cast(*void)(*instance.lock)) - cast(*void)(*instance)) == 8, "ma_semaphore.lock has unexpected offset % instead of 8", ((cast(*void)(*instance.lock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_semaphore.lock)) == 64, "ma_semaphore.lock has unexpected size % instead of 64", size_of(type_of(ma_semaphore.lock)));
        assert(((cast(*void)(*instance.cond)) - cast(*void)(*instance)) == 72, "ma_semaphore.cond has unexpected offset % instead of 72", ((cast(*void)(*instance.cond)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_semaphore.cond)) == 48, "ma_semaphore.cond has unexpected size % instead of 48", size_of(type_of(ma_semaphore.cond)));
        assert(size_of(ma_semaphore) == 120, "ma_semaphore has size % instead of 120", size_of(ma_semaphore));
    }

    {
        instance: ma_log_callback;
        assert(((cast(*void)(*instance.onLog)) - cast(*void)(*instance)) == 0, "ma_log_callback.onLog has unexpected offset % instead of 0", ((cast(*void)(*instance.onLog)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_log_callback.onLog)) == 8, "ma_log_callback.onLog has unexpected size % instead of 8", size_of(type_of(ma_log_callback.onLog)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 8, "ma_log_callback.pUserData has unexpected offset % instead of 8", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_log_callback.pUserData)) == 8, "ma_log_callback.pUserData has unexpected size % instead of 8", size_of(type_of(ma_log_callback.pUserData)));
        assert(size_of(ma_log_callback) == 16, "ma_log_callback has size % instead of 16", size_of(ma_log_callback));
    }

    {
        instance: ma_log;
        assert(((cast(*void)(*instance.callbacks)) - cast(*void)(*instance)) == 0, "ma_log.callbacks has unexpected offset % instead of 0", ((cast(*void)(*instance.callbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_log.callbacks)) == 64, "ma_log.callbacks has unexpected size % instead of 64", size_of(type_of(ma_log.callbacks)));
        assert(((cast(*void)(*instance.callbackCount)) - cast(*void)(*instance)) == 64, "ma_log.callbackCount has unexpected offset % instead of 64", ((cast(*void)(*instance.callbackCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_log.callbackCount)) == 4, "ma_log.callbackCount has unexpected size % instead of 4", size_of(type_of(ma_log.callbackCount)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 72, "ma_log.allocationCallbacks has unexpected offset % instead of 72", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_log.allocationCallbacks)) == 32, "ma_log.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_log.allocationCallbacks)));
        assert(((cast(*void)(*instance.lock)) - cast(*void)(*instance)) == 104, "ma_log.lock has unexpected offset % instead of 104", ((cast(*void)(*instance.lock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_log.lock)) == 64, "ma_log.lock has unexpected size % instead of 64", size_of(type_of(ma_log.lock)));
        assert(size_of(ma_log) == 168, "ma_log has size % instead of 168", size_of(ma_log));
    }

    {
        instance: ma_biquad_coefficient;
        assert(((cast(*void)(*instance.f32)) - cast(*void)(*instance)) == 0, "ma_biquad_coefficient.f32 has unexpected offset % instead of 0", ((cast(*void)(*instance.f32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_coefficient.f32)) == 4, "ma_biquad_coefficient.f32 has unexpected size % instead of 4", size_of(type_of(ma_biquad_coefficient.f32)));
        assert(((cast(*void)(*instance._s32)) - cast(*void)(*instance)) == 0, "ma_biquad_coefficient._s32 has unexpected offset % instead of 0", ((cast(*void)(*instance._s32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_coefficient._s32)) == 4, "ma_biquad_coefficient._s32 has unexpected size % instead of 4", size_of(type_of(ma_biquad_coefficient._s32)));
        assert(size_of(ma_biquad_coefficient) == 4, "ma_biquad_coefficient has size % instead of 4", size_of(ma_biquad_coefficient));
    }

    {
        instance: ma_biquad_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_biquad_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_config.format)) == 4, "ma_biquad_config.format has unexpected size % instead of 4", size_of(type_of(ma_biquad_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_biquad_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_config.channels)) == 4, "ma_biquad_config.channels has unexpected size % instead of 4", size_of(type_of(ma_biquad_config.channels)));
        assert(((cast(*void)(*instance.b0)) - cast(*void)(*instance)) == 8, "ma_biquad_config.b0 has unexpected offset % instead of 8", ((cast(*void)(*instance.b0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_config.b0)) == 8, "ma_biquad_config.b0 has unexpected size % instead of 8", size_of(type_of(ma_biquad_config.b0)));
        assert(((cast(*void)(*instance.b1)) - cast(*void)(*instance)) == 16, "ma_biquad_config.b1 has unexpected offset % instead of 16", ((cast(*void)(*instance.b1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_config.b1)) == 8, "ma_biquad_config.b1 has unexpected size % instead of 8", size_of(type_of(ma_biquad_config.b1)));
        assert(((cast(*void)(*instance.b2)) - cast(*void)(*instance)) == 24, "ma_biquad_config.b2 has unexpected offset % instead of 24", ((cast(*void)(*instance.b2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_config.b2)) == 8, "ma_biquad_config.b2 has unexpected size % instead of 8", size_of(type_of(ma_biquad_config.b2)));
        assert(((cast(*void)(*instance.a0)) - cast(*void)(*instance)) == 32, "ma_biquad_config.a0 has unexpected offset % instead of 32", ((cast(*void)(*instance.a0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_config.a0)) == 8, "ma_biquad_config.a0 has unexpected size % instead of 8", size_of(type_of(ma_biquad_config.a0)));
        assert(((cast(*void)(*instance.a1)) - cast(*void)(*instance)) == 40, "ma_biquad_config.a1 has unexpected offset % instead of 40", ((cast(*void)(*instance.a1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_config.a1)) == 8, "ma_biquad_config.a1 has unexpected size % instead of 8", size_of(type_of(ma_biquad_config.a1)));
        assert(((cast(*void)(*instance.a2)) - cast(*void)(*instance)) == 48, "ma_biquad_config.a2 has unexpected offset % instead of 48", ((cast(*void)(*instance.a2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_config.a2)) == 8, "ma_biquad_config.a2 has unexpected size % instead of 8", size_of(type_of(ma_biquad_config.a2)));
        assert(size_of(ma_biquad_config) == 56, "ma_biquad_config has size % instead of 56", size_of(ma_biquad_config));
    }

    {
        instance: ma_biquad;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_biquad.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad.format)) == 4, "ma_biquad.format has unexpected size % instead of 4", size_of(type_of(ma_biquad.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_biquad.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad.channels)) == 4, "ma_biquad.channels has unexpected size % instead of 4", size_of(type_of(ma_biquad.channels)));
        assert(((cast(*void)(*instance.b0)) - cast(*void)(*instance)) == 8, "ma_biquad.b0 has unexpected offset % instead of 8", ((cast(*void)(*instance.b0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad.b0)) == 4, "ma_biquad.b0 has unexpected size % instead of 4", size_of(type_of(ma_biquad.b0)));
        assert(((cast(*void)(*instance.b1)) - cast(*void)(*instance)) == 12, "ma_biquad.b1 has unexpected offset % instead of 12", ((cast(*void)(*instance.b1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad.b1)) == 4, "ma_biquad.b1 has unexpected size % instead of 4", size_of(type_of(ma_biquad.b1)));
        assert(((cast(*void)(*instance.b2)) - cast(*void)(*instance)) == 16, "ma_biquad.b2 has unexpected offset % instead of 16", ((cast(*void)(*instance.b2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad.b2)) == 4, "ma_biquad.b2 has unexpected size % instead of 4", size_of(type_of(ma_biquad.b2)));
        assert(((cast(*void)(*instance.a1)) - cast(*void)(*instance)) == 20, "ma_biquad.a1 has unexpected offset % instead of 20", ((cast(*void)(*instance.a1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad.a1)) == 4, "ma_biquad.a1 has unexpected size % instead of 4", size_of(type_of(ma_biquad.a1)));
        assert(((cast(*void)(*instance.a2)) - cast(*void)(*instance)) == 24, "ma_biquad.a2 has unexpected offset % instead of 24", ((cast(*void)(*instance.a2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad.a2)) == 4, "ma_biquad.a2 has unexpected size % instead of 4", size_of(type_of(ma_biquad.a2)));
        assert(((cast(*void)(*instance.pR1)) - cast(*void)(*instance)) == 32, "ma_biquad.pR1 has unexpected offset % instead of 32", ((cast(*void)(*instance.pR1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad.pR1)) == 8, "ma_biquad.pR1 has unexpected size % instead of 8", size_of(type_of(ma_biquad.pR1)));
        assert(((cast(*void)(*instance.pR2)) - cast(*void)(*instance)) == 40, "ma_biquad.pR2 has unexpected offset % instead of 40", ((cast(*void)(*instance.pR2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad.pR2)) == 8, "ma_biquad.pR2 has unexpected size % instead of 8", size_of(type_of(ma_biquad.pR2)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 48, "ma_biquad._pHeap has unexpected offset % instead of 48", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad._pHeap)) == 8, "ma_biquad._pHeap has unexpected size % instead of 8", size_of(type_of(ma_biquad._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 56, "ma_biquad._ownsHeap has unexpected offset % instead of 56", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad._ownsHeap)) == 4, "ma_biquad._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_biquad._ownsHeap)));
        assert(size_of(ma_biquad) == 64, "ma_biquad has size % instead of 64", size_of(ma_biquad));
    }

    {
        instance: ma_lpf1_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_lpf1_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1_config.format)) == 4, "ma_lpf1_config.format has unexpected size % instead of 4", size_of(type_of(ma_lpf1_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_lpf1_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1_config.channels)) == 4, "ma_lpf1_config.channels has unexpected size % instead of 4", size_of(type_of(ma_lpf1_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_lpf1_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1_config.sampleRate)) == 4, "ma_lpf1_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_lpf1_config.sampleRate)));
        assert(((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)) == 16, "ma_lpf1_config.cutoffFrequency has unexpected offset % instead of 16", ((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1_config.cutoffFrequency)) == 8, "ma_lpf1_config.cutoffFrequency has unexpected size % instead of 8", size_of(type_of(ma_lpf1_config.cutoffFrequency)));
        assert(((cast(*void)(*instance.q)) - cast(*void)(*instance)) == 24, "ma_lpf1_config.q has unexpected offset % instead of 24", ((cast(*void)(*instance.q)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1_config.q)) == 8, "ma_lpf1_config.q has unexpected size % instead of 8", size_of(type_of(ma_lpf1_config.q)));
        assert(size_of(ma_lpf1_config) == 32, "ma_lpf1_config has size % instead of 32", size_of(ma_lpf1_config));
    }

    {
        instance: ma_lpf1;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_lpf1.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1.format)) == 4, "ma_lpf1.format has unexpected size % instead of 4", size_of(type_of(ma_lpf1.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_lpf1.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1.channels)) == 4, "ma_lpf1.channels has unexpected size % instead of 4", size_of(type_of(ma_lpf1.channels)));
        assert(((cast(*void)(*instance.a)) - cast(*void)(*instance)) == 8, "ma_lpf1.a has unexpected offset % instead of 8", ((cast(*void)(*instance.a)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1.a)) == 4, "ma_lpf1.a has unexpected size % instead of 4", size_of(type_of(ma_lpf1.a)));
        assert(((cast(*void)(*instance.pR1)) - cast(*void)(*instance)) == 16, "ma_lpf1.pR1 has unexpected offset % instead of 16", ((cast(*void)(*instance.pR1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1.pR1)) == 8, "ma_lpf1.pR1 has unexpected size % instead of 8", size_of(type_of(ma_lpf1.pR1)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 24, "ma_lpf1._pHeap has unexpected offset % instead of 24", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1._pHeap)) == 8, "ma_lpf1._pHeap has unexpected size % instead of 8", size_of(type_of(ma_lpf1._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 32, "ma_lpf1._ownsHeap has unexpected offset % instead of 32", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1._ownsHeap)) == 4, "ma_lpf1._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_lpf1._ownsHeap)));
        assert(size_of(ma_lpf1) == 40, "ma_lpf1 has size % instead of 40", size_of(ma_lpf1));
    }

    {
        instance: ma_lpf2;
        assert(((cast(*void)(*instance.bq)) - cast(*void)(*instance)) == 0, "ma_lpf2.bq has unexpected offset % instead of 0", ((cast(*void)(*instance.bq)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf2.bq)) == 64, "ma_lpf2.bq has unexpected size % instead of 64", size_of(type_of(ma_lpf2.bq)));
        assert(size_of(ma_lpf2) == 64, "ma_lpf2 has size % instead of 64", size_of(ma_lpf2));
    }

    {
        instance: ma_lpf_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_lpf_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_config.format)) == 4, "ma_lpf_config.format has unexpected size % instead of 4", size_of(type_of(ma_lpf_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_lpf_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_config.channels)) == 4, "ma_lpf_config.channels has unexpected size % instead of 4", size_of(type_of(ma_lpf_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_lpf_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_config.sampleRate)) == 4, "ma_lpf_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_lpf_config.sampleRate)));
        assert(((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)) == 16, "ma_lpf_config.cutoffFrequency has unexpected offset % instead of 16", ((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_config.cutoffFrequency)) == 8, "ma_lpf_config.cutoffFrequency has unexpected size % instead of 8", size_of(type_of(ma_lpf_config.cutoffFrequency)));
        assert(((cast(*void)(*instance.order)) - cast(*void)(*instance)) == 24, "ma_lpf_config.order has unexpected offset % instead of 24", ((cast(*void)(*instance.order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_config.order)) == 4, "ma_lpf_config.order has unexpected size % instead of 4", size_of(type_of(ma_lpf_config.order)));
        assert(size_of(ma_lpf_config) == 32, "ma_lpf_config has size % instead of 32", size_of(ma_lpf_config));
    }

    {
        instance: ma_lpf;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_lpf.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf.format)) == 4, "ma_lpf.format has unexpected size % instead of 4", size_of(type_of(ma_lpf.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_lpf.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf.channels)) == 4, "ma_lpf.channels has unexpected size % instead of 4", size_of(type_of(ma_lpf.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_lpf.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf.sampleRate)) == 4, "ma_lpf.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_lpf.sampleRate)));
        assert(((cast(*void)(*instance.lpf1Count)) - cast(*void)(*instance)) == 12, "ma_lpf.lpf1Count has unexpected offset % instead of 12", ((cast(*void)(*instance.lpf1Count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf.lpf1Count)) == 4, "ma_lpf.lpf1Count has unexpected size % instead of 4", size_of(type_of(ma_lpf.lpf1Count)));
        assert(((cast(*void)(*instance.lpf2Count)) - cast(*void)(*instance)) == 16, "ma_lpf.lpf2Count has unexpected offset % instead of 16", ((cast(*void)(*instance.lpf2Count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf.lpf2Count)) == 4, "ma_lpf.lpf2Count has unexpected size % instead of 4", size_of(type_of(ma_lpf.lpf2Count)));
        assert(((cast(*void)(*instance.pLPF1)) - cast(*void)(*instance)) == 24, "ma_lpf.pLPF1 has unexpected offset % instead of 24", ((cast(*void)(*instance.pLPF1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf.pLPF1)) == 8, "ma_lpf.pLPF1 has unexpected size % instead of 8", size_of(type_of(ma_lpf.pLPF1)));
        assert(((cast(*void)(*instance.pLPF2)) - cast(*void)(*instance)) == 32, "ma_lpf.pLPF2 has unexpected offset % instead of 32", ((cast(*void)(*instance.pLPF2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf.pLPF2)) == 8, "ma_lpf.pLPF2 has unexpected size % instead of 8", size_of(type_of(ma_lpf.pLPF2)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 40, "ma_lpf._pHeap has unexpected offset % instead of 40", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf._pHeap)) == 8, "ma_lpf._pHeap has unexpected size % instead of 8", size_of(type_of(ma_lpf._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 48, "ma_lpf._ownsHeap has unexpected offset % instead of 48", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf._ownsHeap)) == 4, "ma_lpf._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_lpf._ownsHeap)));
        assert(size_of(ma_lpf) == 56, "ma_lpf has size % instead of 56", size_of(ma_lpf));
    }

    {
        instance: ma_hpf1_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_hpf1_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1_config.format)) == 4, "ma_hpf1_config.format has unexpected size % instead of 4", size_of(type_of(ma_hpf1_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_hpf1_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1_config.channels)) == 4, "ma_hpf1_config.channels has unexpected size % instead of 4", size_of(type_of(ma_hpf1_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_hpf1_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1_config.sampleRate)) == 4, "ma_hpf1_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_hpf1_config.sampleRate)));
        assert(((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)) == 16, "ma_hpf1_config.cutoffFrequency has unexpected offset % instead of 16", ((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1_config.cutoffFrequency)) == 8, "ma_hpf1_config.cutoffFrequency has unexpected size % instead of 8", size_of(type_of(ma_hpf1_config.cutoffFrequency)));
        assert(((cast(*void)(*instance.q)) - cast(*void)(*instance)) == 24, "ma_hpf1_config.q has unexpected offset % instead of 24", ((cast(*void)(*instance.q)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1_config.q)) == 8, "ma_hpf1_config.q has unexpected size % instead of 8", size_of(type_of(ma_hpf1_config.q)));
        assert(size_of(ma_hpf1_config) == 32, "ma_hpf1_config has size % instead of 32", size_of(ma_hpf1_config));
    }

    {
        instance: ma_hpf1;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_hpf1.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1.format)) == 4, "ma_hpf1.format has unexpected size % instead of 4", size_of(type_of(ma_hpf1.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_hpf1.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1.channels)) == 4, "ma_hpf1.channels has unexpected size % instead of 4", size_of(type_of(ma_hpf1.channels)));
        assert(((cast(*void)(*instance.a)) - cast(*void)(*instance)) == 8, "ma_hpf1.a has unexpected offset % instead of 8", ((cast(*void)(*instance.a)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1.a)) == 4, "ma_hpf1.a has unexpected size % instead of 4", size_of(type_of(ma_hpf1.a)));
        assert(((cast(*void)(*instance.pR1)) - cast(*void)(*instance)) == 16, "ma_hpf1.pR1 has unexpected offset % instead of 16", ((cast(*void)(*instance.pR1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1.pR1)) == 8, "ma_hpf1.pR1 has unexpected size % instead of 8", size_of(type_of(ma_hpf1.pR1)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 24, "ma_hpf1._pHeap has unexpected offset % instead of 24", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1._pHeap)) == 8, "ma_hpf1._pHeap has unexpected size % instead of 8", size_of(type_of(ma_hpf1._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 32, "ma_hpf1._ownsHeap has unexpected offset % instead of 32", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1._ownsHeap)) == 4, "ma_hpf1._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_hpf1._ownsHeap)));
        assert(size_of(ma_hpf1) == 40, "ma_hpf1 has size % instead of 40", size_of(ma_hpf1));
    }

    {
        instance: ma_hpf2;
        assert(((cast(*void)(*instance.bq)) - cast(*void)(*instance)) == 0, "ma_hpf2.bq has unexpected offset % instead of 0", ((cast(*void)(*instance.bq)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf2.bq)) == 64, "ma_hpf2.bq has unexpected size % instead of 64", size_of(type_of(ma_hpf2.bq)));
        assert(size_of(ma_hpf2) == 64, "ma_hpf2 has size % instead of 64", size_of(ma_hpf2));
    }

    {
        instance: ma_hpf_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_hpf_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_config.format)) == 4, "ma_hpf_config.format has unexpected size % instead of 4", size_of(type_of(ma_hpf_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_hpf_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_config.channels)) == 4, "ma_hpf_config.channels has unexpected size % instead of 4", size_of(type_of(ma_hpf_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_hpf_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_config.sampleRate)) == 4, "ma_hpf_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_hpf_config.sampleRate)));
        assert(((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)) == 16, "ma_hpf_config.cutoffFrequency has unexpected offset % instead of 16", ((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_config.cutoffFrequency)) == 8, "ma_hpf_config.cutoffFrequency has unexpected size % instead of 8", size_of(type_of(ma_hpf_config.cutoffFrequency)));
        assert(((cast(*void)(*instance.order)) - cast(*void)(*instance)) == 24, "ma_hpf_config.order has unexpected offset % instead of 24", ((cast(*void)(*instance.order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_config.order)) == 4, "ma_hpf_config.order has unexpected size % instead of 4", size_of(type_of(ma_hpf_config.order)));
        assert(size_of(ma_hpf_config) == 32, "ma_hpf_config has size % instead of 32", size_of(ma_hpf_config));
    }

    {
        instance: ma_hpf;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_hpf.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf.format)) == 4, "ma_hpf.format has unexpected size % instead of 4", size_of(type_of(ma_hpf.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_hpf.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf.channels)) == 4, "ma_hpf.channels has unexpected size % instead of 4", size_of(type_of(ma_hpf.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_hpf.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf.sampleRate)) == 4, "ma_hpf.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_hpf.sampleRate)));
        assert(((cast(*void)(*instance.hpf1Count)) - cast(*void)(*instance)) == 12, "ma_hpf.hpf1Count has unexpected offset % instead of 12", ((cast(*void)(*instance.hpf1Count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf.hpf1Count)) == 4, "ma_hpf.hpf1Count has unexpected size % instead of 4", size_of(type_of(ma_hpf.hpf1Count)));
        assert(((cast(*void)(*instance.hpf2Count)) - cast(*void)(*instance)) == 16, "ma_hpf.hpf2Count has unexpected offset % instead of 16", ((cast(*void)(*instance.hpf2Count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf.hpf2Count)) == 4, "ma_hpf.hpf2Count has unexpected size % instead of 4", size_of(type_of(ma_hpf.hpf2Count)));
        assert(((cast(*void)(*instance.pHPF1)) - cast(*void)(*instance)) == 24, "ma_hpf.pHPF1 has unexpected offset % instead of 24", ((cast(*void)(*instance.pHPF1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf.pHPF1)) == 8, "ma_hpf.pHPF1 has unexpected size % instead of 8", size_of(type_of(ma_hpf.pHPF1)));
        assert(((cast(*void)(*instance.pHPF2)) - cast(*void)(*instance)) == 32, "ma_hpf.pHPF2 has unexpected offset % instead of 32", ((cast(*void)(*instance.pHPF2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf.pHPF2)) == 8, "ma_hpf.pHPF2 has unexpected size % instead of 8", size_of(type_of(ma_hpf.pHPF2)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 40, "ma_hpf._pHeap has unexpected offset % instead of 40", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf._pHeap)) == 8, "ma_hpf._pHeap has unexpected size % instead of 8", size_of(type_of(ma_hpf._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 48, "ma_hpf._ownsHeap has unexpected offset % instead of 48", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf._ownsHeap)) == 4, "ma_hpf._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_hpf._ownsHeap)));
        assert(size_of(ma_hpf) == 56, "ma_hpf has size % instead of 56", size_of(ma_hpf));
    }

    {
        instance: ma_bpf2_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_bpf2_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf2_config.format)) == 4, "ma_bpf2_config.format has unexpected size % instead of 4", size_of(type_of(ma_bpf2_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_bpf2_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf2_config.channels)) == 4, "ma_bpf2_config.channels has unexpected size % instead of 4", size_of(type_of(ma_bpf2_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_bpf2_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf2_config.sampleRate)) == 4, "ma_bpf2_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_bpf2_config.sampleRate)));
        assert(((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)) == 16, "ma_bpf2_config.cutoffFrequency has unexpected offset % instead of 16", ((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf2_config.cutoffFrequency)) == 8, "ma_bpf2_config.cutoffFrequency has unexpected size % instead of 8", size_of(type_of(ma_bpf2_config.cutoffFrequency)));
        assert(((cast(*void)(*instance.q)) - cast(*void)(*instance)) == 24, "ma_bpf2_config.q has unexpected offset % instead of 24", ((cast(*void)(*instance.q)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf2_config.q)) == 8, "ma_bpf2_config.q has unexpected size % instead of 8", size_of(type_of(ma_bpf2_config.q)));
        assert(size_of(ma_bpf2_config) == 32, "ma_bpf2_config has size % instead of 32", size_of(ma_bpf2_config));
    }

    {
        instance: ma_bpf2;
        assert(((cast(*void)(*instance.bq)) - cast(*void)(*instance)) == 0, "ma_bpf2.bq has unexpected offset % instead of 0", ((cast(*void)(*instance.bq)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf2.bq)) == 64, "ma_bpf2.bq has unexpected size % instead of 64", size_of(type_of(ma_bpf2.bq)));
        assert(size_of(ma_bpf2) == 64, "ma_bpf2 has size % instead of 64", size_of(ma_bpf2));
    }

    {
        instance: ma_bpf_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_bpf_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf_config.format)) == 4, "ma_bpf_config.format has unexpected size % instead of 4", size_of(type_of(ma_bpf_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_bpf_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf_config.channels)) == 4, "ma_bpf_config.channels has unexpected size % instead of 4", size_of(type_of(ma_bpf_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_bpf_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf_config.sampleRate)) == 4, "ma_bpf_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_bpf_config.sampleRate)));
        assert(((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)) == 16, "ma_bpf_config.cutoffFrequency has unexpected offset % instead of 16", ((cast(*void)(*instance.cutoffFrequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf_config.cutoffFrequency)) == 8, "ma_bpf_config.cutoffFrequency has unexpected size % instead of 8", size_of(type_of(ma_bpf_config.cutoffFrequency)));
        assert(((cast(*void)(*instance.order)) - cast(*void)(*instance)) == 24, "ma_bpf_config.order has unexpected offset % instead of 24", ((cast(*void)(*instance.order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf_config.order)) == 4, "ma_bpf_config.order has unexpected size % instead of 4", size_of(type_of(ma_bpf_config.order)));
        assert(size_of(ma_bpf_config) == 32, "ma_bpf_config has size % instead of 32", size_of(ma_bpf_config));
    }

    {
        instance: ma_bpf;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_bpf.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf.format)) == 4, "ma_bpf.format has unexpected size % instead of 4", size_of(type_of(ma_bpf.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_bpf.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf.channels)) == 4, "ma_bpf.channels has unexpected size % instead of 4", size_of(type_of(ma_bpf.channels)));
        assert(((cast(*void)(*instance.bpf2Count)) - cast(*void)(*instance)) == 8, "ma_bpf.bpf2Count has unexpected offset % instead of 8", ((cast(*void)(*instance.bpf2Count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf.bpf2Count)) == 4, "ma_bpf.bpf2Count has unexpected size % instead of 4", size_of(type_of(ma_bpf.bpf2Count)));
        assert(((cast(*void)(*instance.pBPF2)) - cast(*void)(*instance)) == 16, "ma_bpf.pBPF2 has unexpected offset % instead of 16", ((cast(*void)(*instance.pBPF2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf.pBPF2)) == 8, "ma_bpf.pBPF2 has unexpected size % instead of 8", size_of(type_of(ma_bpf.pBPF2)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 24, "ma_bpf._pHeap has unexpected offset % instead of 24", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf._pHeap)) == 8, "ma_bpf._pHeap has unexpected size % instead of 8", size_of(type_of(ma_bpf._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 32, "ma_bpf._ownsHeap has unexpected offset % instead of 32", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf._ownsHeap)) == 4, "ma_bpf._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_bpf._ownsHeap)));
        assert(size_of(ma_bpf) == 40, "ma_bpf has size % instead of 40", size_of(ma_bpf));
    }

    {
        instance: ma_notch2_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_notch2_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_notch2_config.format)) == 4, "ma_notch2_config.format has unexpected size % instead of 4", size_of(type_of(ma_notch2_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_notch2_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_notch2_config.channels)) == 4, "ma_notch2_config.channels has unexpected size % instead of 4", size_of(type_of(ma_notch2_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_notch2_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_notch2_config.sampleRate)) == 4, "ma_notch2_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_notch2_config.sampleRate)));
        assert(((cast(*void)(*instance.q)) - cast(*void)(*instance)) == 16, "ma_notch2_config.q has unexpected offset % instead of 16", ((cast(*void)(*instance.q)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_notch2_config.q)) == 8, "ma_notch2_config.q has unexpected size % instead of 8", size_of(type_of(ma_notch2_config.q)));
        assert(((cast(*void)(*instance.frequency)) - cast(*void)(*instance)) == 24, "ma_notch2_config.frequency has unexpected offset % instead of 24", ((cast(*void)(*instance.frequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_notch2_config.frequency)) == 8, "ma_notch2_config.frequency has unexpected size % instead of 8", size_of(type_of(ma_notch2_config.frequency)));
        assert(size_of(ma_notch2_config) == 32, "ma_notch2_config has size % instead of 32", size_of(ma_notch2_config));
    }

    {
        instance: ma_notch2;
        assert(((cast(*void)(*instance.bq)) - cast(*void)(*instance)) == 0, "ma_notch2.bq has unexpected offset % instead of 0", ((cast(*void)(*instance.bq)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_notch2.bq)) == 64, "ma_notch2.bq has unexpected size % instead of 64", size_of(type_of(ma_notch2.bq)));
        assert(size_of(ma_notch2) == 64, "ma_notch2 has size % instead of 64", size_of(ma_notch2));
    }

    {
        instance: ma_peak2_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_peak2_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_peak2_config.format)) == 4, "ma_peak2_config.format has unexpected size % instead of 4", size_of(type_of(ma_peak2_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_peak2_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_peak2_config.channels)) == 4, "ma_peak2_config.channels has unexpected size % instead of 4", size_of(type_of(ma_peak2_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_peak2_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_peak2_config.sampleRate)) == 4, "ma_peak2_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_peak2_config.sampleRate)));
        assert(((cast(*void)(*instance.gainDB)) - cast(*void)(*instance)) == 16, "ma_peak2_config.gainDB has unexpected offset % instead of 16", ((cast(*void)(*instance.gainDB)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_peak2_config.gainDB)) == 8, "ma_peak2_config.gainDB has unexpected size % instead of 8", size_of(type_of(ma_peak2_config.gainDB)));
        assert(((cast(*void)(*instance.q)) - cast(*void)(*instance)) == 24, "ma_peak2_config.q has unexpected offset % instead of 24", ((cast(*void)(*instance.q)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_peak2_config.q)) == 8, "ma_peak2_config.q has unexpected size % instead of 8", size_of(type_of(ma_peak2_config.q)));
        assert(((cast(*void)(*instance.frequency)) - cast(*void)(*instance)) == 32, "ma_peak2_config.frequency has unexpected offset % instead of 32", ((cast(*void)(*instance.frequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_peak2_config.frequency)) == 8, "ma_peak2_config.frequency has unexpected size % instead of 8", size_of(type_of(ma_peak2_config.frequency)));
        assert(size_of(ma_peak2_config) == 40, "ma_peak2_config has size % instead of 40", size_of(ma_peak2_config));
    }

    {
        instance: ma_peak2;
        assert(((cast(*void)(*instance.bq)) - cast(*void)(*instance)) == 0, "ma_peak2.bq has unexpected offset % instead of 0", ((cast(*void)(*instance.bq)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_peak2.bq)) == 64, "ma_peak2.bq has unexpected size % instead of 64", size_of(type_of(ma_peak2.bq)));
        assert(size_of(ma_peak2) == 64, "ma_peak2 has size % instead of 64", size_of(ma_peak2));
    }

    {
        instance: ma_loshelf2_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_loshelf2_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_loshelf2_config.format)) == 4, "ma_loshelf2_config.format has unexpected size % instead of 4", size_of(type_of(ma_loshelf2_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_loshelf2_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_loshelf2_config.channels)) == 4, "ma_loshelf2_config.channels has unexpected size % instead of 4", size_of(type_of(ma_loshelf2_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_loshelf2_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_loshelf2_config.sampleRate)) == 4, "ma_loshelf2_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_loshelf2_config.sampleRate)));
        assert(((cast(*void)(*instance.gainDB)) - cast(*void)(*instance)) == 16, "ma_loshelf2_config.gainDB has unexpected offset % instead of 16", ((cast(*void)(*instance.gainDB)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_loshelf2_config.gainDB)) == 8, "ma_loshelf2_config.gainDB has unexpected size % instead of 8", size_of(type_of(ma_loshelf2_config.gainDB)));
        assert(((cast(*void)(*instance.shelfSlope)) - cast(*void)(*instance)) == 24, "ma_loshelf2_config.shelfSlope has unexpected offset % instead of 24", ((cast(*void)(*instance.shelfSlope)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_loshelf2_config.shelfSlope)) == 8, "ma_loshelf2_config.shelfSlope has unexpected size % instead of 8", size_of(type_of(ma_loshelf2_config.shelfSlope)));
        assert(((cast(*void)(*instance.frequency)) - cast(*void)(*instance)) == 32, "ma_loshelf2_config.frequency has unexpected offset % instead of 32", ((cast(*void)(*instance.frequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_loshelf2_config.frequency)) == 8, "ma_loshelf2_config.frequency has unexpected size % instead of 8", size_of(type_of(ma_loshelf2_config.frequency)));
        assert(size_of(ma_loshelf2_config) == 40, "ma_loshelf2_config has size % instead of 40", size_of(ma_loshelf2_config));
    }

    {
        instance: ma_loshelf2;
        assert(((cast(*void)(*instance.bq)) - cast(*void)(*instance)) == 0, "ma_loshelf2.bq has unexpected offset % instead of 0", ((cast(*void)(*instance.bq)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_loshelf2.bq)) == 64, "ma_loshelf2.bq has unexpected size % instead of 64", size_of(type_of(ma_loshelf2.bq)));
        assert(size_of(ma_loshelf2) == 64, "ma_loshelf2 has size % instead of 64", size_of(ma_loshelf2));
    }

    {
        instance: ma_hishelf2_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_hishelf2_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hishelf2_config.format)) == 4, "ma_hishelf2_config.format has unexpected size % instead of 4", size_of(type_of(ma_hishelf2_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_hishelf2_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hishelf2_config.channels)) == 4, "ma_hishelf2_config.channels has unexpected size % instead of 4", size_of(type_of(ma_hishelf2_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_hishelf2_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hishelf2_config.sampleRate)) == 4, "ma_hishelf2_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_hishelf2_config.sampleRate)));
        assert(((cast(*void)(*instance.gainDB)) - cast(*void)(*instance)) == 16, "ma_hishelf2_config.gainDB has unexpected offset % instead of 16", ((cast(*void)(*instance.gainDB)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hishelf2_config.gainDB)) == 8, "ma_hishelf2_config.gainDB has unexpected size % instead of 8", size_of(type_of(ma_hishelf2_config.gainDB)));
        assert(((cast(*void)(*instance.shelfSlope)) - cast(*void)(*instance)) == 24, "ma_hishelf2_config.shelfSlope has unexpected offset % instead of 24", ((cast(*void)(*instance.shelfSlope)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hishelf2_config.shelfSlope)) == 8, "ma_hishelf2_config.shelfSlope has unexpected size % instead of 8", size_of(type_of(ma_hishelf2_config.shelfSlope)));
        assert(((cast(*void)(*instance.frequency)) - cast(*void)(*instance)) == 32, "ma_hishelf2_config.frequency has unexpected offset % instead of 32", ((cast(*void)(*instance.frequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hishelf2_config.frequency)) == 8, "ma_hishelf2_config.frequency has unexpected size % instead of 8", size_of(type_of(ma_hishelf2_config.frequency)));
        assert(size_of(ma_hishelf2_config) == 40, "ma_hishelf2_config has size % instead of 40", size_of(ma_hishelf2_config));
    }

    {
        instance: ma_hishelf2;
        assert(((cast(*void)(*instance.bq)) - cast(*void)(*instance)) == 0, "ma_hishelf2.bq has unexpected offset % instead of 0", ((cast(*void)(*instance.bq)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hishelf2.bq)) == 64, "ma_hishelf2.bq has unexpected size % instead of 64", size_of(type_of(ma_hishelf2.bq)));
        assert(size_of(ma_hishelf2) == 64, "ma_hishelf2 has size % instead of 64", size_of(ma_hishelf2));
    }

    {
        instance: ma_delay_config;
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 0, "ma_delay_config.channels has unexpected offset % instead of 0", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay_config.channels)) == 4, "ma_delay_config.channels has unexpected size % instead of 4", size_of(type_of(ma_delay_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 4, "ma_delay_config.sampleRate has unexpected offset % instead of 4", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay_config.sampleRate)) == 4, "ma_delay_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_delay_config.sampleRate)));
        assert(((cast(*void)(*instance.delayInFrames)) - cast(*void)(*instance)) == 8, "ma_delay_config.delayInFrames has unexpected offset % instead of 8", ((cast(*void)(*instance.delayInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay_config.delayInFrames)) == 4, "ma_delay_config.delayInFrames has unexpected size % instead of 4", size_of(type_of(ma_delay_config.delayInFrames)));
        assert(((cast(*void)(*instance.delayStart)) - cast(*void)(*instance)) == 12, "ma_delay_config.delayStart has unexpected offset % instead of 12", ((cast(*void)(*instance.delayStart)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay_config.delayStart)) == 4, "ma_delay_config.delayStart has unexpected size % instead of 4", size_of(type_of(ma_delay_config.delayStart)));
        assert(((cast(*void)(*instance.wet)) - cast(*void)(*instance)) == 16, "ma_delay_config.wet has unexpected offset % instead of 16", ((cast(*void)(*instance.wet)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay_config.wet)) == 4, "ma_delay_config.wet has unexpected size % instead of 4", size_of(type_of(ma_delay_config.wet)));
        assert(((cast(*void)(*instance.dry)) - cast(*void)(*instance)) == 20, "ma_delay_config.dry has unexpected offset % instead of 20", ((cast(*void)(*instance.dry)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay_config.dry)) == 4, "ma_delay_config.dry has unexpected size % instead of 4", size_of(type_of(ma_delay_config.dry)));
        assert(((cast(*void)(*instance.decay)) - cast(*void)(*instance)) == 24, "ma_delay_config.decay has unexpected offset % instead of 24", ((cast(*void)(*instance.decay)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay_config.decay)) == 4, "ma_delay_config.decay has unexpected size % instead of 4", size_of(type_of(ma_delay_config.decay)));
        assert(size_of(ma_delay_config) == 28, "ma_delay_config has size % instead of 28", size_of(ma_delay_config));
    }

    {
        instance: ma_delay;
        assert(((cast(*void)(*instance.config)) - cast(*void)(*instance)) == 0, "ma_delay.config has unexpected offset % instead of 0", ((cast(*void)(*instance.config)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay.config)) == 28, "ma_delay.config has unexpected size % instead of 28", size_of(type_of(ma_delay.config)));
        assert(((cast(*void)(*instance.cursor)) - cast(*void)(*instance)) == 28, "ma_delay.cursor has unexpected offset % instead of 28", ((cast(*void)(*instance.cursor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay.cursor)) == 4, "ma_delay.cursor has unexpected size % instead of 4", size_of(type_of(ma_delay.cursor)));
        assert(((cast(*void)(*instance.bufferSizeInFrames)) - cast(*void)(*instance)) == 32, "ma_delay.bufferSizeInFrames has unexpected offset % instead of 32", ((cast(*void)(*instance.bufferSizeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay.bufferSizeInFrames)) == 4, "ma_delay.bufferSizeInFrames has unexpected size % instead of 4", size_of(type_of(ma_delay.bufferSizeInFrames)));
        assert(((cast(*void)(*instance.pBuffer)) - cast(*void)(*instance)) == 40, "ma_delay.pBuffer has unexpected offset % instead of 40", ((cast(*void)(*instance.pBuffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay.pBuffer)) == 8, "ma_delay.pBuffer has unexpected size % instead of 8", size_of(type_of(ma_delay.pBuffer)));
        assert(size_of(ma_delay) == 48, "ma_delay has size % instead of 48", size_of(ma_delay));
    }

    {
        instance: ma_gainer_config;
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 0, "ma_gainer_config.channels has unexpected offset % instead of 0", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer_config.channels)) == 4, "ma_gainer_config.channels has unexpected size % instead of 4", size_of(type_of(ma_gainer_config.channels)));
        assert(((cast(*void)(*instance.smoothTimeInFrames)) - cast(*void)(*instance)) == 4, "ma_gainer_config.smoothTimeInFrames has unexpected offset % instead of 4", ((cast(*void)(*instance.smoothTimeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer_config.smoothTimeInFrames)) == 4, "ma_gainer_config.smoothTimeInFrames has unexpected size % instead of 4", size_of(type_of(ma_gainer_config.smoothTimeInFrames)));
        assert(size_of(ma_gainer_config) == 8, "ma_gainer_config has size % instead of 8", size_of(ma_gainer_config));
    }

    {
        instance: ma_gainer;
        assert(((cast(*void)(*instance.config)) - cast(*void)(*instance)) == 0, "ma_gainer.config has unexpected offset % instead of 0", ((cast(*void)(*instance.config)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer.config)) == 8, "ma_gainer.config has unexpected size % instead of 8", size_of(type_of(ma_gainer.config)));
        assert(((cast(*void)(*instance.t)) - cast(*void)(*instance)) == 8, "ma_gainer.t has unexpected offset % instead of 8", ((cast(*void)(*instance.t)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer.t)) == 4, "ma_gainer.t has unexpected size % instead of 4", size_of(type_of(ma_gainer.t)));
        assert(((cast(*void)(*instance.masterVolume)) - cast(*void)(*instance)) == 12, "ma_gainer.masterVolume has unexpected offset % instead of 12", ((cast(*void)(*instance.masterVolume)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer.masterVolume)) == 4, "ma_gainer.masterVolume has unexpected size % instead of 4", size_of(type_of(ma_gainer.masterVolume)));
        assert(((cast(*void)(*instance.pOldGains)) - cast(*void)(*instance)) == 16, "ma_gainer.pOldGains has unexpected offset % instead of 16", ((cast(*void)(*instance.pOldGains)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer.pOldGains)) == 8, "ma_gainer.pOldGains has unexpected size % instead of 8", size_of(type_of(ma_gainer.pOldGains)));
        assert(((cast(*void)(*instance.pNewGains)) - cast(*void)(*instance)) == 24, "ma_gainer.pNewGains has unexpected offset % instead of 24", ((cast(*void)(*instance.pNewGains)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer.pNewGains)) == 8, "ma_gainer.pNewGains has unexpected size % instead of 8", size_of(type_of(ma_gainer.pNewGains)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 32, "ma_gainer._pHeap has unexpected offset % instead of 32", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer._pHeap)) == 8, "ma_gainer._pHeap has unexpected size % instead of 8", size_of(type_of(ma_gainer._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 40, "ma_gainer._ownsHeap has unexpected offset % instead of 40", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer._ownsHeap)) == 4, "ma_gainer._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_gainer._ownsHeap)));
        assert(size_of(ma_gainer) == 48, "ma_gainer has size % instead of 48", size_of(ma_gainer));
    }

    {
        instance: ma_panner_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_panner_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_panner_config.format)) == 4, "ma_panner_config.format has unexpected size % instead of 4", size_of(type_of(ma_panner_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_panner_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_panner_config.channels)) == 4, "ma_panner_config.channels has unexpected size % instead of 4", size_of(type_of(ma_panner_config.channels)));
        assert(((cast(*void)(*instance.mode)) - cast(*void)(*instance)) == 8, "ma_panner_config.mode has unexpected offset % instead of 8", ((cast(*void)(*instance.mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_panner_config.mode)) == 4, "ma_panner_config.mode has unexpected size % instead of 4", size_of(type_of(ma_panner_config.mode)));
        assert(((cast(*void)(*instance.pan)) - cast(*void)(*instance)) == 12, "ma_panner_config.pan has unexpected offset % instead of 12", ((cast(*void)(*instance.pan)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_panner_config.pan)) == 4, "ma_panner_config.pan has unexpected size % instead of 4", size_of(type_of(ma_panner_config.pan)));
        assert(size_of(ma_panner_config) == 16, "ma_panner_config has size % instead of 16", size_of(ma_panner_config));
    }

    {
        instance: ma_panner;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_panner.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_panner.format)) == 4, "ma_panner.format has unexpected size % instead of 4", size_of(type_of(ma_panner.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_panner.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_panner.channels)) == 4, "ma_panner.channels has unexpected size % instead of 4", size_of(type_of(ma_panner.channels)));
        assert(((cast(*void)(*instance.mode)) - cast(*void)(*instance)) == 8, "ma_panner.mode has unexpected offset % instead of 8", ((cast(*void)(*instance.mode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_panner.mode)) == 4, "ma_panner.mode has unexpected size % instead of 4", size_of(type_of(ma_panner.mode)));
        assert(((cast(*void)(*instance.pan)) - cast(*void)(*instance)) == 12, "ma_panner.pan has unexpected offset % instead of 12", ((cast(*void)(*instance.pan)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_panner.pan)) == 4, "ma_panner.pan has unexpected size % instead of 4", size_of(type_of(ma_panner.pan)));
        assert(size_of(ma_panner) == 16, "ma_panner has size % instead of 16", size_of(ma_panner));
    }

    {
        instance: ma_fader_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_fader_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_fader_config.format)) == 4, "ma_fader_config.format has unexpected size % instead of 4", size_of(type_of(ma_fader_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_fader_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_fader_config.channels)) == 4, "ma_fader_config.channels has unexpected size % instead of 4", size_of(type_of(ma_fader_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_fader_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_fader_config.sampleRate)) == 4, "ma_fader_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_fader_config.sampleRate)));
        assert(size_of(ma_fader_config) == 12, "ma_fader_config has size % instead of 12", size_of(ma_fader_config));
    }

    {
        instance: ma_fader;
        assert(((cast(*void)(*instance.config)) - cast(*void)(*instance)) == 0, "ma_fader.config has unexpected offset % instead of 0", ((cast(*void)(*instance.config)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_fader.config)) == 12, "ma_fader.config has unexpected size % instead of 12", size_of(type_of(ma_fader.config)));
        assert(((cast(*void)(*instance.volumeBeg)) - cast(*void)(*instance)) == 12, "ma_fader.volumeBeg has unexpected offset % instead of 12", ((cast(*void)(*instance.volumeBeg)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_fader.volumeBeg)) == 4, "ma_fader.volumeBeg has unexpected size % instead of 4", size_of(type_of(ma_fader.volumeBeg)));
        assert(((cast(*void)(*instance.volumeEnd)) - cast(*void)(*instance)) == 16, "ma_fader.volumeEnd has unexpected offset % instead of 16", ((cast(*void)(*instance.volumeEnd)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_fader.volumeEnd)) == 4, "ma_fader.volumeEnd has unexpected size % instead of 4", size_of(type_of(ma_fader.volumeEnd)));
        assert(((cast(*void)(*instance.lengthInFrames)) - cast(*void)(*instance)) == 24, "ma_fader.lengthInFrames has unexpected offset % instead of 24", ((cast(*void)(*instance.lengthInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_fader.lengthInFrames)) == 8, "ma_fader.lengthInFrames has unexpected size % instead of 8", size_of(type_of(ma_fader.lengthInFrames)));
        assert(((cast(*void)(*instance.cursorInFrames)) - cast(*void)(*instance)) == 32, "ma_fader.cursorInFrames has unexpected offset % instead of 32", ((cast(*void)(*instance.cursorInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_fader.cursorInFrames)) == 8, "ma_fader.cursorInFrames has unexpected size % instead of 8", size_of(type_of(ma_fader.cursorInFrames)));
        assert(size_of(ma_fader) == 40, "ma_fader has size % instead of 40", size_of(ma_fader));
    }

    {
        instance: ma_vec3f;
        assert(((cast(*void)(*instance.x)) - cast(*void)(*instance)) == 0, "ma_vec3f.x has unexpected offset % instead of 0", ((cast(*void)(*instance.x)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_vec3f.x)) == 4, "ma_vec3f.x has unexpected size % instead of 4", size_of(type_of(ma_vec3f.x)));
        assert(((cast(*void)(*instance.y)) - cast(*void)(*instance)) == 4, "ma_vec3f.y has unexpected offset % instead of 4", ((cast(*void)(*instance.y)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_vec3f.y)) == 4, "ma_vec3f.y has unexpected size % instead of 4", size_of(type_of(ma_vec3f.y)));
        assert(((cast(*void)(*instance.z)) - cast(*void)(*instance)) == 8, "ma_vec3f.z has unexpected offset % instead of 8", ((cast(*void)(*instance.z)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_vec3f.z)) == 4, "ma_vec3f.z has unexpected size % instead of 4", size_of(type_of(ma_vec3f.z)));
        assert(size_of(ma_vec3f) == 12, "ma_vec3f has size % instead of 12", size_of(ma_vec3f));
    }

    {
        instance: ma_atomic_vec3f;
        assert(((cast(*void)(*instance.v)) - cast(*void)(*instance)) == 0, "ma_atomic_vec3f.v has unexpected offset % instead of 0", ((cast(*void)(*instance.v)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_vec3f.v)) == 12, "ma_atomic_vec3f.v has unexpected size % instead of 12", size_of(type_of(ma_atomic_vec3f.v)));
        assert(((cast(*void)(*instance.lock)) - cast(*void)(*instance)) == 12, "ma_atomic_vec3f.lock has unexpected offset % instead of 12", ((cast(*void)(*instance.lock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_vec3f.lock)) == 4, "ma_atomic_vec3f.lock has unexpected size % instead of 4", size_of(type_of(ma_atomic_vec3f.lock)));
        assert(size_of(ma_atomic_vec3f) == 16, "ma_atomic_vec3f has size % instead of 16", size_of(ma_atomic_vec3f));
    }

    {
        instance: ma_spatializer_listener_config;
        assert(((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)) == 0, "ma_spatializer_listener_config.channelsOut has unexpected offset % instead of 0", ((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener_config.channelsOut)) == 4, "ma_spatializer_listener_config.channelsOut has unexpected size % instead of 4", size_of(type_of(ma_spatializer_listener_config.channelsOut)));
        assert(((cast(*void)(*instance.pChannelMapOut)) - cast(*void)(*instance)) == 8, "ma_spatializer_listener_config.pChannelMapOut has unexpected offset % instead of 8", ((cast(*void)(*instance.pChannelMapOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener_config.pChannelMapOut)) == 8, "ma_spatializer_listener_config.pChannelMapOut has unexpected size % instead of 8", size_of(type_of(ma_spatializer_listener_config.pChannelMapOut)));
        assert(((cast(*void)(*instance.handedness)) - cast(*void)(*instance)) == 16, "ma_spatializer_listener_config.handedness has unexpected offset % instead of 16", ((cast(*void)(*instance.handedness)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener_config.handedness)) == 4, "ma_spatializer_listener_config.handedness has unexpected size % instead of 4", size_of(type_of(ma_spatializer_listener_config.handedness)));
        assert(((cast(*void)(*instance.coneInnerAngleInRadians)) - cast(*void)(*instance)) == 20, "ma_spatializer_listener_config.coneInnerAngleInRadians has unexpected offset % instead of 20", ((cast(*void)(*instance.coneInnerAngleInRadians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener_config.coneInnerAngleInRadians)) == 4, "ma_spatializer_listener_config.coneInnerAngleInRadians has unexpected size % instead of 4", size_of(type_of(ma_spatializer_listener_config.coneInnerAngleInRadians)));
        assert(((cast(*void)(*instance.coneOuterAngleInRadians)) - cast(*void)(*instance)) == 24, "ma_spatializer_listener_config.coneOuterAngleInRadians has unexpected offset % instead of 24", ((cast(*void)(*instance.coneOuterAngleInRadians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener_config.coneOuterAngleInRadians)) == 4, "ma_spatializer_listener_config.coneOuterAngleInRadians has unexpected size % instead of 4", size_of(type_of(ma_spatializer_listener_config.coneOuterAngleInRadians)));
        assert(((cast(*void)(*instance.coneOuterGain)) - cast(*void)(*instance)) == 28, "ma_spatializer_listener_config.coneOuterGain has unexpected offset % instead of 28", ((cast(*void)(*instance.coneOuterGain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener_config.coneOuterGain)) == 4, "ma_spatializer_listener_config.coneOuterGain has unexpected size % instead of 4", size_of(type_of(ma_spatializer_listener_config.coneOuterGain)));
        assert(((cast(*void)(*instance.speedOfSound)) - cast(*void)(*instance)) == 32, "ma_spatializer_listener_config.speedOfSound has unexpected offset % instead of 32", ((cast(*void)(*instance.speedOfSound)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener_config.speedOfSound)) == 4, "ma_spatializer_listener_config.speedOfSound has unexpected size % instead of 4", size_of(type_of(ma_spatializer_listener_config.speedOfSound)));
        assert(((cast(*void)(*instance.worldUp)) - cast(*void)(*instance)) == 36, "ma_spatializer_listener_config.worldUp has unexpected offset % instead of 36", ((cast(*void)(*instance.worldUp)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener_config.worldUp)) == 12, "ma_spatializer_listener_config.worldUp has unexpected size % instead of 12", size_of(type_of(ma_spatializer_listener_config.worldUp)));
        assert(size_of(ma_spatializer_listener_config) == 48, "ma_spatializer_listener_config has size % instead of 48", size_of(ma_spatializer_listener_config));
    }

    {
        instance: ma_spatializer_listener;
        assert(((cast(*void)(*instance.config)) - cast(*void)(*instance)) == 0, "ma_spatializer_listener.config has unexpected offset % instead of 0", ((cast(*void)(*instance.config)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener.config)) == 48, "ma_spatializer_listener.config has unexpected size % instead of 48", size_of(type_of(ma_spatializer_listener.config)));
        assert(((cast(*void)(*instance.position)) - cast(*void)(*instance)) == 48, "ma_spatializer_listener.position has unexpected offset % instead of 48", ((cast(*void)(*instance.position)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener.position)) == 16, "ma_spatializer_listener.position has unexpected size % instead of 16", size_of(type_of(ma_spatializer_listener.position)));
        assert(((cast(*void)(*instance.direction)) - cast(*void)(*instance)) == 64, "ma_spatializer_listener.direction has unexpected offset % instead of 64", ((cast(*void)(*instance.direction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener.direction)) == 16, "ma_spatializer_listener.direction has unexpected size % instead of 16", size_of(type_of(ma_spatializer_listener.direction)));
        assert(((cast(*void)(*instance.velocity)) - cast(*void)(*instance)) == 80, "ma_spatializer_listener.velocity has unexpected offset % instead of 80", ((cast(*void)(*instance.velocity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener.velocity)) == 16, "ma_spatializer_listener.velocity has unexpected size % instead of 16", size_of(type_of(ma_spatializer_listener.velocity)));
        assert(((cast(*void)(*instance.isEnabled)) - cast(*void)(*instance)) == 96, "ma_spatializer_listener.isEnabled has unexpected offset % instead of 96", ((cast(*void)(*instance.isEnabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener.isEnabled)) == 4, "ma_spatializer_listener.isEnabled has unexpected size % instead of 4", size_of(type_of(ma_spatializer_listener.isEnabled)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 100, "ma_spatializer_listener._ownsHeap has unexpected offset % instead of 100", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener._ownsHeap)) == 4, "ma_spatializer_listener._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_spatializer_listener._ownsHeap)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 104, "ma_spatializer_listener._pHeap has unexpected offset % instead of 104", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener._pHeap)) == 8, "ma_spatializer_listener._pHeap has unexpected size % instead of 8", size_of(type_of(ma_spatializer_listener._pHeap)));
        assert(size_of(ma_spatializer_listener) == 112, "ma_spatializer_listener has size % instead of 112", size_of(ma_spatializer_listener));
    }

    {
        instance: ma_spatializer_config;
        assert(((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)) == 0, "ma_spatializer_config.channelsIn has unexpected offset % instead of 0", ((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.channelsIn)) == 4, "ma_spatializer_config.channelsIn has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.channelsIn)));
        assert(((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)) == 4, "ma_spatializer_config.channelsOut has unexpected offset % instead of 4", ((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.channelsOut)) == 4, "ma_spatializer_config.channelsOut has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.channelsOut)));
        assert(((cast(*void)(*instance.pChannelMapIn)) - cast(*void)(*instance)) == 8, "ma_spatializer_config.pChannelMapIn has unexpected offset % instead of 8", ((cast(*void)(*instance.pChannelMapIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.pChannelMapIn)) == 8, "ma_spatializer_config.pChannelMapIn has unexpected size % instead of 8", size_of(type_of(ma_spatializer_config.pChannelMapIn)));
        assert(((cast(*void)(*instance.attenuationModel)) - cast(*void)(*instance)) == 16, "ma_spatializer_config.attenuationModel has unexpected offset % instead of 16", ((cast(*void)(*instance.attenuationModel)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.attenuationModel)) == 4, "ma_spatializer_config.attenuationModel has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.attenuationModel)));
        assert(((cast(*void)(*instance.positioning)) - cast(*void)(*instance)) == 20, "ma_spatializer_config.positioning has unexpected offset % instead of 20", ((cast(*void)(*instance.positioning)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.positioning)) == 4, "ma_spatializer_config.positioning has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.positioning)));
        assert(((cast(*void)(*instance.handedness)) - cast(*void)(*instance)) == 24, "ma_spatializer_config.handedness has unexpected offset % instead of 24", ((cast(*void)(*instance.handedness)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.handedness)) == 4, "ma_spatializer_config.handedness has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.handedness)));
        assert(((cast(*void)(*instance.minGain)) - cast(*void)(*instance)) == 28, "ma_spatializer_config.minGain has unexpected offset % instead of 28", ((cast(*void)(*instance.minGain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.minGain)) == 4, "ma_spatializer_config.minGain has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.minGain)));
        assert(((cast(*void)(*instance.maxGain)) - cast(*void)(*instance)) == 32, "ma_spatializer_config.maxGain has unexpected offset % instead of 32", ((cast(*void)(*instance.maxGain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.maxGain)) == 4, "ma_spatializer_config.maxGain has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.maxGain)));
        assert(((cast(*void)(*instance.minDistance)) - cast(*void)(*instance)) == 36, "ma_spatializer_config.minDistance has unexpected offset % instead of 36", ((cast(*void)(*instance.minDistance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.minDistance)) == 4, "ma_spatializer_config.minDistance has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.minDistance)));
        assert(((cast(*void)(*instance.maxDistance)) - cast(*void)(*instance)) == 40, "ma_spatializer_config.maxDistance has unexpected offset % instead of 40", ((cast(*void)(*instance.maxDistance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.maxDistance)) == 4, "ma_spatializer_config.maxDistance has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.maxDistance)));
        assert(((cast(*void)(*instance.rolloff)) - cast(*void)(*instance)) == 44, "ma_spatializer_config.rolloff has unexpected offset % instead of 44", ((cast(*void)(*instance.rolloff)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.rolloff)) == 4, "ma_spatializer_config.rolloff has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.rolloff)));
        assert(((cast(*void)(*instance.coneInnerAngleInRadians)) - cast(*void)(*instance)) == 48, "ma_spatializer_config.coneInnerAngleInRadians has unexpected offset % instead of 48", ((cast(*void)(*instance.coneInnerAngleInRadians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.coneInnerAngleInRadians)) == 4, "ma_spatializer_config.coneInnerAngleInRadians has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.coneInnerAngleInRadians)));
        assert(((cast(*void)(*instance.coneOuterAngleInRadians)) - cast(*void)(*instance)) == 52, "ma_spatializer_config.coneOuterAngleInRadians has unexpected offset % instead of 52", ((cast(*void)(*instance.coneOuterAngleInRadians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.coneOuterAngleInRadians)) == 4, "ma_spatializer_config.coneOuterAngleInRadians has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.coneOuterAngleInRadians)));
        assert(((cast(*void)(*instance.coneOuterGain)) - cast(*void)(*instance)) == 56, "ma_spatializer_config.coneOuterGain has unexpected offset % instead of 56", ((cast(*void)(*instance.coneOuterGain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.coneOuterGain)) == 4, "ma_spatializer_config.coneOuterGain has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.coneOuterGain)));
        assert(((cast(*void)(*instance.dopplerFactor)) - cast(*void)(*instance)) == 60, "ma_spatializer_config.dopplerFactor has unexpected offset % instead of 60", ((cast(*void)(*instance.dopplerFactor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.dopplerFactor)) == 4, "ma_spatializer_config.dopplerFactor has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.dopplerFactor)));
        assert(((cast(*void)(*instance.directionalAttenuationFactor)) - cast(*void)(*instance)) == 64, "ma_spatializer_config.directionalAttenuationFactor has unexpected offset % instead of 64", ((cast(*void)(*instance.directionalAttenuationFactor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.directionalAttenuationFactor)) == 4, "ma_spatializer_config.directionalAttenuationFactor has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.directionalAttenuationFactor)));
        assert(((cast(*void)(*instance.minSpatializationChannelGain)) - cast(*void)(*instance)) == 68, "ma_spatializer_config.minSpatializationChannelGain has unexpected offset % instead of 68", ((cast(*void)(*instance.minSpatializationChannelGain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.minSpatializationChannelGain)) == 4, "ma_spatializer_config.minSpatializationChannelGain has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.minSpatializationChannelGain)));
        assert(((cast(*void)(*instance.gainSmoothTimeInFrames)) - cast(*void)(*instance)) == 72, "ma_spatializer_config.gainSmoothTimeInFrames has unexpected offset % instead of 72", ((cast(*void)(*instance.gainSmoothTimeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_config.gainSmoothTimeInFrames)) == 4, "ma_spatializer_config.gainSmoothTimeInFrames has unexpected size % instead of 4", size_of(type_of(ma_spatializer_config.gainSmoothTimeInFrames)));
        assert(size_of(ma_spatializer_config) == 80, "ma_spatializer_config has size % instead of 80", size_of(ma_spatializer_config));
    }

    {
        instance: ma_spatializer;
        assert(((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)) == 0, "ma_spatializer.channelsIn has unexpected offset % instead of 0", ((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.channelsIn)) == 4, "ma_spatializer.channelsIn has unexpected size % instead of 4", size_of(type_of(ma_spatializer.channelsIn)));
        assert(((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)) == 4, "ma_spatializer.channelsOut has unexpected offset % instead of 4", ((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.channelsOut)) == 4, "ma_spatializer.channelsOut has unexpected size % instead of 4", size_of(type_of(ma_spatializer.channelsOut)));
        assert(((cast(*void)(*instance.pChannelMapIn)) - cast(*void)(*instance)) == 8, "ma_spatializer.pChannelMapIn has unexpected offset % instead of 8", ((cast(*void)(*instance.pChannelMapIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.pChannelMapIn)) == 8, "ma_spatializer.pChannelMapIn has unexpected size % instead of 8", size_of(type_of(ma_spatializer.pChannelMapIn)));
        assert(((cast(*void)(*instance.attenuationModel)) - cast(*void)(*instance)) == 16, "ma_spatializer.attenuationModel has unexpected offset % instead of 16", ((cast(*void)(*instance.attenuationModel)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.attenuationModel)) == 4, "ma_spatializer.attenuationModel has unexpected size % instead of 4", size_of(type_of(ma_spatializer.attenuationModel)));
        assert(((cast(*void)(*instance.positioning)) - cast(*void)(*instance)) == 20, "ma_spatializer.positioning has unexpected offset % instead of 20", ((cast(*void)(*instance.positioning)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.positioning)) == 4, "ma_spatializer.positioning has unexpected size % instead of 4", size_of(type_of(ma_spatializer.positioning)));
        assert(((cast(*void)(*instance.handedness)) - cast(*void)(*instance)) == 24, "ma_spatializer.handedness has unexpected offset % instead of 24", ((cast(*void)(*instance.handedness)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.handedness)) == 4, "ma_spatializer.handedness has unexpected size % instead of 4", size_of(type_of(ma_spatializer.handedness)));
        assert(((cast(*void)(*instance.minGain)) - cast(*void)(*instance)) == 28, "ma_spatializer.minGain has unexpected offset % instead of 28", ((cast(*void)(*instance.minGain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.minGain)) == 4, "ma_spatializer.minGain has unexpected size % instead of 4", size_of(type_of(ma_spatializer.minGain)));
        assert(((cast(*void)(*instance.maxGain)) - cast(*void)(*instance)) == 32, "ma_spatializer.maxGain has unexpected offset % instead of 32", ((cast(*void)(*instance.maxGain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.maxGain)) == 4, "ma_spatializer.maxGain has unexpected size % instead of 4", size_of(type_of(ma_spatializer.maxGain)));
        assert(((cast(*void)(*instance.minDistance)) - cast(*void)(*instance)) == 36, "ma_spatializer.minDistance has unexpected offset % instead of 36", ((cast(*void)(*instance.minDistance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.minDistance)) == 4, "ma_spatializer.minDistance has unexpected size % instead of 4", size_of(type_of(ma_spatializer.minDistance)));
        assert(((cast(*void)(*instance.maxDistance)) - cast(*void)(*instance)) == 40, "ma_spatializer.maxDistance has unexpected offset % instead of 40", ((cast(*void)(*instance.maxDistance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.maxDistance)) == 4, "ma_spatializer.maxDistance has unexpected size % instead of 4", size_of(type_of(ma_spatializer.maxDistance)));
        assert(((cast(*void)(*instance.rolloff)) - cast(*void)(*instance)) == 44, "ma_spatializer.rolloff has unexpected offset % instead of 44", ((cast(*void)(*instance.rolloff)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.rolloff)) == 4, "ma_spatializer.rolloff has unexpected size % instead of 4", size_of(type_of(ma_spatializer.rolloff)));
        assert(((cast(*void)(*instance.coneInnerAngleInRadians)) - cast(*void)(*instance)) == 48, "ma_spatializer.coneInnerAngleInRadians has unexpected offset % instead of 48", ((cast(*void)(*instance.coneInnerAngleInRadians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.coneInnerAngleInRadians)) == 4, "ma_spatializer.coneInnerAngleInRadians has unexpected size % instead of 4", size_of(type_of(ma_spatializer.coneInnerAngleInRadians)));
        assert(((cast(*void)(*instance.coneOuterAngleInRadians)) - cast(*void)(*instance)) == 52, "ma_spatializer.coneOuterAngleInRadians has unexpected offset % instead of 52", ((cast(*void)(*instance.coneOuterAngleInRadians)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.coneOuterAngleInRadians)) == 4, "ma_spatializer.coneOuterAngleInRadians has unexpected size % instead of 4", size_of(type_of(ma_spatializer.coneOuterAngleInRadians)));
        assert(((cast(*void)(*instance.coneOuterGain)) - cast(*void)(*instance)) == 56, "ma_spatializer.coneOuterGain has unexpected offset % instead of 56", ((cast(*void)(*instance.coneOuterGain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.coneOuterGain)) == 4, "ma_spatializer.coneOuterGain has unexpected size % instead of 4", size_of(type_of(ma_spatializer.coneOuterGain)));
        assert(((cast(*void)(*instance.dopplerFactor)) - cast(*void)(*instance)) == 60, "ma_spatializer.dopplerFactor has unexpected offset % instead of 60", ((cast(*void)(*instance.dopplerFactor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.dopplerFactor)) == 4, "ma_spatializer.dopplerFactor has unexpected size % instead of 4", size_of(type_of(ma_spatializer.dopplerFactor)));
        assert(((cast(*void)(*instance.directionalAttenuationFactor)) - cast(*void)(*instance)) == 64, "ma_spatializer.directionalAttenuationFactor has unexpected offset % instead of 64", ((cast(*void)(*instance.directionalAttenuationFactor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.directionalAttenuationFactor)) == 4, "ma_spatializer.directionalAttenuationFactor has unexpected size % instead of 4", size_of(type_of(ma_spatializer.directionalAttenuationFactor)));
        assert(((cast(*void)(*instance.gainSmoothTimeInFrames)) - cast(*void)(*instance)) == 68, "ma_spatializer.gainSmoothTimeInFrames has unexpected offset % instead of 68", ((cast(*void)(*instance.gainSmoothTimeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.gainSmoothTimeInFrames)) == 4, "ma_spatializer.gainSmoothTimeInFrames has unexpected size % instead of 4", size_of(type_of(ma_spatializer.gainSmoothTimeInFrames)));
        assert(((cast(*void)(*instance.position)) - cast(*void)(*instance)) == 72, "ma_spatializer.position has unexpected offset % instead of 72", ((cast(*void)(*instance.position)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.position)) == 16, "ma_spatializer.position has unexpected size % instead of 16", size_of(type_of(ma_spatializer.position)));
        assert(((cast(*void)(*instance.direction)) - cast(*void)(*instance)) == 88, "ma_spatializer.direction has unexpected offset % instead of 88", ((cast(*void)(*instance.direction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.direction)) == 16, "ma_spatializer.direction has unexpected size % instead of 16", size_of(type_of(ma_spatializer.direction)));
        assert(((cast(*void)(*instance.velocity)) - cast(*void)(*instance)) == 104, "ma_spatializer.velocity has unexpected offset % instead of 104", ((cast(*void)(*instance.velocity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.velocity)) == 16, "ma_spatializer.velocity has unexpected size % instead of 16", size_of(type_of(ma_spatializer.velocity)));
        assert(((cast(*void)(*instance.dopplerPitch)) - cast(*void)(*instance)) == 120, "ma_spatializer.dopplerPitch has unexpected offset % instead of 120", ((cast(*void)(*instance.dopplerPitch)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.dopplerPitch)) == 4, "ma_spatializer.dopplerPitch has unexpected size % instead of 4", size_of(type_of(ma_spatializer.dopplerPitch)));
        assert(((cast(*void)(*instance.minSpatializationChannelGain)) - cast(*void)(*instance)) == 124, "ma_spatializer.minSpatializationChannelGain has unexpected offset % instead of 124", ((cast(*void)(*instance.minSpatializationChannelGain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.minSpatializationChannelGain)) == 4, "ma_spatializer.minSpatializationChannelGain has unexpected size % instead of 4", size_of(type_of(ma_spatializer.minSpatializationChannelGain)));
        assert(((cast(*void)(*instance.gainer)) - cast(*void)(*instance)) == 128, "ma_spatializer.gainer has unexpected offset % instead of 128", ((cast(*void)(*instance.gainer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.gainer)) == 48, "ma_spatializer.gainer has unexpected size % instead of 48", size_of(type_of(ma_spatializer.gainer)));
        assert(((cast(*void)(*instance.pNewChannelGainsOut)) - cast(*void)(*instance)) == 176, "ma_spatializer.pNewChannelGainsOut has unexpected offset % instead of 176", ((cast(*void)(*instance.pNewChannelGainsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer.pNewChannelGainsOut)) == 8, "ma_spatializer.pNewChannelGainsOut has unexpected size % instead of 8", size_of(type_of(ma_spatializer.pNewChannelGainsOut)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 184, "ma_spatializer._pHeap has unexpected offset % instead of 184", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer._pHeap)) == 8, "ma_spatializer._pHeap has unexpected size % instead of 8", size_of(type_of(ma_spatializer._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 192, "ma_spatializer._ownsHeap has unexpected offset % instead of 192", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer._ownsHeap)) == 4, "ma_spatializer._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_spatializer._ownsHeap)));
        assert(size_of(ma_spatializer) == 200, "ma_spatializer has size % instead of 200", size_of(ma_spatializer));
    }

    {
        instance: ma_linear_resampler_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_linear_resampler_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler_config.format)) == 4, "ma_linear_resampler_config.format has unexpected size % instead of 4", size_of(type_of(ma_linear_resampler_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_linear_resampler_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler_config.channels)) == 4, "ma_linear_resampler_config.channels has unexpected size % instead of 4", size_of(type_of(ma_linear_resampler_config.channels)));
        assert(((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)) == 8, "ma_linear_resampler_config.sampleRateIn has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler_config.sampleRateIn)) == 4, "ma_linear_resampler_config.sampleRateIn has unexpected size % instead of 4", size_of(type_of(ma_linear_resampler_config.sampleRateIn)));
        assert(((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)) == 12, "ma_linear_resampler_config.sampleRateOut has unexpected offset % instead of 12", ((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler_config.sampleRateOut)) == 4, "ma_linear_resampler_config.sampleRateOut has unexpected size % instead of 4", size_of(type_of(ma_linear_resampler_config.sampleRateOut)));
        assert(((cast(*void)(*instance.lpfOrder)) - cast(*void)(*instance)) == 16, "ma_linear_resampler_config.lpfOrder has unexpected offset % instead of 16", ((cast(*void)(*instance.lpfOrder)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler_config.lpfOrder)) == 4, "ma_linear_resampler_config.lpfOrder has unexpected size % instead of 4", size_of(type_of(ma_linear_resampler_config.lpfOrder)));
        assert(((cast(*void)(*instance.lpfNyquistFactor)) - cast(*void)(*instance)) == 24, "ma_linear_resampler_config.lpfNyquistFactor has unexpected offset % instead of 24", ((cast(*void)(*instance.lpfNyquistFactor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler_config.lpfNyquistFactor)) == 8, "ma_linear_resampler_config.lpfNyquistFactor has unexpected size % instead of 8", size_of(type_of(ma_linear_resampler_config.lpfNyquistFactor)));
        assert(size_of(ma_linear_resampler_config) == 32, "ma_linear_resampler_config has size % instead of 32", size_of(ma_linear_resampler_config));
    }

    {
        instance: ma_linear_resampler;
        assert(((cast(*void)(*instance.config)) - cast(*void)(*instance)) == 0, "ma_linear_resampler.config has unexpected offset % instead of 0", ((cast(*void)(*instance.config)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler.config)) == 32, "ma_linear_resampler.config has unexpected size % instead of 32", size_of(type_of(ma_linear_resampler.config)));
        assert(((cast(*void)(*instance.inAdvanceInt)) - cast(*void)(*instance)) == 32, "ma_linear_resampler.inAdvanceInt has unexpected offset % instead of 32", ((cast(*void)(*instance.inAdvanceInt)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler.inAdvanceInt)) == 4, "ma_linear_resampler.inAdvanceInt has unexpected size % instead of 4", size_of(type_of(ma_linear_resampler.inAdvanceInt)));
        assert(((cast(*void)(*instance.inAdvanceFrac)) - cast(*void)(*instance)) == 36, "ma_linear_resampler.inAdvanceFrac has unexpected offset % instead of 36", ((cast(*void)(*instance.inAdvanceFrac)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler.inAdvanceFrac)) == 4, "ma_linear_resampler.inAdvanceFrac has unexpected size % instead of 4", size_of(type_of(ma_linear_resampler.inAdvanceFrac)));
        assert(((cast(*void)(*instance.inTimeInt)) - cast(*void)(*instance)) == 40, "ma_linear_resampler.inTimeInt has unexpected offset % instead of 40", ((cast(*void)(*instance.inTimeInt)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler.inTimeInt)) == 4, "ma_linear_resampler.inTimeInt has unexpected size % instead of 4", size_of(type_of(ma_linear_resampler.inTimeInt)));
        assert(((cast(*void)(*instance.inTimeFrac)) - cast(*void)(*instance)) == 44, "ma_linear_resampler.inTimeFrac has unexpected offset % instead of 44", ((cast(*void)(*instance.inTimeFrac)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler.inTimeFrac)) == 4, "ma_linear_resampler.inTimeFrac has unexpected size % instead of 4", size_of(type_of(ma_linear_resampler.inTimeFrac)));
        assert(((cast(*void)(*instance.x0)) - cast(*void)(*instance)) == 48, "ma_linear_resampler.x0 has unexpected offset % instead of 48", ((cast(*void)(*instance.x0)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler.x0)) == 8, "ma_linear_resampler.x0 has unexpected size % instead of 8", size_of(type_of(ma_linear_resampler.x0)));
        assert(((cast(*void)(*instance.x1)) - cast(*void)(*instance)) == 56, "ma_linear_resampler.x1 has unexpected offset % instead of 56", ((cast(*void)(*instance.x1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler.x1)) == 8, "ma_linear_resampler.x1 has unexpected size % instead of 8", size_of(type_of(ma_linear_resampler.x1)));
        assert(((cast(*void)(*instance.lpf)) - cast(*void)(*instance)) == 64, "ma_linear_resampler.lpf has unexpected offset % instead of 64", ((cast(*void)(*instance.lpf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler.lpf)) == 56, "ma_linear_resampler.lpf has unexpected size % instead of 56", size_of(type_of(ma_linear_resampler.lpf)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 120, "ma_linear_resampler._pHeap has unexpected offset % instead of 120", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler._pHeap)) == 8, "ma_linear_resampler._pHeap has unexpected size % instead of 8", size_of(type_of(ma_linear_resampler._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 128, "ma_linear_resampler._ownsHeap has unexpected offset % instead of 128", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler._ownsHeap)) == 4, "ma_linear_resampler._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_linear_resampler._ownsHeap)));
        assert(size_of(ma_linear_resampler) == 136, "ma_linear_resampler has size % instead of 136", size_of(ma_linear_resampler));
    }

    {
        instance: ma_resampling_backend_vtable;
        assert(((cast(*void)(*instance.onGetHeapSize)) - cast(*void)(*instance)) == 0, "ma_resampling_backend_vtable.onGetHeapSize has unexpected offset % instead of 0", ((cast(*void)(*instance.onGetHeapSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampling_backend_vtable.onGetHeapSize)) == 8, "ma_resampling_backend_vtable.onGetHeapSize has unexpected size % instead of 8", size_of(type_of(ma_resampling_backend_vtable.onGetHeapSize)));
        assert(((cast(*void)(*instance.onInit)) - cast(*void)(*instance)) == 8, "ma_resampling_backend_vtable.onInit has unexpected offset % instead of 8", ((cast(*void)(*instance.onInit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampling_backend_vtable.onInit)) == 8, "ma_resampling_backend_vtable.onInit has unexpected size % instead of 8", size_of(type_of(ma_resampling_backend_vtable.onInit)));
        assert(((cast(*void)(*instance.onUninit)) - cast(*void)(*instance)) == 16, "ma_resampling_backend_vtable.onUninit has unexpected offset % instead of 16", ((cast(*void)(*instance.onUninit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampling_backend_vtable.onUninit)) == 8, "ma_resampling_backend_vtable.onUninit has unexpected size % instead of 8", size_of(type_of(ma_resampling_backend_vtable.onUninit)));
        assert(((cast(*void)(*instance.onProcess)) - cast(*void)(*instance)) == 24, "ma_resampling_backend_vtable.onProcess has unexpected offset % instead of 24", ((cast(*void)(*instance.onProcess)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampling_backend_vtable.onProcess)) == 8, "ma_resampling_backend_vtable.onProcess has unexpected size % instead of 8", size_of(type_of(ma_resampling_backend_vtable.onProcess)));
        assert(((cast(*void)(*instance.onSetRate)) - cast(*void)(*instance)) == 32, "ma_resampling_backend_vtable.onSetRate has unexpected offset % instead of 32", ((cast(*void)(*instance.onSetRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampling_backend_vtable.onSetRate)) == 8, "ma_resampling_backend_vtable.onSetRate has unexpected size % instead of 8", size_of(type_of(ma_resampling_backend_vtable.onSetRate)));
        assert(((cast(*void)(*instance.onGetInputLatency)) - cast(*void)(*instance)) == 40, "ma_resampling_backend_vtable.onGetInputLatency has unexpected offset % instead of 40", ((cast(*void)(*instance.onGetInputLatency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampling_backend_vtable.onGetInputLatency)) == 8, "ma_resampling_backend_vtable.onGetInputLatency has unexpected size % instead of 8", size_of(type_of(ma_resampling_backend_vtable.onGetInputLatency)));
        assert(((cast(*void)(*instance.onGetOutputLatency)) - cast(*void)(*instance)) == 48, "ma_resampling_backend_vtable.onGetOutputLatency has unexpected offset % instead of 48", ((cast(*void)(*instance.onGetOutputLatency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampling_backend_vtable.onGetOutputLatency)) == 8, "ma_resampling_backend_vtable.onGetOutputLatency has unexpected size % instead of 8", size_of(type_of(ma_resampling_backend_vtable.onGetOutputLatency)));
        assert(((cast(*void)(*instance.onGetRequiredInputFrameCount)) - cast(*void)(*instance)) == 56, "ma_resampling_backend_vtable.onGetRequiredInputFrameCount has unexpected offset % instead of 56", ((cast(*void)(*instance.onGetRequiredInputFrameCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampling_backend_vtable.onGetRequiredInputFrameCount)) == 8, "ma_resampling_backend_vtable.onGetRequiredInputFrameCount has unexpected size % instead of 8", size_of(type_of(ma_resampling_backend_vtable.onGetRequiredInputFrameCount)));
        assert(((cast(*void)(*instance.onGetExpectedOutputFrameCount)) - cast(*void)(*instance)) == 64, "ma_resampling_backend_vtable.onGetExpectedOutputFrameCount has unexpected offset % instead of 64", ((cast(*void)(*instance.onGetExpectedOutputFrameCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampling_backend_vtable.onGetExpectedOutputFrameCount)) == 8, "ma_resampling_backend_vtable.onGetExpectedOutputFrameCount has unexpected size % instead of 8", size_of(type_of(ma_resampling_backend_vtable.onGetExpectedOutputFrameCount)));
        assert(((cast(*void)(*instance.onReset)) - cast(*void)(*instance)) == 72, "ma_resampling_backend_vtable.onReset has unexpected offset % instead of 72", ((cast(*void)(*instance.onReset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampling_backend_vtable.onReset)) == 8, "ma_resampling_backend_vtable.onReset has unexpected size % instead of 8", size_of(type_of(ma_resampling_backend_vtable.onReset)));
        assert(size_of(ma_resampling_backend_vtable) == 80, "ma_resampling_backend_vtable has size % instead of 80", size_of(ma_resampling_backend_vtable));
    }

    {
        instance: ma_resampler_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_resampler_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler_config.format)) == 4, "ma_resampler_config.format has unexpected size % instead of 4", size_of(type_of(ma_resampler_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_resampler_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler_config.channels)) == 4, "ma_resampler_config.channels has unexpected size % instead of 4", size_of(type_of(ma_resampler_config.channels)));
        assert(((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)) == 8, "ma_resampler_config.sampleRateIn has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler_config.sampleRateIn)) == 4, "ma_resampler_config.sampleRateIn has unexpected size % instead of 4", size_of(type_of(ma_resampler_config.sampleRateIn)));
        assert(((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)) == 12, "ma_resampler_config.sampleRateOut has unexpected offset % instead of 12", ((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler_config.sampleRateOut)) == 4, "ma_resampler_config.sampleRateOut has unexpected size % instead of 4", size_of(type_of(ma_resampler_config.sampleRateOut)));
        assert(((cast(*void)(*instance.algorithm)) - cast(*void)(*instance)) == 16, "ma_resampler_config.algorithm has unexpected offset % instead of 16", ((cast(*void)(*instance.algorithm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler_config.algorithm)) == 4, "ma_resampler_config.algorithm has unexpected size % instead of 4", size_of(type_of(ma_resampler_config.algorithm)));
        assert(((cast(*void)(*instance.pBackendVTable)) - cast(*void)(*instance)) == 24, "ma_resampler_config.pBackendVTable has unexpected offset % instead of 24", ((cast(*void)(*instance.pBackendVTable)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler_config.pBackendVTable)) == 8, "ma_resampler_config.pBackendVTable has unexpected size % instead of 8", size_of(type_of(ma_resampler_config.pBackendVTable)));
        assert(((cast(*void)(*instance.pBackendUserData)) - cast(*void)(*instance)) == 32, "ma_resampler_config.pBackendUserData has unexpected offset % instead of 32", ((cast(*void)(*instance.pBackendUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler_config.pBackendUserData)) == 8, "ma_resampler_config.pBackendUserData has unexpected size % instead of 8", size_of(type_of(ma_resampler_config.pBackendUserData)));
        assert(((cast(*void)(*instance.linear)) - cast(*void)(*instance)) == 40, "ma_resampler_config.linear has unexpected offset % instead of 40", ((cast(*void)(*instance.linear)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler_config.linear)) == 4, "ma_resampler_config.linear has unexpected size % instead of 4", size_of(type_of(ma_resampler_config.linear)));
        assert(size_of(ma_resampler_config) == 48, "ma_resampler_config has size % instead of 48", size_of(ma_resampler_config));
    }

    {
        instance: ma_resampler;
        assert(((cast(*void)(*instance.pBackend)) - cast(*void)(*instance)) == 0, "ma_resampler.pBackend has unexpected offset % instead of 0", ((cast(*void)(*instance.pBackend)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler.pBackend)) == 8, "ma_resampler.pBackend has unexpected size % instead of 8", size_of(type_of(ma_resampler.pBackend)));
        assert(((cast(*void)(*instance.pBackendVTable)) - cast(*void)(*instance)) == 8, "ma_resampler.pBackendVTable has unexpected offset % instead of 8", ((cast(*void)(*instance.pBackendVTable)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler.pBackendVTable)) == 8, "ma_resampler.pBackendVTable has unexpected size % instead of 8", size_of(type_of(ma_resampler.pBackendVTable)));
        assert(((cast(*void)(*instance.pBackendUserData)) - cast(*void)(*instance)) == 16, "ma_resampler.pBackendUserData has unexpected offset % instead of 16", ((cast(*void)(*instance.pBackendUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler.pBackendUserData)) == 8, "ma_resampler.pBackendUserData has unexpected size % instead of 8", size_of(type_of(ma_resampler.pBackendUserData)));
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 24, "ma_resampler.format has unexpected offset % instead of 24", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler.format)) == 4, "ma_resampler.format has unexpected size % instead of 4", size_of(type_of(ma_resampler.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 28, "ma_resampler.channels has unexpected offset % instead of 28", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler.channels)) == 4, "ma_resampler.channels has unexpected size % instead of 4", size_of(type_of(ma_resampler.channels)));
        assert(((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)) == 32, "ma_resampler.sampleRateIn has unexpected offset % instead of 32", ((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler.sampleRateIn)) == 4, "ma_resampler.sampleRateIn has unexpected size % instead of 4", size_of(type_of(ma_resampler.sampleRateIn)));
        assert(((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)) == 36, "ma_resampler.sampleRateOut has unexpected offset % instead of 36", ((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler.sampleRateOut)) == 4, "ma_resampler.sampleRateOut has unexpected size % instead of 4", size_of(type_of(ma_resampler.sampleRateOut)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 40, "ma_resampler.state has unexpected offset % instead of 40", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler.state)) == 136, "ma_resampler.state has unexpected size % instead of 136", size_of(type_of(ma_resampler.state)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 176, "ma_resampler._pHeap has unexpected offset % instead of 176", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler._pHeap)) == 8, "ma_resampler._pHeap has unexpected size % instead of 8", size_of(type_of(ma_resampler._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 184, "ma_resampler._ownsHeap has unexpected offset % instead of 184", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resampler._ownsHeap)) == 4, "ma_resampler._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_resampler._ownsHeap)));
        assert(size_of(ma_resampler) == 192, "ma_resampler has size % instead of 192", size_of(ma_resampler));
    }

    {
        instance: ma_channel_converter_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_channel_converter_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_config.format)) == 4, "ma_channel_converter_config.format has unexpected size % instead of 4", size_of(type_of(ma_channel_converter_config.format)));
        assert(((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)) == 4, "ma_channel_converter_config.channelsIn has unexpected offset % instead of 4", ((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_config.channelsIn)) == 4, "ma_channel_converter_config.channelsIn has unexpected size % instead of 4", size_of(type_of(ma_channel_converter_config.channelsIn)));
        assert(((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)) == 8, "ma_channel_converter_config.channelsOut has unexpected offset % instead of 8", ((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_config.channelsOut)) == 4, "ma_channel_converter_config.channelsOut has unexpected size % instead of 4", size_of(type_of(ma_channel_converter_config.channelsOut)));
        assert(((cast(*void)(*instance.pChannelMapIn)) - cast(*void)(*instance)) == 16, "ma_channel_converter_config.pChannelMapIn has unexpected offset % instead of 16", ((cast(*void)(*instance.pChannelMapIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_config.pChannelMapIn)) == 8, "ma_channel_converter_config.pChannelMapIn has unexpected size % instead of 8", size_of(type_of(ma_channel_converter_config.pChannelMapIn)));
        assert(((cast(*void)(*instance.pChannelMapOut)) - cast(*void)(*instance)) == 24, "ma_channel_converter_config.pChannelMapOut has unexpected offset % instead of 24", ((cast(*void)(*instance.pChannelMapOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_config.pChannelMapOut)) == 8, "ma_channel_converter_config.pChannelMapOut has unexpected size % instead of 8", size_of(type_of(ma_channel_converter_config.pChannelMapOut)));
        assert(((cast(*void)(*instance.mixingMode)) - cast(*void)(*instance)) == 32, "ma_channel_converter_config.mixingMode has unexpected offset % instead of 32", ((cast(*void)(*instance.mixingMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_config.mixingMode)) == 4, "ma_channel_converter_config.mixingMode has unexpected size % instead of 4", size_of(type_of(ma_channel_converter_config.mixingMode)));
        assert(((cast(*void)(*instance.calculateLFEFromSpatialChannels)) - cast(*void)(*instance)) == 36, "ma_channel_converter_config.calculateLFEFromSpatialChannels has unexpected offset % instead of 36", ((cast(*void)(*instance.calculateLFEFromSpatialChannels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_config.calculateLFEFromSpatialChannels)) == 4, "ma_channel_converter_config.calculateLFEFromSpatialChannels has unexpected size % instead of 4", size_of(type_of(ma_channel_converter_config.calculateLFEFromSpatialChannels)));
        assert(((cast(*void)(*instance.ppWeights)) - cast(*void)(*instance)) == 40, "ma_channel_converter_config.ppWeights has unexpected offset % instead of 40", ((cast(*void)(*instance.ppWeights)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_config.ppWeights)) == 8, "ma_channel_converter_config.ppWeights has unexpected size % instead of 8", size_of(type_of(ma_channel_converter_config.ppWeights)));
        assert(size_of(ma_channel_converter_config) == 48, "ma_channel_converter_config has size % instead of 48", size_of(ma_channel_converter_config));
    }

    {
        instance: ma_channel_converter;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_channel_converter.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter.format)) == 4, "ma_channel_converter.format has unexpected size % instead of 4", size_of(type_of(ma_channel_converter.format)));
        assert(((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)) == 4, "ma_channel_converter.channelsIn has unexpected offset % instead of 4", ((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter.channelsIn)) == 4, "ma_channel_converter.channelsIn has unexpected size % instead of 4", size_of(type_of(ma_channel_converter.channelsIn)));
        assert(((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)) == 8, "ma_channel_converter.channelsOut has unexpected offset % instead of 8", ((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter.channelsOut)) == 4, "ma_channel_converter.channelsOut has unexpected size % instead of 4", size_of(type_of(ma_channel_converter.channelsOut)));
        assert(((cast(*void)(*instance.mixingMode)) - cast(*void)(*instance)) == 12, "ma_channel_converter.mixingMode has unexpected offset % instead of 12", ((cast(*void)(*instance.mixingMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter.mixingMode)) == 4, "ma_channel_converter.mixingMode has unexpected size % instead of 4", size_of(type_of(ma_channel_converter.mixingMode)));
        assert(((cast(*void)(*instance.conversionPath)) - cast(*void)(*instance)) == 16, "ma_channel_converter.conversionPath has unexpected offset % instead of 16", ((cast(*void)(*instance.conversionPath)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter.conversionPath)) == 4, "ma_channel_converter.conversionPath has unexpected size % instead of 4", size_of(type_of(ma_channel_converter.conversionPath)));
        assert(((cast(*void)(*instance.pChannelMapIn)) - cast(*void)(*instance)) == 24, "ma_channel_converter.pChannelMapIn has unexpected offset % instead of 24", ((cast(*void)(*instance.pChannelMapIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter.pChannelMapIn)) == 8, "ma_channel_converter.pChannelMapIn has unexpected size % instead of 8", size_of(type_of(ma_channel_converter.pChannelMapIn)));
        assert(((cast(*void)(*instance.pChannelMapOut)) - cast(*void)(*instance)) == 32, "ma_channel_converter.pChannelMapOut has unexpected offset % instead of 32", ((cast(*void)(*instance.pChannelMapOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter.pChannelMapOut)) == 8, "ma_channel_converter.pChannelMapOut has unexpected size % instead of 8", size_of(type_of(ma_channel_converter.pChannelMapOut)));
        assert(((cast(*void)(*instance.pShuffleTable)) - cast(*void)(*instance)) == 40, "ma_channel_converter.pShuffleTable has unexpected offset % instead of 40", ((cast(*void)(*instance.pShuffleTable)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter.pShuffleTable)) == 8, "ma_channel_converter.pShuffleTable has unexpected size % instead of 8", size_of(type_of(ma_channel_converter.pShuffleTable)));
        assert(((cast(*void)(*instance.weights)) - cast(*void)(*instance)) == 48, "ma_channel_converter.weights has unexpected offset % instead of 48", ((cast(*void)(*instance.weights)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter.weights)) == 8, "ma_channel_converter.weights has unexpected size % instead of 8", size_of(type_of(ma_channel_converter.weights)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 56, "ma_channel_converter._pHeap has unexpected offset % instead of 56", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter._pHeap)) == 8, "ma_channel_converter._pHeap has unexpected size % instead of 8", size_of(type_of(ma_channel_converter._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 64, "ma_channel_converter._ownsHeap has unexpected offset % instead of 64", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter._ownsHeap)) == 4, "ma_channel_converter._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_channel_converter._ownsHeap)));
        assert(size_of(ma_channel_converter) == 72, "ma_channel_converter has size % instead of 72", size_of(ma_channel_converter));
    }

    {
        instance: ma_data_converter_config;
        assert(((cast(*void)(*instance.formatIn)) - cast(*void)(*instance)) == 0, "ma_data_converter_config.formatIn has unexpected offset % instead of 0", ((cast(*void)(*instance.formatIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.formatIn)) == 4, "ma_data_converter_config.formatIn has unexpected size % instead of 4", size_of(type_of(ma_data_converter_config.formatIn)));
        assert(((cast(*void)(*instance.formatOut)) - cast(*void)(*instance)) == 4, "ma_data_converter_config.formatOut has unexpected offset % instead of 4", ((cast(*void)(*instance.formatOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.formatOut)) == 4, "ma_data_converter_config.formatOut has unexpected size % instead of 4", size_of(type_of(ma_data_converter_config.formatOut)));
        assert(((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)) == 8, "ma_data_converter_config.channelsIn has unexpected offset % instead of 8", ((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.channelsIn)) == 4, "ma_data_converter_config.channelsIn has unexpected size % instead of 4", size_of(type_of(ma_data_converter_config.channelsIn)));
        assert(((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)) == 12, "ma_data_converter_config.channelsOut has unexpected offset % instead of 12", ((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.channelsOut)) == 4, "ma_data_converter_config.channelsOut has unexpected size % instead of 4", size_of(type_of(ma_data_converter_config.channelsOut)));
        assert(((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)) == 16, "ma_data_converter_config.sampleRateIn has unexpected offset % instead of 16", ((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.sampleRateIn)) == 4, "ma_data_converter_config.sampleRateIn has unexpected size % instead of 4", size_of(type_of(ma_data_converter_config.sampleRateIn)));
        assert(((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)) == 20, "ma_data_converter_config.sampleRateOut has unexpected offset % instead of 20", ((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.sampleRateOut)) == 4, "ma_data_converter_config.sampleRateOut has unexpected size % instead of 4", size_of(type_of(ma_data_converter_config.sampleRateOut)));
        assert(((cast(*void)(*instance.pChannelMapIn)) - cast(*void)(*instance)) == 24, "ma_data_converter_config.pChannelMapIn has unexpected offset % instead of 24", ((cast(*void)(*instance.pChannelMapIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.pChannelMapIn)) == 8, "ma_data_converter_config.pChannelMapIn has unexpected size % instead of 8", size_of(type_of(ma_data_converter_config.pChannelMapIn)));
        assert(((cast(*void)(*instance.pChannelMapOut)) - cast(*void)(*instance)) == 32, "ma_data_converter_config.pChannelMapOut has unexpected offset % instead of 32", ((cast(*void)(*instance.pChannelMapOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.pChannelMapOut)) == 8, "ma_data_converter_config.pChannelMapOut has unexpected size % instead of 8", size_of(type_of(ma_data_converter_config.pChannelMapOut)));
        assert(((cast(*void)(*instance.ditherMode)) - cast(*void)(*instance)) == 40, "ma_data_converter_config.ditherMode has unexpected offset % instead of 40", ((cast(*void)(*instance.ditherMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.ditherMode)) == 4, "ma_data_converter_config.ditherMode has unexpected size % instead of 4", size_of(type_of(ma_data_converter_config.ditherMode)));
        assert(((cast(*void)(*instance.channelMixMode)) - cast(*void)(*instance)) == 44, "ma_data_converter_config.channelMixMode has unexpected offset % instead of 44", ((cast(*void)(*instance.channelMixMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.channelMixMode)) == 4, "ma_data_converter_config.channelMixMode has unexpected size % instead of 4", size_of(type_of(ma_data_converter_config.channelMixMode)));
        assert(((cast(*void)(*instance.calculateLFEFromSpatialChannels)) - cast(*void)(*instance)) == 48, "ma_data_converter_config.calculateLFEFromSpatialChannels has unexpected offset % instead of 48", ((cast(*void)(*instance.calculateLFEFromSpatialChannels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.calculateLFEFromSpatialChannels)) == 4, "ma_data_converter_config.calculateLFEFromSpatialChannels has unexpected size % instead of 4", size_of(type_of(ma_data_converter_config.calculateLFEFromSpatialChannels)));
        assert(((cast(*void)(*instance.ppChannelWeights)) - cast(*void)(*instance)) == 56, "ma_data_converter_config.ppChannelWeights has unexpected offset % instead of 56", ((cast(*void)(*instance.ppChannelWeights)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.ppChannelWeights)) == 8, "ma_data_converter_config.ppChannelWeights has unexpected size % instead of 8", size_of(type_of(ma_data_converter_config.ppChannelWeights)));
        assert(((cast(*void)(*instance.allowDynamicSampleRate)) - cast(*void)(*instance)) == 64, "ma_data_converter_config.allowDynamicSampleRate has unexpected offset % instead of 64", ((cast(*void)(*instance.allowDynamicSampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.allowDynamicSampleRate)) == 4, "ma_data_converter_config.allowDynamicSampleRate has unexpected size % instead of 4", size_of(type_of(ma_data_converter_config.allowDynamicSampleRate)));
        assert(((cast(*void)(*instance.resampling)) - cast(*void)(*instance)) == 72, "ma_data_converter_config.resampling has unexpected offset % instead of 72", ((cast(*void)(*instance.resampling)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_config.resampling)) == 48, "ma_data_converter_config.resampling has unexpected size % instead of 48", size_of(type_of(ma_data_converter_config.resampling)));
        assert(size_of(ma_data_converter_config) == 120, "ma_data_converter_config has size % instead of 120", size_of(ma_data_converter_config));
    }

    {
        instance: ma_data_converter;
        assert(((cast(*void)(*instance.formatIn)) - cast(*void)(*instance)) == 0, "ma_data_converter.formatIn has unexpected offset % instead of 0", ((cast(*void)(*instance.formatIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.formatIn)) == 4, "ma_data_converter.formatIn has unexpected size % instead of 4", size_of(type_of(ma_data_converter.formatIn)));
        assert(((cast(*void)(*instance.formatOut)) - cast(*void)(*instance)) == 4, "ma_data_converter.formatOut has unexpected offset % instead of 4", ((cast(*void)(*instance.formatOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.formatOut)) == 4, "ma_data_converter.formatOut has unexpected size % instead of 4", size_of(type_of(ma_data_converter.formatOut)));
        assert(((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)) == 8, "ma_data_converter.channelsIn has unexpected offset % instead of 8", ((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.channelsIn)) == 4, "ma_data_converter.channelsIn has unexpected size % instead of 4", size_of(type_of(ma_data_converter.channelsIn)));
        assert(((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)) == 12, "ma_data_converter.channelsOut has unexpected offset % instead of 12", ((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.channelsOut)) == 4, "ma_data_converter.channelsOut has unexpected size % instead of 4", size_of(type_of(ma_data_converter.channelsOut)));
        assert(((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)) == 16, "ma_data_converter.sampleRateIn has unexpected offset % instead of 16", ((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.sampleRateIn)) == 4, "ma_data_converter.sampleRateIn has unexpected size % instead of 4", size_of(type_of(ma_data_converter.sampleRateIn)));
        assert(((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)) == 20, "ma_data_converter.sampleRateOut has unexpected offset % instead of 20", ((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.sampleRateOut)) == 4, "ma_data_converter.sampleRateOut has unexpected size % instead of 4", size_of(type_of(ma_data_converter.sampleRateOut)));
        assert(((cast(*void)(*instance.ditherMode)) - cast(*void)(*instance)) == 24, "ma_data_converter.ditherMode has unexpected offset % instead of 24", ((cast(*void)(*instance.ditherMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.ditherMode)) == 4, "ma_data_converter.ditherMode has unexpected size % instead of 4", size_of(type_of(ma_data_converter.ditherMode)));
        assert(((cast(*void)(*instance.executionPath)) - cast(*void)(*instance)) == 28, "ma_data_converter.executionPath has unexpected offset % instead of 28", ((cast(*void)(*instance.executionPath)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.executionPath)) == 4, "ma_data_converter.executionPath has unexpected size % instead of 4", size_of(type_of(ma_data_converter.executionPath)));
        assert(((cast(*void)(*instance.channelConverter)) - cast(*void)(*instance)) == 32, "ma_data_converter.channelConverter has unexpected offset % instead of 32", ((cast(*void)(*instance.channelConverter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.channelConverter)) == 72, "ma_data_converter.channelConverter has unexpected size % instead of 72", size_of(type_of(ma_data_converter.channelConverter)));
        assert(((cast(*void)(*instance.resampler)) - cast(*void)(*instance)) == 104, "ma_data_converter.resampler has unexpected offset % instead of 104", ((cast(*void)(*instance.resampler)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.resampler)) == 192, "ma_data_converter.resampler has unexpected size % instead of 192", size_of(type_of(ma_data_converter.resampler)));
        assert(((cast(*void)(*instance.hasPreFormatConversion)) - cast(*void)(*instance)) == 296, "ma_data_converter.hasPreFormatConversion has unexpected offset % instead of 296", ((cast(*void)(*instance.hasPreFormatConversion)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.hasPreFormatConversion)) == 1, "ma_data_converter.hasPreFormatConversion has unexpected size % instead of 1", size_of(type_of(ma_data_converter.hasPreFormatConversion)));
        assert(((cast(*void)(*instance.hasPostFormatConversion)) - cast(*void)(*instance)) == 297, "ma_data_converter.hasPostFormatConversion has unexpected offset % instead of 297", ((cast(*void)(*instance.hasPostFormatConversion)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.hasPostFormatConversion)) == 1, "ma_data_converter.hasPostFormatConversion has unexpected size % instead of 1", size_of(type_of(ma_data_converter.hasPostFormatConversion)));
        assert(((cast(*void)(*instance.hasChannelConverter)) - cast(*void)(*instance)) == 298, "ma_data_converter.hasChannelConverter has unexpected offset % instead of 298", ((cast(*void)(*instance.hasChannelConverter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.hasChannelConverter)) == 1, "ma_data_converter.hasChannelConverter has unexpected size % instead of 1", size_of(type_of(ma_data_converter.hasChannelConverter)));
        assert(((cast(*void)(*instance.hasResampler)) - cast(*void)(*instance)) == 299, "ma_data_converter.hasResampler has unexpected offset % instead of 299", ((cast(*void)(*instance.hasResampler)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.hasResampler)) == 1, "ma_data_converter.hasResampler has unexpected size % instead of 1", size_of(type_of(ma_data_converter.hasResampler)));
        assert(((cast(*void)(*instance.isPassthrough)) - cast(*void)(*instance)) == 300, "ma_data_converter.isPassthrough has unexpected offset % instead of 300", ((cast(*void)(*instance.isPassthrough)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter.isPassthrough)) == 1, "ma_data_converter.isPassthrough has unexpected size % instead of 1", size_of(type_of(ma_data_converter.isPassthrough)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 301, "ma_data_converter._ownsHeap has unexpected offset % instead of 301", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter._ownsHeap)) == 1, "ma_data_converter._ownsHeap has unexpected size % instead of 1", size_of(type_of(ma_data_converter._ownsHeap)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 304, "ma_data_converter._pHeap has unexpected offset % instead of 304", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter._pHeap)) == 8, "ma_data_converter._pHeap has unexpected size % instead of 8", size_of(type_of(ma_data_converter._pHeap)));
        assert(size_of(ma_data_converter) == 312, "ma_data_converter has size % instead of 312", size_of(ma_data_converter));
    }

    {
        instance: ma_data_source_vtable;
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 0, "ma_data_source_vtable.onRead has unexpected offset % instead of 0", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_vtable.onRead)) == 8, "ma_data_source_vtable.onRead has unexpected size % instead of 8", size_of(type_of(ma_data_source_vtable.onRead)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 8, "ma_data_source_vtable.onSeek has unexpected offset % instead of 8", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_vtable.onSeek)) == 8, "ma_data_source_vtable.onSeek has unexpected size % instead of 8", size_of(type_of(ma_data_source_vtable.onSeek)));
        assert(((cast(*void)(*instance.onGetDataFormat)) - cast(*void)(*instance)) == 16, "ma_data_source_vtable.onGetDataFormat has unexpected offset % instead of 16", ((cast(*void)(*instance.onGetDataFormat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_vtable.onGetDataFormat)) == 8, "ma_data_source_vtable.onGetDataFormat has unexpected size % instead of 8", size_of(type_of(ma_data_source_vtable.onGetDataFormat)));
        assert(((cast(*void)(*instance.onGetCursor)) - cast(*void)(*instance)) == 24, "ma_data_source_vtable.onGetCursor has unexpected offset % instead of 24", ((cast(*void)(*instance.onGetCursor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_vtable.onGetCursor)) == 8, "ma_data_source_vtable.onGetCursor has unexpected size % instead of 8", size_of(type_of(ma_data_source_vtable.onGetCursor)));
        assert(((cast(*void)(*instance.onGetLength)) - cast(*void)(*instance)) == 32, "ma_data_source_vtable.onGetLength has unexpected offset % instead of 32", ((cast(*void)(*instance.onGetLength)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_vtable.onGetLength)) == 8, "ma_data_source_vtable.onGetLength has unexpected size % instead of 8", size_of(type_of(ma_data_source_vtable.onGetLength)));
        assert(((cast(*void)(*instance.onSetLooping)) - cast(*void)(*instance)) == 40, "ma_data_source_vtable.onSetLooping has unexpected offset % instead of 40", ((cast(*void)(*instance.onSetLooping)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_vtable.onSetLooping)) == 8, "ma_data_source_vtable.onSetLooping has unexpected size % instead of 8", size_of(type_of(ma_data_source_vtable.onSetLooping)));
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 48, "ma_data_source_vtable.flags has unexpected offset % instead of 48", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_vtable.flags)) == 4, "ma_data_source_vtable.flags has unexpected size % instead of 4", size_of(type_of(ma_data_source_vtable.flags)));
        assert(size_of(ma_data_source_vtable) == 56, "ma_data_source_vtable has size % instead of 56", size_of(ma_data_source_vtable));
    }

    {
        instance: ma_data_source_config;
        assert(((cast(*void)(*instance.vtable)) - cast(*void)(*instance)) == 0, "ma_data_source_config.vtable has unexpected offset % instead of 0", ((cast(*void)(*instance.vtable)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_config.vtable)) == 8, "ma_data_source_config.vtable has unexpected size % instead of 8", size_of(type_of(ma_data_source_config.vtable)));
        assert(size_of(ma_data_source_config) == 8, "ma_data_source_config has size % instead of 8", size_of(ma_data_source_config));
    }

    {
        instance: ma_data_source_base;
        assert(((cast(*void)(*instance.vtable)) - cast(*void)(*instance)) == 0, "ma_data_source_base.vtable has unexpected offset % instead of 0", ((cast(*void)(*instance.vtable)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_base.vtable)) == 8, "ma_data_source_base.vtable has unexpected size % instead of 8", size_of(type_of(ma_data_source_base.vtable)));
        assert(((cast(*void)(*instance.rangeBegInFrames)) - cast(*void)(*instance)) == 8, "ma_data_source_base.rangeBegInFrames has unexpected offset % instead of 8", ((cast(*void)(*instance.rangeBegInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_base.rangeBegInFrames)) == 8, "ma_data_source_base.rangeBegInFrames has unexpected size % instead of 8", size_of(type_of(ma_data_source_base.rangeBegInFrames)));
        assert(((cast(*void)(*instance.rangeEndInFrames)) - cast(*void)(*instance)) == 16, "ma_data_source_base.rangeEndInFrames has unexpected offset % instead of 16", ((cast(*void)(*instance.rangeEndInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_base.rangeEndInFrames)) == 8, "ma_data_source_base.rangeEndInFrames has unexpected size % instead of 8", size_of(type_of(ma_data_source_base.rangeEndInFrames)));
        assert(((cast(*void)(*instance.loopBegInFrames)) - cast(*void)(*instance)) == 24, "ma_data_source_base.loopBegInFrames has unexpected offset % instead of 24", ((cast(*void)(*instance.loopBegInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_base.loopBegInFrames)) == 8, "ma_data_source_base.loopBegInFrames has unexpected size % instead of 8", size_of(type_of(ma_data_source_base.loopBegInFrames)));
        assert(((cast(*void)(*instance.loopEndInFrames)) - cast(*void)(*instance)) == 32, "ma_data_source_base.loopEndInFrames has unexpected offset % instead of 32", ((cast(*void)(*instance.loopEndInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_base.loopEndInFrames)) == 8, "ma_data_source_base.loopEndInFrames has unexpected size % instead of 8", size_of(type_of(ma_data_source_base.loopEndInFrames)));
        assert(((cast(*void)(*instance.pCurrent)) - cast(*void)(*instance)) == 40, "ma_data_source_base.pCurrent has unexpected offset % instead of 40", ((cast(*void)(*instance.pCurrent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_base.pCurrent)) == 8, "ma_data_source_base.pCurrent has unexpected size % instead of 8", size_of(type_of(ma_data_source_base.pCurrent)));
        assert(((cast(*void)(*instance.pNext)) - cast(*void)(*instance)) == 48, "ma_data_source_base.pNext has unexpected offset % instead of 48", ((cast(*void)(*instance.pNext)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_base.pNext)) == 8, "ma_data_source_base.pNext has unexpected size % instead of 8", size_of(type_of(ma_data_source_base.pNext)));
        assert(((cast(*void)(*instance.onGetNext)) - cast(*void)(*instance)) == 56, "ma_data_source_base.onGetNext has unexpected offset % instead of 56", ((cast(*void)(*instance.onGetNext)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_base.onGetNext)) == 8, "ma_data_source_base.onGetNext has unexpected size % instead of 8", size_of(type_of(ma_data_source_base.onGetNext)));
        assert(((cast(*void)(*instance.isLooping)) - cast(*void)(*instance)) == 64, "ma_data_source_base.isLooping has unexpected offset % instead of 64", ((cast(*void)(*instance.isLooping)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_base.isLooping)) == 4, "ma_data_source_base.isLooping has unexpected size % instead of 4", size_of(type_of(ma_data_source_base.isLooping)));
        assert(size_of(ma_data_source_base) == 72, "ma_data_source_base has size % instead of 72", size_of(ma_data_source_base));
    }

    {
        instance: ma_audio_buffer_ref;
        assert(((cast(*void)(*instance.ds)) - cast(*void)(*instance)) == 0, "ma_audio_buffer_ref.ds has unexpected offset % instead of 0", ((cast(*void)(*instance.ds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_ref.ds)) == 72, "ma_audio_buffer_ref.ds has unexpected size % instead of 72", size_of(type_of(ma_audio_buffer_ref.ds)));
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 72, "ma_audio_buffer_ref.format has unexpected offset % instead of 72", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_ref.format)) == 4, "ma_audio_buffer_ref.format has unexpected size % instead of 4", size_of(type_of(ma_audio_buffer_ref.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 76, "ma_audio_buffer_ref.channels has unexpected offset % instead of 76", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_ref.channels)) == 4, "ma_audio_buffer_ref.channels has unexpected size % instead of 4", size_of(type_of(ma_audio_buffer_ref.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 80, "ma_audio_buffer_ref.sampleRate has unexpected offset % instead of 80", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_ref.sampleRate)) == 4, "ma_audio_buffer_ref.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_audio_buffer_ref.sampleRate)));
        assert(((cast(*void)(*instance.cursor)) - cast(*void)(*instance)) == 88, "ma_audio_buffer_ref.cursor has unexpected offset % instead of 88", ((cast(*void)(*instance.cursor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_ref.cursor)) == 8, "ma_audio_buffer_ref.cursor has unexpected size % instead of 8", size_of(type_of(ma_audio_buffer_ref.cursor)));
        assert(((cast(*void)(*instance.sizeInFrames)) - cast(*void)(*instance)) == 96, "ma_audio_buffer_ref.sizeInFrames has unexpected offset % instead of 96", ((cast(*void)(*instance.sizeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_ref.sizeInFrames)) == 8, "ma_audio_buffer_ref.sizeInFrames has unexpected size % instead of 8", size_of(type_of(ma_audio_buffer_ref.sizeInFrames)));
        assert(((cast(*void)(*instance.pData)) - cast(*void)(*instance)) == 104, "ma_audio_buffer_ref.pData has unexpected offset % instead of 104", ((cast(*void)(*instance.pData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_ref.pData)) == 8, "ma_audio_buffer_ref.pData has unexpected size % instead of 8", size_of(type_of(ma_audio_buffer_ref.pData)));
        assert(size_of(ma_audio_buffer_ref) == 112, "ma_audio_buffer_ref has size % instead of 112", size_of(ma_audio_buffer_ref));
    }

    {
        instance: ma_audio_buffer_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_audio_buffer_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_config.format)) == 4, "ma_audio_buffer_config.format has unexpected size % instead of 4", size_of(type_of(ma_audio_buffer_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_audio_buffer_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_config.channels)) == 4, "ma_audio_buffer_config.channels has unexpected size % instead of 4", size_of(type_of(ma_audio_buffer_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_audio_buffer_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_config.sampleRate)) == 4, "ma_audio_buffer_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_audio_buffer_config.sampleRate)));
        assert(((cast(*void)(*instance.sizeInFrames)) - cast(*void)(*instance)) == 16, "ma_audio_buffer_config.sizeInFrames has unexpected offset % instead of 16", ((cast(*void)(*instance.sizeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_config.sizeInFrames)) == 8, "ma_audio_buffer_config.sizeInFrames has unexpected size % instead of 8", size_of(type_of(ma_audio_buffer_config.sizeInFrames)));
        assert(((cast(*void)(*instance.pData)) - cast(*void)(*instance)) == 24, "ma_audio_buffer_config.pData has unexpected offset % instead of 24", ((cast(*void)(*instance.pData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_config.pData)) == 8, "ma_audio_buffer_config.pData has unexpected size % instead of 8", size_of(type_of(ma_audio_buffer_config.pData)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 32, "ma_audio_buffer_config.allocationCallbacks has unexpected offset % instead of 32", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer_config.allocationCallbacks)) == 32, "ma_audio_buffer_config.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_audio_buffer_config.allocationCallbacks)));
        assert(size_of(ma_audio_buffer_config) == 64, "ma_audio_buffer_config has size % instead of 64", size_of(ma_audio_buffer_config));
    }

    {
        instance: ma_audio_buffer;
        assert(((cast(*void)(*instance.ref)) - cast(*void)(*instance)) == 0, "ma_audio_buffer.ref has unexpected offset % instead of 0", ((cast(*void)(*instance.ref)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer.ref)) == 112, "ma_audio_buffer.ref has unexpected size % instead of 112", size_of(type_of(ma_audio_buffer.ref)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 112, "ma_audio_buffer.allocationCallbacks has unexpected offset % instead of 112", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer.allocationCallbacks)) == 32, "ma_audio_buffer.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_audio_buffer.allocationCallbacks)));
        assert(((cast(*void)(*instance.ownsData)) - cast(*void)(*instance)) == 144, "ma_audio_buffer.ownsData has unexpected offset % instead of 144", ((cast(*void)(*instance.ownsData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer.ownsData)) == 4, "ma_audio_buffer.ownsData has unexpected size % instead of 4", size_of(type_of(ma_audio_buffer.ownsData)));
        assert(((cast(*void)(*instance._pExtraData)) - cast(*void)(*instance)) == 148, "ma_audio_buffer._pExtraData has unexpected offset % instead of 148", ((cast(*void)(*instance._pExtraData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_audio_buffer._pExtraData)) == 1, "ma_audio_buffer._pExtraData has unexpected size % instead of 1", size_of(type_of(ma_audio_buffer._pExtraData)));
        assert(size_of(ma_audio_buffer) == 152, "ma_audio_buffer has size % instead of 152", size_of(ma_audio_buffer));
    }

    {
        instance: ma_paged_audio_buffer_page;
        assert(((cast(*void)(*instance.pNext)) - cast(*void)(*instance)) == 0, "ma_paged_audio_buffer_page.pNext has unexpected offset % instead of 0", ((cast(*void)(*instance.pNext)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer_page.pNext)) == 8, "ma_paged_audio_buffer_page.pNext has unexpected size % instead of 8", size_of(type_of(ma_paged_audio_buffer_page.pNext)));
        assert(((cast(*void)(*instance.sizeInFrames)) - cast(*void)(*instance)) == 8, "ma_paged_audio_buffer_page.sizeInFrames has unexpected offset % instead of 8", ((cast(*void)(*instance.sizeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer_page.sizeInFrames)) == 8, "ma_paged_audio_buffer_page.sizeInFrames has unexpected size % instead of 8", size_of(type_of(ma_paged_audio_buffer_page.sizeInFrames)));
        assert(((cast(*void)(*instance.pAudioData)) - cast(*void)(*instance)) == 16, "ma_paged_audio_buffer_page.pAudioData has unexpected offset % instead of 16", ((cast(*void)(*instance.pAudioData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer_page.pAudioData)) == 1, "ma_paged_audio_buffer_page.pAudioData has unexpected size % instead of 1", size_of(type_of(ma_paged_audio_buffer_page.pAudioData)));
        assert(size_of(ma_paged_audio_buffer_page) == 24, "ma_paged_audio_buffer_page has size % instead of 24", size_of(ma_paged_audio_buffer_page));
    }

    {
        instance: ma_paged_audio_buffer_data;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_paged_audio_buffer_data.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer_data.format)) == 4, "ma_paged_audio_buffer_data.format has unexpected size % instead of 4", size_of(type_of(ma_paged_audio_buffer_data.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_paged_audio_buffer_data.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer_data.channels)) == 4, "ma_paged_audio_buffer_data.channels has unexpected size % instead of 4", size_of(type_of(ma_paged_audio_buffer_data.channels)));
        assert(((cast(*void)(*instance.head)) - cast(*void)(*instance)) == 8, "ma_paged_audio_buffer_data.head has unexpected offset % instead of 8", ((cast(*void)(*instance.head)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer_data.head)) == 24, "ma_paged_audio_buffer_data.head has unexpected size % instead of 24", size_of(type_of(ma_paged_audio_buffer_data.head)));
        assert(((cast(*void)(*instance.pTail)) - cast(*void)(*instance)) == 32, "ma_paged_audio_buffer_data.pTail has unexpected offset % instead of 32", ((cast(*void)(*instance.pTail)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer_data.pTail)) == 8, "ma_paged_audio_buffer_data.pTail has unexpected size % instead of 8", size_of(type_of(ma_paged_audio_buffer_data.pTail)));
        assert(size_of(ma_paged_audio_buffer_data) == 40, "ma_paged_audio_buffer_data has size % instead of 40", size_of(ma_paged_audio_buffer_data));
    }

    {
        instance: ma_paged_audio_buffer_config;
        assert(((cast(*void)(*instance.pData)) - cast(*void)(*instance)) == 0, "ma_paged_audio_buffer_config.pData has unexpected offset % instead of 0", ((cast(*void)(*instance.pData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer_config.pData)) == 8, "ma_paged_audio_buffer_config.pData has unexpected size % instead of 8", size_of(type_of(ma_paged_audio_buffer_config.pData)));
        assert(size_of(ma_paged_audio_buffer_config) == 8, "ma_paged_audio_buffer_config has size % instead of 8", size_of(ma_paged_audio_buffer_config));
    }

    {
        instance: ma_paged_audio_buffer;
        assert(((cast(*void)(*instance.ds)) - cast(*void)(*instance)) == 0, "ma_paged_audio_buffer.ds has unexpected offset % instead of 0", ((cast(*void)(*instance.ds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer.ds)) == 72, "ma_paged_audio_buffer.ds has unexpected size % instead of 72", size_of(type_of(ma_paged_audio_buffer.ds)));
        assert(((cast(*void)(*instance.pData)) - cast(*void)(*instance)) == 72, "ma_paged_audio_buffer.pData has unexpected offset % instead of 72", ((cast(*void)(*instance.pData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer.pData)) == 8, "ma_paged_audio_buffer.pData has unexpected size % instead of 8", size_of(type_of(ma_paged_audio_buffer.pData)));
        assert(((cast(*void)(*instance.pCurrent)) - cast(*void)(*instance)) == 80, "ma_paged_audio_buffer.pCurrent has unexpected offset % instead of 80", ((cast(*void)(*instance.pCurrent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer.pCurrent)) == 8, "ma_paged_audio_buffer.pCurrent has unexpected size % instead of 8", size_of(type_of(ma_paged_audio_buffer.pCurrent)));
        assert(((cast(*void)(*instance.relativeCursor)) - cast(*void)(*instance)) == 88, "ma_paged_audio_buffer.relativeCursor has unexpected offset % instead of 88", ((cast(*void)(*instance.relativeCursor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer.relativeCursor)) == 8, "ma_paged_audio_buffer.relativeCursor has unexpected size % instead of 8", size_of(type_of(ma_paged_audio_buffer.relativeCursor)));
        assert(((cast(*void)(*instance.absoluteCursor)) - cast(*void)(*instance)) == 96, "ma_paged_audio_buffer.absoluteCursor has unexpected offset % instead of 96", ((cast(*void)(*instance.absoluteCursor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_paged_audio_buffer.absoluteCursor)) == 8, "ma_paged_audio_buffer.absoluteCursor has unexpected size % instead of 8", size_of(type_of(ma_paged_audio_buffer.absoluteCursor)));
        assert(size_of(ma_paged_audio_buffer) == 104, "ma_paged_audio_buffer has size % instead of 104", size_of(ma_paged_audio_buffer));
    }

    {
        instance: ma_rb;
        assert(((cast(*void)(*instance.pBuffer)) - cast(*void)(*instance)) == 0, "ma_rb.pBuffer has unexpected offset % instead of 0", ((cast(*void)(*instance.pBuffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_rb.pBuffer)) == 8, "ma_rb.pBuffer has unexpected size % instead of 8", size_of(type_of(ma_rb.pBuffer)));
        assert(((cast(*void)(*instance.subbufferSizeInBytes)) - cast(*void)(*instance)) == 8, "ma_rb.subbufferSizeInBytes has unexpected offset % instead of 8", ((cast(*void)(*instance.subbufferSizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_rb.subbufferSizeInBytes)) == 4, "ma_rb.subbufferSizeInBytes has unexpected size % instead of 4", size_of(type_of(ma_rb.subbufferSizeInBytes)));
        assert(((cast(*void)(*instance.subbufferCount)) - cast(*void)(*instance)) == 12, "ma_rb.subbufferCount has unexpected offset % instead of 12", ((cast(*void)(*instance.subbufferCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_rb.subbufferCount)) == 4, "ma_rb.subbufferCount has unexpected size % instead of 4", size_of(type_of(ma_rb.subbufferCount)));
        assert(((cast(*void)(*instance.subbufferStrideInBytes)) - cast(*void)(*instance)) == 16, "ma_rb.subbufferStrideInBytes has unexpected offset % instead of 16", ((cast(*void)(*instance.subbufferStrideInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_rb.subbufferStrideInBytes)) == 4, "ma_rb.subbufferStrideInBytes has unexpected size % instead of 4", size_of(type_of(ma_rb.subbufferStrideInBytes)));
        assert(((cast(*void)(*instance.encodedReadOffset)) - cast(*void)(*instance)) == 20, "ma_rb.encodedReadOffset has unexpected offset % instead of 20", ((cast(*void)(*instance.encodedReadOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_rb.encodedReadOffset)) == 4, "ma_rb.encodedReadOffset has unexpected size % instead of 4", size_of(type_of(ma_rb.encodedReadOffset)));
        assert(((cast(*void)(*instance.encodedWriteOffset)) - cast(*void)(*instance)) == 24, "ma_rb.encodedWriteOffset has unexpected offset % instead of 24", ((cast(*void)(*instance.encodedWriteOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_rb.encodedWriteOffset)) == 4, "ma_rb.encodedWriteOffset has unexpected size % instead of 4", size_of(type_of(ma_rb.encodedWriteOffset)));
        assert(((cast(*void)(*instance.ownsBuffer)) - cast(*void)(*instance)) == 28, "ma_rb.ownsBuffer has unexpected offset % instead of 28", ((cast(*void)(*instance.ownsBuffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_rb.ownsBuffer)) == 1, "ma_rb.ownsBuffer has unexpected size % instead of 1", size_of(type_of(ma_rb.ownsBuffer)));
        assert(((cast(*void)(*instance.clearOnWriteAcquire)) - cast(*void)(*instance)) == 29, "ma_rb.clearOnWriteAcquire has unexpected offset % instead of 29", ((cast(*void)(*instance.clearOnWriteAcquire)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_rb.clearOnWriteAcquire)) == 1, "ma_rb.clearOnWriteAcquire has unexpected size % instead of 1", size_of(type_of(ma_rb.clearOnWriteAcquire)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 32, "ma_rb.allocationCallbacks has unexpected offset % instead of 32", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_rb.allocationCallbacks)) == 32, "ma_rb.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_rb.allocationCallbacks)));
        assert(size_of(ma_rb) == 64, "ma_rb has size % instead of 64", size_of(ma_rb));
    }

    {
        instance: ma_pcm_rb;
        assert(((cast(*void)(*instance.ds)) - cast(*void)(*instance)) == 0, "ma_pcm_rb.ds has unexpected offset % instead of 0", ((cast(*void)(*instance.ds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pcm_rb.ds)) == 72, "ma_pcm_rb.ds has unexpected size % instead of 72", size_of(type_of(ma_pcm_rb.ds)));
        assert(((cast(*void)(*instance.rb)) - cast(*void)(*instance)) == 72, "ma_pcm_rb.rb has unexpected offset % instead of 72", ((cast(*void)(*instance.rb)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pcm_rb.rb)) == 64, "ma_pcm_rb.rb has unexpected size % instead of 64", size_of(type_of(ma_pcm_rb.rb)));
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 136, "ma_pcm_rb.format has unexpected offset % instead of 136", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pcm_rb.format)) == 4, "ma_pcm_rb.format has unexpected size % instead of 4", size_of(type_of(ma_pcm_rb.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 140, "ma_pcm_rb.channels has unexpected offset % instead of 140", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pcm_rb.channels)) == 4, "ma_pcm_rb.channels has unexpected size % instead of 4", size_of(type_of(ma_pcm_rb.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 144, "ma_pcm_rb.sampleRate has unexpected offset % instead of 144", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pcm_rb.sampleRate)) == 4, "ma_pcm_rb.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_pcm_rb.sampleRate)));
        assert(size_of(ma_pcm_rb) == 152, "ma_pcm_rb has size % instead of 152", size_of(ma_pcm_rb));
    }

    {
        instance: ma_duplex_rb;
        assert(((cast(*void)(*instance.rb)) - cast(*void)(*instance)) == 0, "ma_duplex_rb.rb has unexpected offset % instead of 0", ((cast(*void)(*instance.rb)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_duplex_rb.rb)) == 152, "ma_duplex_rb.rb has unexpected size % instead of 152", size_of(type_of(ma_duplex_rb.rb)));
        assert(size_of(ma_duplex_rb) == 152, "ma_duplex_rb has size % instead of 152", size_of(ma_duplex_rb));
    }

    {
        instance: ma_fence;
        assert(((cast(*void)(*instance.e)) - cast(*void)(*instance)) == 0, "ma_fence.e has unexpected offset % instead of 0", ((cast(*void)(*instance.e)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_fence.e)) == 120, "ma_fence.e has unexpected size % instead of 120", size_of(type_of(ma_fence.e)));
        assert(((cast(*void)(*instance.counter)) - cast(*void)(*instance)) == 120, "ma_fence.counter has unexpected offset % instead of 120", ((cast(*void)(*instance.counter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_fence.counter)) == 4, "ma_fence.counter has unexpected size % instead of 4", size_of(type_of(ma_fence.counter)));
        assert(size_of(ma_fence) == 128, "ma_fence has size % instead of 128", size_of(ma_fence));
    }

    {
        instance: ma_async_notification_callbacks;
        assert(((cast(*void)(*instance.onSignal)) - cast(*void)(*instance)) == 0, "ma_async_notification_callbacks.onSignal has unexpected offset % instead of 0", ((cast(*void)(*instance.onSignal)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_async_notification_callbacks.onSignal)) == 8, "ma_async_notification_callbacks.onSignal has unexpected size % instead of 8", size_of(type_of(ma_async_notification_callbacks.onSignal)));
        assert(size_of(ma_async_notification_callbacks) == 8, "ma_async_notification_callbacks has size % instead of 8", size_of(ma_async_notification_callbacks));
    }

    {
        instance: ma_async_notification_poll;
        assert(((cast(*void)(*instance.cb)) - cast(*void)(*instance)) == 0, "ma_async_notification_poll.cb has unexpected offset % instead of 0", ((cast(*void)(*instance.cb)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_async_notification_poll.cb)) == 8, "ma_async_notification_poll.cb has unexpected size % instead of 8", size_of(type_of(ma_async_notification_poll.cb)));
        assert(((cast(*void)(*instance.signalled)) - cast(*void)(*instance)) == 8, "ma_async_notification_poll.signalled has unexpected offset % instead of 8", ((cast(*void)(*instance.signalled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_async_notification_poll.signalled)) == 4, "ma_async_notification_poll.signalled has unexpected size % instead of 4", size_of(type_of(ma_async_notification_poll.signalled)));
        assert(size_of(ma_async_notification_poll) == 16, "ma_async_notification_poll has size % instead of 16", size_of(ma_async_notification_poll));
    }

    {
        instance: ma_async_notification_event;
        assert(((cast(*void)(*instance.cb)) - cast(*void)(*instance)) == 0, "ma_async_notification_event.cb has unexpected offset % instead of 0", ((cast(*void)(*instance.cb)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_async_notification_event.cb)) == 8, "ma_async_notification_event.cb has unexpected size % instead of 8", size_of(type_of(ma_async_notification_event.cb)));
        assert(((cast(*void)(*instance.e)) - cast(*void)(*instance)) == 8, "ma_async_notification_event.e has unexpected offset % instead of 8", ((cast(*void)(*instance.e)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_async_notification_event.e)) == 120, "ma_async_notification_event.e has unexpected size % instead of 120", size_of(type_of(ma_async_notification_event.e)));
        assert(size_of(ma_async_notification_event) == 128, "ma_async_notification_event has size % instead of 128", size_of(ma_async_notification_event));
    }

    {
        instance: ma_slot_allocator_config;
        assert(((cast(*void)(*instance.capacity)) - cast(*void)(*instance)) == 0, "ma_slot_allocator_config.capacity has unexpected offset % instead of 0", ((cast(*void)(*instance.capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_slot_allocator_config.capacity)) == 4, "ma_slot_allocator_config.capacity has unexpected size % instead of 4", size_of(type_of(ma_slot_allocator_config.capacity)));
        assert(size_of(ma_slot_allocator_config) == 4, "ma_slot_allocator_config has size % instead of 4", size_of(ma_slot_allocator_config));
    }

    {
        instance: ma_slot_allocator_group;
        assert(((cast(*void)(*instance.bitfield)) - cast(*void)(*instance)) == 0, "ma_slot_allocator_group.bitfield has unexpected offset % instead of 0", ((cast(*void)(*instance.bitfield)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_slot_allocator_group.bitfield)) == 4, "ma_slot_allocator_group.bitfield has unexpected size % instead of 4", size_of(type_of(ma_slot_allocator_group.bitfield)));
        assert(size_of(ma_slot_allocator_group) == 4, "ma_slot_allocator_group has size % instead of 4", size_of(ma_slot_allocator_group));
    }

    {
        instance: ma_slot_allocator;
        assert(((cast(*void)(*instance.pGroups)) - cast(*void)(*instance)) == 0, "ma_slot_allocator.pGroups has unexpected offset % instead of 0", ((cast(*void)(*instance.pGroups)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_slot_allocator.pGroups)) == 8, "ma_slot_allocator.pGroups has unexpected size % instead of 8", size_of(type_of(ma_slot_allocator.pGroups)));
        assert(((cast(*void)(*instance.pSlots)) - cast(*void)(*instance)) == 8, "ma_slot_allocator.pSlots has unexpected offset % instead of 8", ((cast(*void)(*instance.pSlots)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_slot_allocator.pSlots)) == 8, "ma_slot_allocator.pSlots has unexpected size % instead of 8", size_of(type_of(ma_slot_allocator.pSlots)));
        assert(((cast(*void)(*instance.count)) - cast(*void)(*instance)) == 16, "ma_slot_allocator.count has unexpected offset % instead of 16", ((cast(*void)(*instance.count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_slot_allocator.count)) == 4, "ma_slot_allocator.count has unexpected size % instead of 4", size_of(type_of(ma_slot_allocator.count)));
        assert(((cast(*void)(*instance.capacity)) - cast(*void)(*instance)) == 20, "ma_slot_allocator.capacity has unexpected offset % instead of 20", ((cast(*void)(*instance.capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_slot_allocator.capacity)) == 4, "ma_slot_allocator.capacity has unexpected size % instead of 4", size_of(type_of(ma_slot_allocator.capacity)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 24, "ma_slot_allocator._ownsHeap has unexpected offset % instead of 24", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_slot_allocator._ownsHeap)) == 4, "ma_slot_allocator._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_slot_allocator._ownsHeap)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 32, "ma_slot_allocator._pHeap has unexpected offset % instead of 32", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_slot_allocator._pHeap)) == 8, "ma_slot_allocator._pHeap has unexpected size % instead of 8", size_of(type_of(ma_slot_allocator._pHeap)));
        assert(size_of(ma_slot_allocator) == 40, "ma_slot_allocator has size % instead of 40", size_of(ma_slot_allocator));
    }

    {
        instance: ma_job;
        assert(((cast(*void)(*instance.toc)) - cast(*void)(*instance)) == 0, "ma_job.toc has unexpected offset % instead of 0", ((cast(*void)(*instance.toc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job.toc)) == 8, "ma_job.toc has unexpected size % instead of 8", size_of(type_of(ma_job.toc)));
        assert(((cast(*void)(*instance.next)) - cast(*void)(*instance)) == 8, "ma_job.next has unexpected offset % instead of 8", ((cast(*void)(*instance.next)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job.next)) == 8, "ma_job.next has unexpected size % instead of 8", size_of(type_of(ma_job.next)));
        assert(((cast(*void)(*instance.order)) - cast(*void)(*instance)) == 16, "ma_job.order has unexpected offset % instead of 16", ((cast(*void)(*instance.order)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job.order)) == 4, "ma_job.order has unexpected size % instead of 4", size_of(type_of(ma_job.order)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 24, "ma_job.data has unexpected offset % instead of 24", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job.data)) == 80, "ma_job.data has unexpected size % instead of 80", size_of(type_of(ma_job.data)));
        assert(size_of(ma_job) == 104, "ma_job has size % instead of 104", size_of(ma_job));
    }

    {
        instance: ma_job_queue_config;
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 0, "ma_job_queue_config.flags has unexpected offset % instead of 0", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue_config.flags)) == 4, "ma_job_queue_config.flags has unexpected size % instead of 4", size_of(type_of(ma_job_queue_config.flags)));
        assert(((cast(*void)(*instance.capacity)) - cast(*void)(*instance)) == 4, "ma_job_queue_config.capacity has unexpected offset % instead of 4", ((cast(*void)(*instance.capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue_config.capacity)) == 4, "ma_job_queue_config.capacity has unexpected size % instead of 4", size_of(type_of(ma_job_queue_config.capacity)));
        assert(size_of(ma_job_queue_config) == 8, "ma_job_queue_config has size % instead of 8", size_of(ma_job_queue_config));
    }

    {
        instance: ma_job_queue;
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 0, "ma_job_queue.flags has unexpected offset % instead of 0", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue.flags)) == 4, "ma_job_queue.flags has unexpected size % instead of 4", size_of(type_of(ma_job_queue.flags)));
        assert(((cast(*void)(*instance.capacity)) - cast(*void)(*instance)) == 4, "ma_job_queue.capacity has unexpected offset % instead of 4", ((cast(*void)(*instance.capacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue.capacity)) == 4, "ma_job_queue.capacity has unexpected size % instead of 4", size_of(type_of(ma_job_queue.capacity)));
        assert(((cast(*void)(*instance.head)) - cast(*void)(*instance)) == 8, "ma_job_queue.head has unexpected offset % instead of 8", ((cast(*void)(*instance.head)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue.head)) == 8, "ma_job_queue.head has unexpected size % instead of 8", size_of(type_of(ma_job_queue.head)));
        assert(((cast(*void)(*instance.tail)) - cast(*void)(*instance)) == 16, "ma_job_queue.tail has unexpected offset % instead of 16", ((cast(*void)(*instance.tail)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue.tail)) == 8, "ma_job_queue.tail has unexpected size % instead of 8", size_of(type_of(ma_job_queue.tail)));
        assert(((cast(*void)(*instance.sem)) - cast(*void)(*instance)) == 24, "ma_job_queue.sem has unexpected offset % instead of 24", ((cast(*void)(*instance.sem)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue.sem)) == 120, "ma_job_queue.sem has unexpected size % instead of 120", size_of(type_of(ma_job_queue.sem)));
        assert(((cast(*void)(*instance.allocator)) - cast(*void)(*instance)) == 144, "ma_job_queue.allocator has unexpected offset % instead of 144", ((cast(*void)(*instance.allocator)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue.allocator)) == 40, "ma_job_queue.allocator has unexpected size % instead of 40", size_of(type_of(ma_job_queue.allocator)));
        assert(((cast(*void)(*instance.pJobs)) - cast(*void)(*instance)) == 184, "ma_job_queue.pJobs has unexpected offset % instead of 184", ((cast(*void)(*instance.pJobs)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue.pJobs)) == 8, "ma_job_queue.pJobs has unexpected size % instead of 8", size_of(type_of(ma_job_queue.pJobs)));
        assert(((cast(*void)(*instance.lock)) - cast(*void)(*instance)) == 192, "ma_job_queue.lock has unexpected offset % instead of 192", ((cast(*void)(*instance.lock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue.lock)) == 4, "ma_job_queue.lock has unexpected size % instead of 4", size_of(type_of(ma_job_queue.lock)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 200, "ma_job_queue._pHeap has unexpected offset % instead of 200", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue._pHeap)) == 8, "ma_job_queue._pHeap has unexpected size % instead of 8", size_of(type_of(ma_job_queue._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 208, "ma_job_queue._ownsHeap has unexpected offset % instead of 208", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue._ownsHeap)) == 4, "ma_job_queue._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_job_queue._ownsHeap)));
        assert(size_of(ma_job_queue) == 216, "ma_job_queue has size % instead of 216", size_of(ma_job_queue));
    }

    {
        instance: ma_atomic_device_state;
        assert(((cast(*void)(*instance.value)) - cast(*void)(*instance)) == 0, "ma_atomic_device_state.value has unexpected offset % instead of 0", ((cast(*void)(*instance.value)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_device_state.value)) == 4, "ma_atomic_device_state.value has unexpected size % instead of 4", size_of(type_of(ma_atomic_device_state.value)));
        assert(size_of(ma_atomic_device_state) == 4, "ma_atomic_device_state has size % instead of 4", size_of(ma_atomic_device_state));
    }

    {
        instance: ma_device_job_thread_config;
        assert(((cast(*void)(*instance.noThread)) - cast(*void)(*instance)) == 0, "ma_device_job_thread_config.noThread has unexpected offset % instead of 0", ((cast(*void)(*instance.noThread)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_job_thread_config.noThread)) == 4, "ma_device_job_thread_config.noThread has unexpected size % instead of 4", size_of(type_of(ma_device_job_thread_config.noThread)));
        assert(((cast(*void)(*instance.jobQueueCapacity)) - cast(*void)(*instance)) == 4, "ma_device_job_thread_config.jobQueueCapacity has unexpected offset % instead of 4", ((cast(*void)(*instance.jobQueueCapacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_job_thread_config.jobQueueCapacity)) == 4, "ma_device_job_thread_config.jobQueueCapacity has unexpected size % instead of 4", size_of(type_of(ma_device_job_thread_config.jobQueueCapacity)));
        assert(((cast(*void)(*instance.jobQueueFlags)) - cast(*void)(*instance)) == 8, "ma_device_job_thread_config.jobQueueFlags has unexpected offset % instead of 8", ((cast(*void)(*instance.jobQueueFlags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_job_thread_config.jobQueueFlags)) == 4, "ma_device_job_thread_config.jobQueueFlags has unexpected size % instead of 4", size_of(type_of(ma_device_job_thread_config.jobQueueFlags)));
        assert(size_of(ma_device_job_thread_config) == 12, "ma_device_job_thread_config has size % instead of 12", size_of(ma_device_job_thread_config));
    }

    {
        instance: ma_device_job_thread;
        assert(((cast(*void)(*instance.thread)) - cast(*void)(*instance)) == 0, "ma_device_job_thread.thread has unexpected offset % instead of 0", ((cast(*void)(*instance.thread)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_job_thread.thread)) == 8, "ma_device_job_thread.thread has unexpected size % instead of 8", size_of(type_of(ma_device_job_thread.thread)));
        assert(((cast(*void)(*instance.jobQueue)) - cast(*void)(*instance)) == 8, "ma_device_job_thread.jobQueue has unexpected offset % instead of 8", ((cast(*void)(*instance.jobQueue)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_job_thread.jobQueue)) == 216, "ma_device_job_thread.jobQueue has unexpected size % instead of 216", size_of(type_of(ma_device_job_thread.jobQueue)));
        assert(((cast(*void)(*instance._hasThread)) - cast(*void)(*instance)) == 224, "ma_device_job_thread._hasThread has unexpected offset % instead of 224", ((cast(*void)(*instance._hasThread)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_job_thread._hasThread)) == 4, "ma_device_job_thread._hasThread has unexpected size % instead of 4", size_of(type_of(ma_device_job_thread._hasThread)));
        assert(size_of(ma_device_job_thread) == 232, "ma_device_job_thread has size % instead of 232", size_of(ma_device_job_thread));
    }

    {
        instance: ma_device_notification;
        assert(((cast(*void)(*instance.pDevice)) - cast(*void)(*instance)) == 0, "ma_device_notification.pDevice has unexpected offset % instead of 0", ((cast(*void)(*instance.pDevice)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_notification.pDevice)) == 8, "ma_device_notification.pDevice has unexpected size % instead of 8", size_of(type_of(ma_device_notification.pDevice)));
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 8, "ma_device_notification.type has unexpected offset % instead of 8", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_notification.type)) == 4, "ma_device_notification.type has unexpected size % instead of 4", size_of(type_of(ma_device_notification.type)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 12, "ma_device_notification.data has unexpected offset % instead of 12", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_notification.data)) == 4, "ma_device_notification.data has unexpected size % instead of 4", size_of(type_of(ma_device_notification.data)));
        assert(size_of(ma_device_notification) == 16, "ma_device_notification has size % instead of 16", size_of(ma_device_notification));
    }

    {
        instance: ma_timer;
        assert(((cast(*void)(*instance.counter)) - cast(*void)(*instance)) == 0, "ma_timer.counter has unexpected offset % instead of 0", ((cast(*void)(*instance.counter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_timer.counter)) == 8, "ma_timer.counter has unexpected size % instead of 8", size_of(type_of(ma_timer.counter)));
        assert(((cast(*void)(*instance.counterD)) - cast(*void)(*instance)) == 0, "ma_timer.counterD has unexpected offset % instead of 0", ((cast(*void)(*instance.counterD)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_timer.counterD)) == 8, "ma_timer.counterD has unexpected size % instead of 8", size_of(type_of(ma_timer.counterD)));
        assert(size_of(ma_timer) == 8, "ma_timer has size % instead of 8", size_of(ma_timer));
    }

    {
        instance: ma_device_id;
        assert(((cast(*void)(*instance.wasapi)) - cast(*void)(*instance)) == 0, "ma_device_id.wasapi has unexpected offset % instead of 0", ((cast(*void)(*instance.wasapi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.wasapi)) == 128, "ma_device_id.wasapi has unexpected size % instead of 128", size_of(type_of(ma_device_id.wasapi)));
        assert(((cast(*void)(*instance.dsound)) - cast(*void)(*instance)) == 0, "ma_device_id.dsound has unexpected offset % instead of 0", ((cast(*void)(*instance.dsound)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.dsound)) == 16, "ma_device_id.dsound has unexpected size % instead of 16", size_of(type_of(ma_device_id.dsound)));
        assert(((cast(*void)(*instance.winmm)) - cast(*void)(*instance)) == 0, "ma_device_id.winmm has unexpected offset % instead of 0", ((cast(*void)(*instance.winmm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.winmm)) == 4, "ma_device_id.winmm has unexpected size % instead of 4", size_of(type_of(ma_device_id.winmm)));
        assert(((cast(*void)(*instance.alsa)) - cast(*void)(*instance)) == 0, "ma_device_id.alsa has unexpected offset % instead of 0", ((cast(*void)(*instance.alsa)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.alsa)) == 256, "ma_device_id.alsa has unexpected size % instead of 256", size_of(type_of(ma_device_id.alsa)));
        assert(((cast(*void)(*instance.pulse)) - cast(*void)(*instance)) == 0, "ma_device_id.pulse has unexpected offset % instead of 0", ((cast(*void)(*instance.pulse)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.pulse)) == 256, "ma_device_id.pulse has unexpected size % instead of 256", size_of(type_of(ma_device_id.pulse)));
        assert(((cast(*void)(*instance.jack)) - cast(*void)(*instance)) == 0, "ma_device_id.jack has unexpected offset % instead of 0", ((cast(*void)(*instance.jack)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.jack)) == 4, "ma_device_id.jack has unexpected size % instead of 4", size_of(type_of(ma_device_id.jack)));
        assert(((cast(*void)(*instance.coreaudio)) - cast(*void)(*instance)) == 0, "ma_device_id.coreaudio has unexpected offset % instead of 0", ((cast(*void)(*instance.coreaudio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.coreaudio)) == 256, "ma_device_id.coreaudio has unexpected size % instead of 256", size_of(type_of(ma_device_id.coreaudio)));
        assert(((cast(*void)(*instance.sndio)) - cast(*void)(*instance)) == 0, "ma_device_id.sndio has unexpected offset % instead of 0", ((cast(*void)(*instance.sndio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.sndio)) == 256, "ma_device_id.sndio has unexpected size % instead of 256", size_of(type_of(ma_device_id.sndio)));
        assert(((cast(*void)(*instance.audio4)) - cast(*void)(*instance)) == 0, "ma_device_id.audio4 has unexpected offset % instead of 0", ((cast(*void)(*instance.audio4)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.audio4)) == 256, "ma_device_id.audio4 has unexpected size % instead of 256", size_of(type_of(ma_device_id.audio4)));
        assert(((cast(*void)(*instance.oss)) - cast(*void)(*instance)) == 0, "ma_device_id.oss has unexpected offset % instead of 0", ((cast(*void)(*instance.oss)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.oss)) == 64, "ma_device_id.oss has unexpected size % instead of 64", size_of(type_of(ma_device_id.oss)));
        assert(((cast(*void)(*instance.aaudio)) - cast(*void)(*instance)) == 0, "ma_device_id.aaudio has unexpected offset % instead of 0", ((cast(*void)(*instance.aaudio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.aaudio)) == 4, "ma_device_id.aaudio has unexpected size % instead of 4", size_of(type_of(ma_device_id.aaudio)));
        assert(((cast(*void)(*instance.opensl)) - cast(*void)(*instance)) == 0, "ma_device_id.opensl has unexpected offset % instead of 0", ((cast(*void)(*instance.opensl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.opensl)) == 4, "ma_device_id.opensl has unexpected size % instead of 4", size_of(type_of(ma_device_id.opensl)));
        assert(((cast(*void)(*instance.webaudio)) - cast(*void)(*instance)) == 0, "ma_device_id.webaudio has unexpected offset % instead of 0", ((cast(*void)(*instance.webaudio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.webaudio)) == 32, "ma_device_id.webaudio has unexpected size % instead of 32", size_of(type_of(ma_device_id.webaudio)));
        assert(((cast(*void)(*instance.custom)) - cast(*void)(*instance)) == 0, "ma_device_id.custom has unexpected offset % instead of 0", ((cast(*void)(*instance.custom)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.custom)) == 256, "ma_device_id.custom has unexpected size % instead of 256", size_of(type_of(ma_device_id.custom)));
        assert(((cast(*void)(*instance.nullbackend)) - cast(*void)(*instance)) == 0, "ma_device_id.nullbackend has unexpected offset % instead of 0", ((cast(*void)(*instance.nullbackend)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_id.nullbackend)) == 4, "ma_device_id.nullbackend has unexpected size % instead of 4", size_of(type_of(ma_device_id.nullbackend)));
        assert(size_of(ma_device_id) == 256, "ma_device_id has size % instead of 256", size_of(ma_device_id));
    }

    {
        instance: ma_device_info;
        assert(((cast(*void)(*instance.id)) - cast(*void)(*instance)) == 0, "ma_device_info.id has unexpected offset % instead of 0", ((cast(*void)(*instance.id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_info.id)) == 256, "ma_device_info.id has unexpected size % instead of 256", size_of(type_of(ma_device_info.id)));
        assert(((cast(*void)(*instance.name)) - cast(*void)(*instance)) == 256, "ma_device_info.name has unexpected offset % instead of 256", ((cast(*void)(*instance.name)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_info.name)) == 256, "ma_device_info.name has unexpected size % instead of 256", size_of(type_of(ma_device_info.name)));
        assert(((cast(*void)(*instance.isDefault)) - cast(*void)(*instance)) == 512, "ma_device_info.isDefault has unexpected offset % instead of 512", ((cast(*void)(*instance.isDefault)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_info.isDefault)) == 4, "ma_device_info.isDefault has unexpected size % instead of 4", size_of(type_of(ma_device_info.isDefault)));
        assert(((cast(*void)(*instance.nativeDataFormatCount)) - cast(*void)(*instance)) == 516, "ma_device_info.nativeDataFormatCount has unexpected offset % instead of 516", ((cast(*void)(*instance.nativeDataFormatCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_info.nativeDataFormatCount)) == 4, "ma_device_info.nativeDataFormatCount has unexpected size % instead of 4", size_of(type_of(ma_device_info.nativeDataFormatCount)));
        assert(((cast(*void)(*instance.nativeDataFormats)) - cast(*void)(*instance)) == 520, "ma_device_info.nativeDataFormats has unexpected offset % instead of 520", ((cast(*void)(*instance.nativeDataFormats)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_info.nativeDataFormats)) == 1024, "ma_device_info.nativeDataFormats has unexpected size % instead of 1024", size_of(type_of(ma_device_info.nativeDataFormats)));
        assert(size_of(ma_device_info) == 1544, "ma_device_info has size % instead of 1544", size_of(ma_device_info));
    }

    {
        instance: ma_device_config;
        assert(((cast(*void)(*instance.deviceType)) - cast(*void)(*instance)) == 0, "ma_device_config.deviceType has unexpected offset % instead of 0", ((cast(*void)(*instance.deviceType)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.deviceType)) == 4, "ma_device_config.deviceType has unexpected size % instead of 4", size_of(type_of(ma_device_config.deviceType)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 4, "ma_device_config.sampleRate has unexpected offset % instead of 4", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.sampleRate)) == 4, "ma_device_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_device_config.sampleRate)));
        assert(((cast(*void)(*instance.periodSizeInFrames)) - cast(*void)(*instance)) == 8, "ma_device_config.periodSizeInFrames has unexpected offset % instead of 8", ((cast(*void)(*instance.periodSizeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.periodSizeInFrames)) == 4, "ma_device_config.periodSizeInFrames has unexpected size % instead of 4", size_of(type_of(ma_device_config.periodSizeInFrames)));
        assert(((cast(*void)(*instance.periodSizeInMilliseconds)) - cast(*void)(*instance)) == 12, "ma_device_config.periodSizeInMilliseconds has unexpected offset % instead of 12", ((cast(*void)(*instance.periodSizeInMilliseconds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.periodSizeInMilliseconds)) == 4, "ma_device_config.periodSizeInMilliseconds has unexpected size % instead of 4", size_of(type_of(ma_device_config.periodSizeInMilliseconds)));
        assert(((cast(*void)(*instance.periods)) - cast(*void)(*instance)) == 16, "ma_device_config.periods has unexpected offset % instead of 16", ((cast(*void)(*instance.periods)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.periods)) == 4, "ma_device_config.periods has unexpected size % instead of 4", size_of(type_of(ma_device_config.periods)));
        assert(((cast(*void)(*instance.performanceProfile)) - cast(*void)(*instance)) == 20, "ma_device_config.performanceProfile has unexpected offset % instead of 20", ((cast(*void)(*instance.performanceProfile)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.performanceProfile)) == 4, "ma_device_config.performanceProfile has unexpected size % instead of 4", size_of(type_of(ma_device_config.performanceProfile)));
        assert(((cast(*void)(*instance.noPreSilencedOutputBuffer)) - cast(*void)(*instance)) == 24, "ma_device_config.noPreSilencedOutputBuffer has unexpected offset % instead of 24", ((cast(*void)(*instance.noPreSilencedOutputBuffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.noPreSilencedOutputBuffer)) == 1, "ma_device_config.noPreSilencedOutputBuffer has unexpected size % instead of 1", size_of(type_of(ma_device_config.noPreSilencedOutputBuffer)));
        assert(((cast(*void)(*instance.noClip)) - cast(*void)(*instance)) == 25, "ma_device_config.noClip has unexpected offset % instead of 25", ((cast(*void)(*instance.noClip)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.noClip)) == 1, "ma_device_config.noClip has unexpected size % instead of 1", size_of(type_of(ma_device_config.noClip)));
        assert(((cast(*void)(*instance.noDisableDenormals)) - cast(*void)(*instance)) == 26, "ma_device_config.noDisableDenormals has unexpected offset % instead of 26", ((cast(*void)(*instance.noDisableDenormals)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.noDisableDenormals)) == 1, "ma_device_config.noDisableDenormals has unexpected size % instead of 1", size_of(type_of(ma_device_config.noDisableDenormals)));
        assert(((cast(*void)(*instance.noFixedSizedCallback)) - cast(*void)(*instance)) == 27, "ma_device_config.noFixedSizedCallback has unexpected offset % instead of 27", ((cast(*void)(*instance.noFixedSizedCallback)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.noFixedSizedCallback)) == 1, "ma_device_config.noFixedSizedCallback has unexpected size % instead of 1", size_of(type_of(ma_device_config.noFixedSizedCallback)));
        assert(((cast(*void)(*instance.dataCallback)) - cast(*void)(*instance)) == 32, "ma_device_config.dataCallback has unexpected offset % instead of 32", ((cast(*void)(*instance.dataCallback)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.dataCallback)) == 8, "ma_device_config.dataCallback has unexpected size % instead of 8", size_of(type_of(ma_device_config.dataCallback)));
        assert(((cast(*void)(*instance.notificationCallback)) - cast(*void)(*instance)) == 40, "ma_device_config.notificationCallback has unexpected offset % instead of 40", ((cast(*void)(*instance.notificationCallback)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.notificationCallback)) == 8, "ma_device_config.notificationCallback has unexpected size % instead of 8", size_of(type_of(ma_device_config.notificationCallback)));
        assert(((cast(*void)(*instance.stopCallback)) - cast(*void)(*instance)) == 48, "ma_device_config.stopCallback has unexpected offset % instead of 48", ((cast(*void)(*instance.stopCallback)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.stopCallback)) == 8, "ma_device_config.stopCallback has unexpected size % instead of 8", size_of(type_of(ma_device_config.stopCallback)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 56, "ma_device_config.pUserData has unexpected offset % instead of 56", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.pUserData)) == 8, "ma_device_config.pUserData has unexpected size % instead of 8", size_of(type_of(ma_device_config.pUserData)));
        assert(((cast(*void)(*instance.resampling)) - cast(*void)(*instance)) == 64, "ma_device_config.resampling has unexpected offset % instead of 64", ((cast(*void)(*instance.resampling)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.resampling)) == 48, "ma_device_config.resampling has unexpected size % instead of 48", size_of(type_of(ma_device_config.resampling)));
        assert(((cast(*void)(*instance.playback)) - cast(*void)(*instance)) == 112, "ma_device_config.playback has unexpected offset % instead of 112", ((cast(*void)(*instance.playback)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.playback)) == 40, "ma_device_config.playback has unexpected size % instead of 40", size_of(type_of(ma_device_config.playback)));
        assert(((cast(*void)(*instance.capture)) - cast(*void)(*instance)) == 152, "ma_device_config.capture has unexpected offset % instead of 152", ((cast(*void)(*instance.capture)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.capture)) == 40, "ma_device_config.capture has unexpected size % instead of 40", size_of(type_of(ma_device_config.capture)));
        assert(((cast(*void)(*instance.wasapi)) - cast(*void)(*instance)) == 192, "ma_device_config.wasapi has unexpected offset % instead of 192", ((cast(*void)(*instance.wasapi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.wasapi)) == 16, "ma_device_config.wasapi has unexpected size % instead of 16", size_of(type_of(ma_device_config.wasapi)));
        assert(((cast(*void)(*instance.alsa)) - cast(*void)(*instance)) == 208, "ma_device_config.alsa has unexpected offset % instead of 208", ((cast(*void)(*instance.alsa)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.alsa)) == 16, "ma_device_config.alsa has unexpected size % instead of 16", size_of(type_of(ma_device_config.alsa)));
        assert(((cast(*void)(*instance.pulse)) - cast(*void)(*instance)) == 224, "ma_device_config.pulse has unexpected offset % instead of 224", ((cast(*void)(*instance.pulse)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.pulse)) == 16, "ma_device_config.pulse has unexpected size % instead of 16", size_of(type_of(ma_device_config.pulse)));
        assert(((cast(*void)(*instance.coreaudio)) - cast(*void)(*instance)) == 240, "ma_device_config.coreaudio has unexpected offset % instead of 240", ((cast(*void)(*instance.coreaudio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.coreaudio)) == 4, "ma_device_config.coreaudio has unexpected size % instead of 4", size_of(type_of(ma_device_config.coreaudio)));
        assert(((cast(*void)(*instance.opensl)) - cast(*void)(*instance)) == 244, "ma_device_config.opensl has unexpected offset % instead of 244", ((cast(*void)(*instance.opensl)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.opensl)) == 12, "ma_device_config.opensl has unexpected size % instead of 12", size_of(type_of(ma_device_config.opensl)));
        assert(((cast(*void)(*instance.aaudio)) - cast(*void)(*instance)) == 256, "ma_device_config.aaudio has unexpected offset % instead of 256", ((cast(*void)(*instance.aaudio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_config.aaudio)) == 24, "ma_device_config.aaudio has unexpected size % instead of 24", size_of(type_of(ma_device_config.aaudio)));
        assert(size_of(ma_device_config) == 280, "ma_device_config has size % instead of 280", size_of(ma_device_config));
    }

    {
        instance: ma_device_descriptor;
        assert(((cast(*void)(*instance.pDeviceID)) - cast(*void)(*instance)) == 0, "ma_device_descriptor.pDeviceID has unexpected offset % instead of 0", ((cast(*void)(*instance.pDeviceID)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_descriptor.pDeviceID)) == 8, "ma_device_descriptor.pDeviceID has unexpected size % instead of 8", size_of(type_of(ma_device_descriptor.pDeviceID)));
        assert(((cast(*void)(*instance.shareMode)) - cast(*void)(*instance)) == 8, "ma_device_descriptor.shareMode has unexpected offset % instead of 8", ((cast(*void)(*instance.shareMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_descriptor.shareMode)) == 4, "ma_device_descriptor.shareMode has unexpected size % instead of 4", size_of(type_of(ma_device_descriptor.shareMode)));
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 12, "ma_device_descriptor.format has unexpected offset % instead of 12", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_descriptor.format)) == 4, "ma_device_descriptor.format has unexpected size % instead of 4", size_of(type_of(ma_device_descriptor.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 16, "ma_device_descriptor.channels has unexpected offset % instead of 16", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_descriptor.channels)) == 4, "ma_device_descriptor.channels has unexpected size % instead of 4", size_of(type_of(ma_device_descriptor.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 20, "ma_device_descriptor.sampleRate has unexpected offset % instead of 20", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_descriptor.sampleRate)) == 4, "ma_device_descriptor.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_device_descriptor.sampleRate)));
        assert(((cast(*void)(*instance.channelMap)) - cast(*void)(*instance)) == 24, "ma_device_descriptor.channelMap has unexpected offset % instead of 24", ((cast(*void)(*instance.channelMap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_descriptor.channelMap)) == 254, "ma_device_descriptor.channelMap has unexpected size % instead of 254", size_of(type_of(ma_device_descriptor.channelMap)));
        assert(((cast(*void)(*instance.periodSizeInFrames)) - cast(*void)(*instance)) == 280, "ma_device_descriptor.periodSizeInFrames has unexpected offset % instead of 280", ((cast(*void)(*instance.periodSizeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_descriptor.periodSizeInFrames)) == 4, "ma_device_descriptor.periodSizeInFrames has unexpected size % instead of 4", size_of(type_of(ma_device_descriptor.periodSizeInFrames)));
        assert(((cast(*void)(*instance.periodSizeInMilliseconds)) - cast(*void)(*instance)) == 284, "ma_device_descriptor.periodSizeInMilliseconds has unexpected offset % instead of 284", ((cast(*void)(*instance.periodSizeInMilliseconds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_descriptor.periodSizeInMilliseconds)) == 4, "ma_device_descriptor.periodSizeInMilliseconds has unexpected size % instead of 4", size_of(type_of(ma_device_descriptor.periodSizeInMilliseconds)));
        assert(((cast(*void)(*instance.periodCount)) - cast(*void)(*instance)) == 288, "ma_device_descriptor.periodCount has unexpected offset % instead of 288", ((cast(*void)(*instance.periodCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_descriptor.periodCount)) == 4, "ma_device_descriptor.periodCount has unexpected size % instead of 4", size_of(type_of(ma_device_descriptor.periodCount)));
        assert(size_of(ma_device_descriptor) == 296, "ma_device_descriptor has size % instead of 296", size_of(ma_device_descriptor));
    }

    {
        instance: ma_backend_callbacks;
        assert(((cast(*void)(*instance.onContextInit)) - cast(*void)(*instance)) == 0, "ma_backend_callbacks.onContextInit has unexpected offset % instead of 0", ((cast(*void)(*instance.onContextInit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onContextInit)) == 8, "ma_backend_callbacks.onContextInit has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onContextInit)));
        assert(((cast(*void)(*instance.onContextUninit)) - cast(*void)(*instance)) == 8, "ma_backend_callbacks.onContextUninit has unexpected offset % instead of 8", ((cast(*void)(*instance.onContextUninit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onContextUninit)) == 8, "ma_backend_callbacks.onContextUninit has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onContextUninit)));
        assert(((cast(*void)(*instance.onContextEnumerateDevices)) - cast(*void)(*instance)) == 16, "ma_backend_callbacks.onContextEnumerateDevices has unexpected offset % instead of 16", ((cast(*void)(*instance.onContextEnumerateDevices)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onContextEnumerateDevices)) == 8, "ma_backend_callbacks.onContextEnumerateDevices has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onContextEnumerateDevices)));
        assert(((cast(*void)(*instance.onContextGetDeviceInfo)) - cast(*void)(*instance)) == 24, "ma_backend_callbacks.onContextGetDeviceInfo has unexpected offset % instead of 24", ((cast(*void)(*instance.onContextGetDeviceInfo)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onContextGetDeviceInfo)) == 8, "ma_backend_callbacks.onContextGetDeviceInfo has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onContextGetDeviceInfo)));
        assert(((cast(*void)(*instance.onDeviceInit)) - cast(*void)(*instance)) == 32, "ma_backend_callbacks.onDeviceInit has unexpected offset % instead of 32", ((cast(*void)(*instance.onDeviceInit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onDeviceInit)) == 8, "ma_backend_callbacks.onDeviceInit has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onDeviceInit)));
        assert(((cast(*void)(*instance.onDeviceUninit)) - cast(*void)(*instance)) == 40, "ma_backend_callbacks.onDeviceUninit has unexpected offset % instead of 40", ((cast(*void)(*instance.onDeviceUninit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onDeviceUninit)) == 8, "ma_backend_callbacks.onDeviceUninit has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onDeviceUninit)));
        assert(((cast(*void)(*instance.onDeviceStart)) - cast(*void)(*instance)) == 48, "ma_backend_callbacks.onDeviceStart has unexpected offset % instead of 48", ((cast(*void)(*instance.onDeviceStart)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onDeviceStart)) == 8, "ma_backend_callbacks.onDeviceStart has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onDeviceStart)));
        assert(((cast(*void)(*instance.onDeviceStop)) - cast(*void)(*instance)) == 56, "ma_backend_callbacks.onDeviceStop has unexpected offset % instead of 56", ((cast(*void)(*instance.onDeviceStop)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onDeviceStop)) == 8, "ma_backend_callbacks.onDeviceStop has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onDeviceStop)));
        assert(((cast(*void)(*instance.onDeviceRead)) - cast(*void)(*instance)) == 64, "ma_backend_callbacks.onDeviceRead has unexpected offset % instead of 64", ((cast(*void)(*instance.onDeviceRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onDeviceRead)) == 8, "ma_backend_callbacks.onDeviceRead has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onDeviceRead)));
        assert(((cast(*void)(*instance.onDeviceWrite)) - cast(*void)(*instance)) == 72, "ma_backend_callbacks.onDeviceWrite has unexpected offset % instead of 72", ((cast(*void)(*instance.onDeviceWrite)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onDeviceWrite)) == 8, "ma_backend_callbacks.onDeviceWrite has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onDeviceWrite)));
        assert(((cast(*void)(*instance.onDeviceDataLoop)) - cast(*void)(*instance)) == 80, "ma_backend_callbacks.onDeviceDataLoop has unexpected offset % instead of 80", ((cast(*void)(*instance.onDeviceDataLoop)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onDeviceDataLoop)) == 8, "ma_backend_callbacks.onDeviceDataLoop has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onDeviceDataLoop)));
        assert(((cast(*void)(*instance.onDeviceDataLoopWakeup)) - cast(*void)(*instance)) == 88, "ma_backend_callbacks.onDeviceDataLoopWakeup has unexpected offset % instead of 88", ((cast(*void)(*instance.onDeviceDataLoopWakeup)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onDeviceDataLoopWakeup)) == 8, "ma_backend_callbacks.onDeviceDataLoopWakeup has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onDeviceDataLoopWakeup)));
        assert(((cast(*void)(*instance.onDeviceGetInfo)) - cast(*void)(*instance)) == 96, "ma_backend_callbacks.onDeviceGetInfo has unexpected offset % instead of 96", ((cast(*void)(*instance.onDeviceGetInfo)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_callbacks.onDeviceGetInfo)) == 8, "ma_backend_callbacks.onDeviceGetInfo has unexpected size % instead of 8", size_of(type_of(ma_backend_callbacks.onDeviceGetInfo)));
        assert(size_of(ma_backend_callbacks) == 104, "ma_backend_callbacks has size % instead of 104", size_of(ma_backend_callbacks));
    }

    {
        instance: ma_context_config;
        assert(((cast(*void)(*instance.pLog)) - cast(*void)(*instance)) == 0, "ma_context_config.pLog has unexpected offset % instead of 0", ((cast(*void)(*instance.pLog)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_config.pLog)) == 8, "ma_context_config.pLog has unexpected size % instead of 8", size_of(type_of(ma_context_config.pLog)));
        assert(((cast(*void)(*instance.threadPriority)) - cast(*void)(*instance)) == 8, "ma_context_config.threadPriority has unexpected offset % instead of 8", ((cast(*void)(*instance.threadPriority)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_config.threadPriority)) == 4, "ma_context_config.threadPriority has unexpected size % instead of 4", size_of(type_of(ma_context_config.threadPriority)));
        assert(((cast(*void)(*instance.threadStackSize)) - cast(*void)(*instance)) == 16, "ma_context_config.threadStackSize has unexpected offset % instead of 16", ((cast(*void)(*instance.threadStackSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_config.threadStackSize)) == 8, "ma_context_config.threadStackSize has unexpected size % instead of 8", size_of(type_of(ma_context_config.threadStackSize)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 24, "ma_context_config.pUserData has unexpected offset % instead of 24", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_config.pUserData)) == 8, "ma_context_config.pUserData has unexpected size % instead of 8", size_of(type_of(ma_context_config.pUserData)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 32, "ma_context_config.allocationCallbacks has unexpected offset % instead of 32", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_config.allocationCallbacks)) == 32, "ma_context_config.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_context_config.allocationCallbacks)));
        assert(((cast(*void)(*instance.alsa)) - cast(*void)(*instance)) == 64, "ma_context_config.alsa has unexpected offset % instead of 64", ((cast(*void)(*instance.alsa)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_config.alsa)) == 4, "ma_context_config.alsa has unexpected size % instead of 4", size_of(type_of(ma_context_config.alsa)));
        assert(((cast(*void)(*instance.pulse)) - cast(*void)(*instance)) == 72, "ma_context_config.pulse has unexpected offset % instead of 72", ((cast(*void)(*instance.pulse)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_config.pulse)) == 24, "ma_context_config.pulse has unexpected size % instead of 24", size_of(type_of(ma_context_config.pulse)));
        assert(((cast(*void)(*instance.coreaudio)) - cast(*void)(*instance)) == 96, "ma_context_config.coreaudio has unexpected offset % instead of 96", ((cast(*void)(*instance.coreaudio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_config.coreaudio)) == 16, "ma_context_config.coreaudio has unexpected size % instead of 16", size_of(type_of(ma_context_config.coreaudio)));
        assert(((cast(*void)(*instance.jack)) - cast(*void)(*instance)) == 112, "ma_context_config.jack has unexpected offset % instead of 112", ((cast(*void)(*instance.jack)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_config.jack)) == 16, "ma_context_config.jack has unexpected size % instead of 16", size_of(type_of(ma_context_config.jack)));
        assert(((cast(*void)(*instance.custom)) - cast(*void)(*instance)) == 128, "ma_context_config.custom has unexpected offset % instead of 128", ((cast(*void)(*instance.custom)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_config.custom)) == 104, "ma_context_config.custom has unexpected size % instead of 104", size_of(type_of(ma_context_config.custom)));
        assert(size_of(ma_context_config) == 232, "ma_context_config has size % instead of 232", size_of(ma_context_config));
    }

    {
        instance: ma_context_command__wasapi;
        assert(((cast(*void)(*instance.code)) - cast(*void)(*instance)) == 0, "ma_context_command__wasapi.code has unexpected offset % instead of 0", ((cast(*void)(*instance.code)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_command__wasapi.code)) == 4, "ma_context_command__wasapi.code has unexpected size % instead of 4", size_of(type_of(ma_context_command__wasapi.code)));
        assert(((cast(*void)(*instance.pEvent)) - cast(*void)(*instance)) == 8, "ma_context_command__wasapi.pEvent has unexpected offset % instead of 8", ((cast(*void)(*instance.pEvent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_command__wasapi.pEvent)) == 8, "ma_context_command__wasapi.pEvent has unexpected size % instead of 8", size_of(type_of(ma_context_command__wasapi.pEvent)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 16, "ma_context_command__wasapi.data has unexpected offset % instead of 16", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context_command__wasapi.data)) == 32, "ma_context_command__wasapi.data has unexpected size % instead of 32", size_of(type_of(ma_context_command__wasapi.data)));
        assert(size_of(ma_context_command__wasapi) == 48, "ma_context_command__wasapi has size % instead of 48", size_of(ma_context_command__wasapi));
    }

    {
        instance: ma_context;
        assert(((cast(*void)(*instance.callbacks)) - cast(*void)(*instance)) == 0, "ma_context.callbacks has unexpected offset % instead of 0", ((cast(*void)(*instance.callbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.callbacks)) == 104, "ma_context.callbacks has unexpected size % instead of 104", size_of(type_of(ma_context.callbacks)));
        assert(((cast(*void)(*instance.backend)) - cast(*void)(*instance)) == 104, "ma_context.backend has unexpected offset % instead of 104", ((cast(*void)(*instance.backend)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.backend)) == 4, "ma_context.backend has unexpected size % instead of 4", size_of(type_of(ma_context.backend)));
        assert(((cast(*void)(*instance.pLog)) - cast(*void)(*instance)) == 112, "ma_context.pLog has unexpected offset % instead of 112", ((cast(*void)(*instance.pLog)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.pLog)) == 8, "ma_context.pLog has unexpected size % instead of 8", size_of(type_of(ma_context.pLog)));
        assert(((cast(*void)(*instance.log)) - cast(*void)(*instance)) == 120, "ma_context.log has unexpected offset % instead of 120", ((cast(*void)(*instance.log)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.log)) == 168, "ma_context.log has unexpected size % instead of 168", size_of(type_of(ma_context.log)));
        assert(((cast(*void)(*instance.threadPriority)) - cast(*void)(*instance)) == 288, "ma_context.threadPriority has unexpected offset % instead of 288", ((cast(*void)(*instance.threadPriority)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.threadPriority)) == 4, "ma_context.threadPriority has unexpected size % instead of 4", size_of(type_of(ma_context.threadPriority)));
        assert(((cast(*void)(*instance.threadStackSize)) - cast(*void)(*instance)) == 296, "ma_context.threadStackSize has unexpected offset % instead of 296", ((cast(*void)(*instance.threadStackSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.threadStackSize)) == 8, "ma_context.threadStackSize has unexpected size % instead of 8", size_of(type_of(ma_context.threadStackSize)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 304, "ma_context.pUserData has unexpected offset % instead of 304", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.pUserData)) == 8, "ma_context.pUserData has unexpected size % instead of 8", size_of(type_of(ma_context.pUserData)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 312, "ma_context.allocationCallbacks has unexpected offset % instead of 312", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.allocationCallbacks)) == 32, "ma_context.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_context.allocationCallbacks)));
        assert(((cast(*void)(*instance.deviceEnumLock)) - cast(*void)(*instance)) == 344, "ma_context.deviceEnumLock has unexpected offset % instead of 344", ((cast(*void)(*instance.deviceEnumLock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.deviceEnumLock)) == 64, "ma_context.deviceEnumLock has unexpected size % instead of 64", size_of(type_of(ma_context.deviceEnumLock)));
        assert(((cast(*void)(*instance.deviceInfoLock)) - cast(*void)(*instance)) == 408, "ma_context.deviceInfoLock has unexpected offset % instead of 408", ((cast(*void)(*instance.deviceInfoLock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.deviceInfoLock)) == 64, "ma_context.deviceInfoLock has unexpected size % instead of 64", size_of(type_of(ma_context.deviceInfoLock)));
        assert(((cast(*void)(*instance.deviceInfoCapacity)) - cast(*void)(*instance)) == 472, "ma_context.deviceInfoCapacity has unexpected offset % instead of 472", ((cast(*void)(*instance.deviceInfoCapacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.deviceInfoCapacity)) == 4, "ma_context.deviceInfoCapacity has unexpected size % instead of 4", size_of(type_of(ma_context.deviceInfoCapacity)));
        assert(((cast(*void)(*instance.playbackDeviceInfoCount)) - cast(*void)(*instance)) == 476, "ma_context.playbackDeviceInfoCount has unexpected offset % instead of 476", ((cast(*void)(*instance.playbackDeviceInfoCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.playbackDeviceInfoCount)) == 4, "ma_context.playbackDeviceInfoCount has unexpected size % instead of 4", size_of(type_of(ma_context.playbackDeviceInfoCount)));
        assert(((cast(*void)(*instance.captureDeviceInfoCount)) - cast(*void)(*instance)) == 480, "ma_context.captureDeviceInfoCount has unexpected offset % instead of 480", ((cast(*void)(*instance.captureDeviceInfoCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.captureDeviceInfoCount)) == 4, "ma_context.captureDeviceInfoCount has unexpected size % instead of 4", size_of(type_of(ma_context.captureDeviceInfoCount)));
        assert(((cast(*void)(*instance.pDeviceInfos)) - cast(*void)(*instance)) == 488, "ma_context.pDeviceInfos has unexpected offset % instead of 488", ((cast(*void)(*instance.pDeviceInfos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_context.pDeviceInfos)) == 8, "ma_context.pDeviceInfos has unexpected size % instead of 8", size_of(type_of(ma_context.pDeviceInfos)));
        assert(size_of(ma_context) == 688, "ma_context has size % instead of 688", size_of(ma_context));
    }

    {
        instance: ma_device;
        assert(((cast(*void)(*instance.pContext)) - cast(*void)(*instance)) == 0, "ma_device.pContext has unexpected offset % instead of 0", ((cast(*void)(*instance.pContext)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.pContext)) == 8, "ma_device.pContext has unexpected size % instead of 8", size_of(type_of(ma_device.pContext)));
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 8, "ma_device.type has unexpected offset % instead of 8", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.type)) == 4, "ma_device.type has unexpected size % instead of 4", size_of(type_of(ma_device.type)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 12, "ma_device.sampleRate has unexpected offset % instead of 12", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.sampleRate)) == 4, "ma_device.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_device.sampleRate)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 16, "ma_device.state has unexpected offset % instead of 16", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.state)) == 4, "ma_device.state has unexpected size % instead of 4", size_of(type_of(ma_device.state)));
        assert(((cast(*void)(*instance.onData)) - cast(*void)(*instance)) == 24, "ma_device.onData has unexpected offset % instead of 24", ((cast(*void)(*instance.onData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.onData)) == 8, "ma_device.onData has unexpected size % instead of 8", size_of(type_of(ma_device.onData)));
        assert(((cast(*void)(*instance.onNotification)) - cast(*void)(*instance)) == 32, "ma_device.onNotification has unexpected offset % instead of 32", ((cast(*void)(*instance.onNotification)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.onNotification)) == 8, "ma_device.onNotification has unexpected size % instead of 8", size_of(type_of(ma_device.onNotification)));
        assert(((cast(*void)(*instance.onStop)) - cast(*void)(*instance)) == 40, "ma_device.onStop has unexpected offset % instead of 40", ((cast(*void)(*instance.onStop)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.onStop)) == 8, "ma_device.onStop has unexpected size % instead of 8", size_of(type_of(ma_device.onStop)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 48, "ma_device.pUserData has unexpected offset % instead of 48", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.pUserData)) == 8, "ma_device.pUserData has unexpected size % instead of 8", size_of(type_of(ma_device.pUserData)));
        assert(((cast(*void)(*instance.startStopLock)) - cast(*void)(*instance)) == 56, "ma_device.startStopLock has unexpected offset % instead of 56", ((cast(*void)(*instance.startStopLock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.startStopLock)) == 64, "ma_device.startStopLock has unexpected size % instead of 64", size_of(type_of(ma_device.startStopLock)));
        assert(((cast(*void)(*instance.wakeupEvent)) - cast(*void)(*instance)) == 120, "ma_device.wakeupEvent has unexpected offset % instead of 120", ((cast(*void)(*instance.wakeupEvent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.wakeupEvent)) == 120, "ma_device.wakeupEvent has unexpected size % instead of 120", size_of(type_of(ma_device.wakeupEvent)));
        assert(((cast(*void)(*instance.startEvent)) - cast(*void)(*instance)) == 240, "ma_device.startEvent has unexpected offset % instead of 240", ((cast(*void)(*instance.startEvent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.startEvent)) == 120, "ma_device.startEvent has unexpected size % instead of 120", size_of(type_of(ma_device.startEvent)));
        assert(((cast(*void)(*instance.stopEvent)) - cast(*void)(*instance)) == 360, "ma_device.stopEvent has unexpected offset % instead of 360", ((cast(*void)(*instance.stopEvent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.stopEvent)) == 120, "ma_device.stopEvent has unexpected size % instead of 120", size_of(type_of(ma_device.stopEvent)));
        assert(((cast(*void)(*instance.thread)) - cast(*void)(*instance)) == 480, "ma_device.thread has unexpected offset % instead of 480", ((cast(*void)(*instance.thread)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.thread)) == 8, "ma_device.thread has unexpected size % instead of 8", size_of(type_of(ma_device.thread)));
        assert(((cast(*void)(*instance.workResult)) - cast(*void)(*instance)) == 488, "ma_device.workResult has unexpected offset % instead of 488", ((cast(*void)(*instance.workResult)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.workResult)) == 4, "ma_device.workResult has unexpected size % instead of 4", size_of(type_of(ma_device.workResult)));
        assert(((cast(*void)(*instance.isOwnerOfContext)) - cast(*void)(*instance)) == 492, "ma_device.isOwnerOfContext has unexpected offset % instead of 492", ((cast(*void)(*instance.isOwnerOfContext)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.isOwnerOfContext)) == 1, "ma_device.isOwnerOfContext has unexpected size % instead of 1", size_of(type_of(ma_device.isOwnerOfContext)));
        assert(((cast(*void)(*instance.noPreSilencedOutputBuffer)) - cast(*void)(*instance)) == 493, "ma_device.noPreSilencedOutputBuffer has unexpected offset % instead of 493", ((cast(*void)(*instance.noPreSilencedOutputBuffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.noPreSilencedOutputBuffer)) == 1, "ma_device.noPreSilencedOutputBuffer has unexpected size % instead of 1", size_of(type_of(ma_device.noPreSilencedOutputBuffer)));
        assert(((cast(*void)(*instance.noClip)) - cast(*void)(*instance)) == 494, "ma_device.noClip has unexpected offset % instead of 494", ((cast(*void)(*instance.noClip)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.noClip)) == 1, "ma_device.noClip has unexpected size % instead of 1", size_of(type_of(ma_device.noClip)));
        assert(((cast(*void)(*instance.noDisableDenormals)) - cast(*void)(*instance)) == 495, "ma_device.noDisableDenormals has unexpected offset % instead of 495", ((cast(*void)(*instance.noDisableDenormals)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.noDisableDenormals)) == 1, "ma_device.noDisableDenormals has unexpected size % instead of 1", size_of(type_of(ma_device.noDisableDenormals)));
        assert(((cast(*void)(*instance.noFixedSizedCallback)) - cast(*void)(*instance)) == 496, "ma_device.noFixedSizedCallback has unexpected offset % instead of 496", ((cast(*void)(*instance.noFixedSizedCallback)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.noFixedSizedCallback)) == 1, "ma_device.noFixedSizedCallback has unexpected size % instead of 1", size_of(type_of(ma_device.noFixedSizedCallback)));
        assert(((cast(*void)(*instance.masterVolumeFactor)) - cast(*void)(*instance)) == 500, "ma_device.masterVolumeFactor has unexpected offset % instead of 500", ((cast(*void)(*instance.masterVolumeFactor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.masterVolumeFactor)) == 4, "ma_device.masterVolumeFactor has unexpected size % instead of 4", size_of(type_of(ma_device.masterVolumeFactor)));
        assert(((cast(*void)(*instance.duplexRB)) - cast(*void)(*instance)) == 504, "ma_device.duplexRB has unexpected offset % instead of 504", ((cast(*void)(*instance.duplexRB)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.duplexRB)) == 152, "ma_device.duplexRB has unexpected size % instead of 152", size_of(type_of(ma_device.duplexRB)));
        assert(((cast(*void)(*instance.resampling)) - cast(*void)(*instance)) == 656, "ma_device.resampling has unexpected offset % instead of 656", ((cast(*void)(*instance.resampling)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.resampling)) == 32, "ma_device.resampling has unexpected size % instead of 32", size_of(type_of(ma_device.resampling)));
        assert(((cast(*void)(*instance.playback)) - cast(*void)(*instance)) == 688, "ma_device.playback has unexpected offset % instead of 688", ((cast(*void)(*instance.playback)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.playback)) == 1432, "ma_device.playback has unexpected size % instead of 1432", size_of(type_of(ma_device.playback)));
        assert(((cast(*void)(*instance.capture)) - cast(*void)(*instance)) == 2120, "ma_device.capture has unexpected offset % instead of 2120", ((cast(*void)(*instance.capture)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device.capture)) == 1400, "ma_device.capture has unexpected size % instead of 1400", size_of(type_of(ma_device.capture)));
        assert(size_of(ma_device) == 3944, "ma_device has size % instead of 3944", size_of(ma_device));
    }

    {
        instance: ma_file_info;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_file_info.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_file_info.sizeInBytes)) == 8, "ma_file_info.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_file_info.sizeInBytes)));
        assert(size_of(ma_file_info) == 8, "ma_file_info has size % instead of 8", size_of(ma_file_info));
    }

    {
        instance: ma_vfs_callbacks;
        assert(((cast(*void)(*instance.onOpen)) - cast(*void)(*instance)) == 0, "ma_vfs_callbacks.onOpen has unexpected offset % instead of 0", ((cast(*void)(*instance.onOpen)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_vfs_callbacks.onOpen)) == 8, "ma_vfs_callbacks.onOpen has unexpected size % instead of 8", size_of(type_of(ma_vfs_callbacks.onOpen)));
        assert(((cast(*void)(*instance.onOpenW)) - cast(*void)(*instance)) == 8, "ma_vfs_callbacks.onOpenW has unexpected offset % instead of 8", ((cast(*void)(*instance.onOpenW)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_vfs_callbacks.onOpenW)) == 8, "ma_vfs_callbacks.onOpenW has unexpected size % instead of 8", size_of(type_of(ma_vfs_callbacks.onOpenW)));
        assert(((cast(*void)(*instance.onClose)) - cast(*void)(*instance)) == 16, "ma_vfs_callbacks.onClose has unexpected offset % instead of 16", ((cast(*void)(*instance.onClose)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_vfs_callbacks.onClose)) == 8, "ma_vfs_callbacks.onClose has unexpected size % instead of 8", size_of(type_of(ma_vfs_callbacks.onClose)));
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 24, "ma_vfs_callbacks.onRead has unexpected offset % instead of 24", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_vfs_callbacks.onRead)) == 8, "ma_vfs_callbacks.onRead has unexpected size % instead of 8", size_of(type_of(ma_vfs_callbacks.onRead)));
        assert(((cast(*void)(*instance.onWrite)) - cast(*void)(*instance)) == 32, "ma_vfs_callbacks.onWrite has unexpected offset % instead of 32", ((cast(*void)(*instance.onWrite)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_vfs_callbacks.onWrite)) == 8, "ma_vfs_callbacks.onWrite has unexpected size % instead of 8", size_of(type_of(ma_vfs_callbacks.onWrite)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 40, "ma_vfs_callbacks.onSeek has unexpected offset % instead of 40", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_vfs_callbacks.onSeek)) == 8, "ma_vfs_callbacks.onSeek has unexpected size % instead of 8", size_of(type_of(ma_vfs_callbacks.onSeek)));
        assert(((cast(*void)(*instance.onTell)) - cast(*void)(*instance)) == 48, "ma_vfs_callbacks.onTell has unexpected offset % instead of 48", ((cast(*void)(*instance.onTell)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_vfs_callbacks.onTell)) == 8, "ma_vfs_callbacks.onTell has unexpected size % instead of 8", size_of(type_of(ma_vfs_callbacks.onTell)));
        assert(((cast(*void)(*instance.onInfo)) - cast(*void)(*instance)) == 56, "ma_vfs_callbacks.onInfo has unexpected offset % instead of 56", ((cast(*void)(*instance.onInfo)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_vfs_callbacks.onInfo)) == 8, "ma_vfs_callbacks.onInfo has unexpected size % instead of 8", size_of(type_of(ma_vfs_callbacks.onInfo)));
        assert(size_of(ma_vfs_callbacks) == 64, "ma_vfs_callbacks has size % instead of 64", size_of(ma_vfs_callbacks));
    }

    {
        instance: ma_default_vfs;
        assert(((cast(*void)(*instance.cb)) - cast(*void)(*instance)) == 0, "ma_default_vfs.cb has unexpected offset % instead of 0", ((cast(*void)(*instance.cb)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_default_vfs.cb)) == 64, "ma_default_vfs.cb has unexpected size % instead of 64", size_of(type_of(ma_default_vfs.cb)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 64, "ma_default_vfs.allocationCallbacks has unexpected offset % instead of 64", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_default_vfs.allocationCallbacks)) == 32, "ma_default_vfs.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_default_vfs.allocationCallbacks)));
        assert(size_of(ma_default_vfs) == 96, "ma_default_vfs has size % instead of 96", size_of(ma_default_vfs));
    }

    {
        instance: ma_decoding_backend_config;
        assert(((cast(*void)(*instance.preferredFormat)) - cast(*void)(*instance)) == 0, "ma_decoding_backend_config.preferredFormat has unexpected offset % instead of 0", ((cast(*void)(*instance.preferredFormat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoding_backend_config.preferredFormat)) == 4, "ma_decoding_backend_config.preferredFormat has unexpected size % instead of 4", size_of(type_of(ma_decoding_backend_config.preferredFormat)));
        assert(((cast(*void)(*instance.seekPointCount)) - cast(*void)(*instance)) == 4, "ma_decoding_backend_config.seekPointCount has unexpected offset % instead of 4", ((cast(*void)(*instance.seekPointCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoding_backend_config.seekPointCount)) == 4, "ma_decoding_backend_config.seekPointCount has unexpected size % instead of 4", size_of(type_of(ma_decoding_backend_config.seekPointCount)));
        assert(size_of(ma_decoding_backend_config) == 8, "ma_decoding_backend_config has size % instead of 8", size_of(ma_decoding_backend_config));
    }

    {
        instance: ma_decoding_backend_vtable;
        assert(((cast(*void)(*instance.onInit)) - cast(*void)(*instance)) == 0, "ma_decoding_backend_vtable.onInit has unexpected offset % instead of 0", ((cast(*void)(*instance.onInit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoding_backend_vtable.onInit)) == 8, "ma_decoding_backend_vtable.onInit has unexpected size % instead of 8", size_of(type_of(ma_decoding_backend_vtable.onInit)));
        assert(((cast(*void)(*instance.onInitFile)) - cast(*void)(*instance)) == 8, "ma_decoding_backend_vtable.onInitFile has unexpected offset % instead of 8", ((cast(*void)(*instance.onInitFile)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoding_backend_vtable.onInitFile)) == 8, "ma_decoding_backend_vtable.onInitFile has unexpected size % instead of 8", size_of(type_of(ma_decoding_backend_vtable.onInitFile)));
        assert(((cast(*void)(*instance.onInitFileW)) - cast(*void)(*instance)) == 16, "ma_decoding_backend_vtable.onInitFileW has unexpected offset % instead of 16", ((cast(*void)(*instance.onInitFileW)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoding_backend_vtable.onInitFileW)) == 8, "ma_decoding_backend_vtable.onInitFileW has unexpected size % instead of 8", size_of(type_of(ma_decoding_backend_vtable.onInitFileW)));
        assert(((cast(*void)(*instance.onInitMemory)) - cast(*void)(*instance)) == 24, "ma_decoding_backend_vtable.onInitMemory has unexpected offset % instead of 24", ((cast(*void)(*instance.onInitMemory)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoding_backend_vtable.onInitMemory)) == 8, "ma_decoding_backend_vtable.onInitMemory has unexpected size % instead of 8", size_of(type_of(ma_decoding_backend_vtable.onInitMemory)));
        assert(((cast(*void)(*instance.onUninit)) - cast(*void)(*instance)) == 32, "ma_decoding_backend_vtable.onUninit has unexpected offset % instead of 32", ((cast(*void)(*instance.onUninit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoding_backend_vtable.onUninit)) == 8, "ma_decoding_backend_vtable.onUninit has unexpected size % instead of 8", size_of(type_of(ma_decoding_backend_vtable.onUninit)));
        assert(size_of(ma_decoding_backend_vtable) == 40, "ma_decoding_backend_vtable has size % instead of 40", size_of(ma_decoding_backend_vtable));
    }

    {
        instance: ma_decoder_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_decoder_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.format)) == 4, "ma_decoder_config.format has unexpected size % instead of 4", size_of(type_of(ma_decoder_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_decoder_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.channels)) == 4, "ma_decoder_config.channels has unexpected size % instead of 4", size_of(type_of(ma_decoder_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_decoder_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.sampleRate)) == 4, "ma_decoder_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_decoder_config.sampleRate)));
        assert(((cast(*void)(*instance.pChannelMap)) - cast(*void)(*instance)) == 16, "ma_decoder_config.pChannelMap has unexpected offset % instead of 16", ((cast(*void)(*instance.pChannelMap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.pChannelMap)) == 8, "ma_decoder_config.pChannelMap has unexpected size % instead of 8", size_of(type_of(ma_decoder_config.pChannelMap)));
        assert(((cast(*void)(*instance.channelMixMode)) - cast(*void)(*instance)) == 24, "ma_decoder_config.channelMixMode has unexpected offset % instead of 24", ((cast(*void)(*instance.channelMixMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.channelMixMode)) == 4, "ma_decoder_config.channelMixMode has unexpected size % instead of 4", size_of(type_of(ma_decoder_config.channelMixMode)));
        assert(((cast(*void)(*instance.ditherMode)) - cast(*void)(*instance)) == 28, "ma_decoder_config.ditherMode has unexpected offset % instead of 28", ((cast(*void)(*instance.ditherMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.ditherMode)) == 4, "ma_decoder_config.ditherMode has unexpected size % instead of 4", size_of(type_of(ma_decoder_config.ditherMode)));
        assert(((cast(*void)(*instance.resampling)) - cast(*void)(*instance)) == 32, "ma_decoder_config.resampling has unexpected offset % instead of 32", ((cast(*void)(*instance.resampling)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.resampling)) == 48, "ma_decoder_config.resampling has unexpected size % instead of 48", size_of(type_of(ma_decoder_config.resampling)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 80, "ma_decoder_config.allocationCallbacks has unexpected offset % instead of 80", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.allocationCallbacks)) == 32, "ma_decoder_config.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_decoder_config.allocationCallbacks)));
        assert(((cast(*void)(*instance.encodingFormat)) - cast(*void)(*instance)) == 112, "ma_decoder_config.encodingFormat has unexpected offset % instead of 112", ((cast(*void)(*instance.encodingFormat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.encodingFormat)) == 4, "ma_decoder_config.encodingFormat has unexpected size % instead of 4", size_of(type_of(ma_decoder_config.encodingFormat)));
        assert(((cast(*void)(*instance.seekPointCount)) - cast(*void)(*instance)) == 116, "ma_decoder_config.seekPointCount has unexpected offset % instead of 116", ((cast(*void)(*instance.seekPointCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.seekPointCount)) == 4, "ma_decoder_config.seekPointCount has unexpected size % instead of 4", size_of(type_of(ma_decoder_config.seekPointCount)));
        assert(((cast(*void)(*instance.ppCustomBackendVTables)) - cast(*void)(*instance)) == 120, "ma_decoder_config.ppCustomBackendVTables has unexpected offset % instead of 120", ((cast(*void)(*instance.ppCustomBackendVTables)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.ppCustomBackendVTables)) == 8, "ma_decoder_config.ppCustomBackendVTables has unexpected size % instead of 8", size_of(type_of(ma_decoder_config.ppCustomBackendVTables)));
        assert(((cast(*void)(*instance.customBackendCount)) - cast(*void)(*instance)) == 128, "ma_decoder_config.customBackendCount has unexpected offset % instead of 128", ((cast(*void)(*instance.customBackendCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.customBackendCount)) == 4, "ma_decoder_config.customBackendCount has unexpected size % instead of 4", size_of(type_of(ma_decoder_config.customBackendCount)));
        assert(((cast(*void)(*instance.pCustomBackendUserData)) - cast(*void)(*instance)) == 136, "ma_decoder_config.pCustomBackendUserData has unexpected offset % instead of 136", ((cast(*void)(*instance.pCustomBackendUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder_config.pCustomBackendUserData)) == 8, "ma_decoder_config.pCustomBackendUserData has unexpected size % instead of 8", size_of(type_of(ma_decoder_config.pCustomBackendUserData)));
        assert(size_of(ma_decoder_config) == 144, "ma_decoder_config has size % instead of 144", size_of(ma_decoder_config));
    }

    {
        instance: ma_decoder;
        assert(((cast(*void)(*instance.ds)) - cast(*void)(*instance)) == 0, "ma_decoder.ds has unexpected offset % instead of 0", ((cast(*void)(*instance.ds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.ds)) == 72, "ma_decoder.ds has unexpected size % instead of 72", size_of(type_of(ma_decoder.ds)));
        assert(((cast(*void)(*instance.pBackend)) - cast(*void)(*instance)) == 72, "ma_decoder.pBackend has unexpected offset % instead of 72", ((cast(*void)(*instance.pBackend)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.pBackend)) == 8, "ma_decoder.pBackend has unexpected size % instead of 8", size_of(type_of(ma_decoder.pBackend)));
        assert(((cast(*void)(*instance.pBackendVTable)) - cast(*void)(*instance)) == 80, "ma_decoder.pBackendVTable has unexpected offset % instead of 80", ((cast(*void)(*instance.pBackendVTable)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.pBackendVTable)) == 8, "ma_decoder.pBackendVTable has unexpected size % instead of 8", size_of(type_of(ma_decoder.pBackendVTable)));
        assert(((cast(*void)(*instance.pBackendUserData)) - cast(*void)(*instance)) == 88, "ma_decoder.pBackendUserData has unexpected offset % instead of 88", ((cast(*void)(*instance.pBackendUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.pBackendUserData)) == 8, "ma_decoder.pBackendUserData has unexpected size % instead of 8", size_of(type_of(ma_decoder.pBackendUserData)));
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 96, "ma_decoder.onRead has unexpected offset % instead of 96", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.onRead)) == 8, "ma_decoder.onRead has unexpected size % instead of 8", size_of(type_of(ma_decoder.onRead)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 104, "ma_decoder.onSeek has unexpected offset % instead of 104", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.onSeek)) == 8, "ma_decoder.onSeek has unexpected size % instead of 8", size_of(type_of(ma_decoder.onSeek)));
        assert(((cast(*void)(*instance.onTell)) - cast(*void)(*instance)) == 112, "ma_decoder.onTell has unexpected offset % instead of 112", ((cast(*void)(*instance.onTell)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.onTell)) == 8, "ma_decoder.onTell has unexpected size % instead of 8", size_of(type_of(ma_decoder.onTell)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 120, "ma_decoder.pUserData has unexpected offset % instead of 120", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.pUserData)) == 8, "ma_decoder.pUserData has unexpected size % instead of 8", size_of(type_of(ma_decoder.pUserData)));
        assert(((cast(*void)(*instance.readPointerInPCMFrames)) - cast(*void)(*instance)) == 128, "ma_decoder.readPointerInPCMFrames has unexpected offset % instead of 128", ((cast(*void)(*instance.readPointerInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.readPointerInPCMFrames)) == 8, "ma_decoder.readPointerInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_decoder.readPointerInPCMFrames)));
        assert(((cast(*void)(*instance.outputFormat)) - cast(*void)(*instance)) == 136, "ma_decoder.outputFormat has unexpected offset % instead of 136", ((cast(*void)(*instance.outputFormat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.outputFormat)) == 4, "ma_decoder.outputFormat has unexpected size % instead of 4", size_of(type_of(ma_decoder.outputFormat)));
        assert(((cast(*void)(*instance.outputChannels)) - cast(*void)(*instance)) == 140, "ma_decoder.outputChannels has unexpected offset % instead of 140", ((cast(*void)(*instance.outputChannels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.outputChannels)) == 4, "ma_decoder.outputChannels has unexpected size % instead of 4", size_of(type_of(ma_decoder.outputChannels)));
        assert(((cast(*void)(*instance.outputSampleRate)) - cast(*void)(*instance)) == 144, "ma_decoder.outputSampleRate has unexpected offset % instead of 144", ((cast(*void)(*instance.outputSampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.outputSampleRate)) == 4, "ma_decoder.outputSampleRate has unexpected size % instead of 4", size_of(type_of(ma_decoder.outputSampleRate)));
        assert(((cast(*void)(*instance.converter)) - cast(*void)(*instance)) == 152, "ma_decoder.converter has unexpected offset % instead of 152", ((cast(*void)(*instance.converter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.converter)) == 312, "ma_decoder.converter has unexpected size % instead of 312", size_of(type_of(ma_decoder.converter)));
        assert(((cast(*void)(*instance.pInputCache)) - cast(*void)(*instance)) == 464, "ma_decoder.pInputCache has unexpected offset % instead of 464", ((cast(*void)(*instance.pInputCache)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.pInputCache)) == 8, "ma_decoder.pInputCache has unexpected size % instead of 8", size_of(type_of(ma_decoder.pInputCache)));
        assert(((cast(*void)(*instance.inputCacheCap)) - cast(*void)(*instance)) == 472, "ma_decoder.inputCacheCap has unexpected offset % instead of 472", ((cast(*void)(*instance.inputCacheCap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.inputCacheCap)) == 8, "ma_decoder.inputCacheCap has unexpected size % instead of 8", size_of(type_of(ma_decoder.inputCacheCap)));
        assert(((cast(*void)(*instance.inputCacheConsumed)) - cast(*void)(*instance)) == 480, "ma_decoder.inputCacheConsumed has unexpected offset % instead of 480", ((cast(*void)(*instance.inputCacheConsumed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.inputCacheConsumed)) == 8, "ma_decoder.inputCacheConsumed has unexpected size % instead of 8", size_of(type_of(ma_decoder.inputCacheConsumed)));
        assert(((cast(*void)(*instance.inputCacheRemaining)) - cast(*void)(*instance)) == 488, "ma_decoder.inputCacheRemaining has unexpected offset % instead of 488", ((cast(*void)(*instance.inputCacheRemaining)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.inputCacheRemaining)) == 8, "ma_decoder.inputCacheRemaining has unexpected size % instead of 8", size_of(type_of(ma_decoder.inputCacheRemaining)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 496, "ma_decoder.allocationCallbacks has unexpected offset % instead of 496", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.allocationCallbacks)) == 32, "ma_decoder.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_decoder.allocationCallbacks)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 528, "ma_decoder.data has unexpected offset % instead of 528", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_decoder.data)) == 24, "ma_decoder.data has unexpected size % instead of 24", size_of(type_of(ma_decoder.data)));
        assert(size_of(ma_decoder) == 552, "ma_decoder has size % instead of 552", size_of(ma_decoder));
    }

    {
        instance: ma_encoder_config;
        assert(((cast(*void)(*instance.encodingFormat)) - cast(*void)(*instance)) == 0, "ma_encoder_config.encodingFormat has unexpected offset % instead of 0", ((cast(*void)(*instance.encodingFormat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder_config.encodingFormat)) == 4, "ma_encoder_config.encodingFormat has unexpected size % instead of 4", size_of(type_of(ma_encoder_config.encodingFormat)));
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 4, "ma_encoder_config.format has unexpected offset % instead of 4", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder_config.format)) == 4, "ma_encoder_config.format has unexpected size % instead of 4", size_of(type_of(ma_encoder_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 8, "ma_encoder_config.channels has unexpected offset % instead of 8", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder_config.channels)) == 4, "ma_encoder_config.channels has unexpected size % instead of 4", size_of(type_of(ma_encoder_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 12, "ma_encoder_config.sampleRate has unexpected offset % instead of 12", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder_config.sampleRate)) == 4, "ma_encoder_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_encoder_config.sampleRate)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 16, "ma_encoder_config.allocationCallbacks has unexpected offset % instead of 16", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder_config.allocationCallbacks)) == 32, "ma_encoder_config.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_encoder_config.allocationCallbacks)));
        assert(size_of(ma_encoder_config) == 48, "ma_encoder_config has size % instead of 48", size_of(ma_encoder_config));
    }

    {
        instance: ma_encoder;
        assert(((cast(*void)(*instance.config)) - cast(*void)(*instance)) == 0, "ma_encoder.config has unexpected offset % instead of 0", ((cast(*void)(*instance.config)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder.config)) == 48, "ma_encoder.config has unexpected size % instead of 48", size_of(type_of(ma_encoder.config)));
        assert(((cast(*void)(*instance.onWrite)) - cast(*void)(*instance)) == 48, "ma_encoder.onWrite has unexpected offset % instead of 48", ((cast(*void)(*instance.onWrite)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder.onWrite)) == 8, "ma_encoder.onWrite has unexpected size % instead of 8", size_of(type_of(ma_encoder.onWrite)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 56, "ma_encoder.onSeek has unexpected offset % instead of 56", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder.onSeek)) == 8, "ma_encoder.onSeek has unexpected size % instead of 8", size_of(type_of(ma_encoder.onSeek)));
        assert(((cast(*void)(*instance.onInit)) - cast(*void)(*instance)) == 64, "ma_encoder.onInit has unexpected offset % instead of 64", ((cast(*void)(*instance.onInit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder.onInit)) == 8, "ma_encoder.onInit has unexpected size % instead of 8", size_of(type_of(ma_encoder.onInit)));
        assert(((cast(*void)(*instance.onUninit)) - cast(*void)(*instance)) == 72, "ma_encoder.onUninit has unexpected offset % instead of 72", ((cast(*void)(*instance.onUninit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder.onUninit)) == 8, "ma_encoder.onUninit has unexpected size % instead of 8", size_of(type_of(ma_encoder.onUninit)));
        assert(((cast(*void)(*instance.onWritePCMFrames)) - cast(*void)(*instance)) == 80, "ma_encoder.onWritePCMFrames has unexpected offset % instead of 80", ((cast(*void)(*instance.onWritePCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder.onWritePCMFrames)) == 8, "ma_encoder.onWritePCMFrames has unexpected size % instead of 8", size_of(type_of(ma_encoder.onWritePCMFrames)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 88, "ma_encoder.pUserData has unexpected offset % instead of 88", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder.pUserData)) == 8, "ma_encoder.pUserData has unexpected size % instead of 8", size_of(type_of(ma_encoder.pUserData)));
        assert(((cast(*void)(*instance.pInternalEncoder)) - cast(*void)(*instance)) == 96, "ma_encoder.pInternalEncoder has unexpected offset % instead of 96", ((cast(*void)(*instance.pInternalEncoder)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder.pInternalEncoder)) == 8, "ma_encoder.pInternalEncoder has unexpected size % instead of 8", size_of(type_of(ma_encoder.pInternalEncoder)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 104, "ma_encoder.data has unexpected offset % instead of 104", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_encoder.data)) == 16, "ma_encoder.data has unexpected size % instead of 16", size_of(type_of(ma_encoder.data)));
        assert(size_of(ma_encoder) == 120, "ma_encoder has size % instead of 120", size_of(ma_encoder));
    }

    {
        instance: ma_waveform_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_waveform_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_waveform_config.format)) == 4, "ma_waveform_config.format has unexpected size % instead of 4", size_of(type_of(ma_waveform_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_waveform_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_waveform_config.channels)) == 4, "ma_waveform_config.channels has unexpected size % instead of 4", size_of(type_of(ma_waveform_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_waveform_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_waveform_config.sampleRate)) == 4, "ma_waveform_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_waveform_config.sampleRate)));
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 12, "ma_waveform_config.type has unexpected offset % instead of 12", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_waveform_config.type)) == 4, "ma_waveform_config.type has unexpected size % instead of 4", size_of(type_of(ma_waveform_config.type)));
        assert(((cast(*void)(*instance.amplitude)) - cast(*void)(*instance)) == 16, "ma_waveform_config.amplitude has unexpected offset % instead of 16", ((cast(*void)(*instance.amplitude)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_waveform_config.amplitude)) == 8, "ma_waveform_config.amplitude has unexpected size % instead of 8", size_of(type_of(ma_waveform_config.amplitude)));
        assert(((cast(*void)(*instance.frequency)) - cast(*void)(*instance)) == 24, "ma_waveform_config.frequency has unexpected offset % instead of 24", ((cast(*void)(*instance.frequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_waveform_config.frequency)) == 8, "ma_waveform_config.frequency has unexpected size % instead of 8", size_of(type_of(ma_waveform_config.frequency)));
        assert(size_of(ma_waveform_config) == 32, "ma_waveform_config has size % instead of 32", size_of(ma_waveform_config));
    }

    {
        instance: ma_waveform;
        assert(((cast(*void)(*instance.ds)) - cast(*void)(*instance)) == 0, "ma_waveform.ds has unexpected offset % instead of 0", ((cast(*void)(*instance.ds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_waveform.ds)) == 72, "ma_waveform.ds has unexpected size % instead of 72", size_of(type_of(ma_waveform.ds)));
        assert(((cast(*void)(*instance.config)) - cast(*void)(*instance)) == 72, "ma_waveform.config has unexpected offset % instead of 72", ((cast(*void)(*instance.config)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_waveform.config)) == 32, "ma_waveform.config has unexpected size % instead of 32", size_of(type_of(ma_waveform.config)));
        assert(((cast(*void)(*instance.advance)) - cast(*void)(*instance)) == 104, "ma_waveform.advance has unexpected offset % instead of 104", ((cast(*void)(*instance.advance)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_waveform.advance)) == 8, "ma_waveform.advance has unexpected size % instead of 8", size_of(type_of(ma_waveform.advance)));
        assert(((cast(*void)(*instance.time)) - cast(*void)(*instance)) == 112, "ma_waveform.time has unexpected offset % instead of 112", ((cast(*void)(*instance.time)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_waveform.time)) == 8, "ma_waveform.time has unexpected size % instead of 8", size_of(type_of(ma_waveform.time)));
        assert(size_of(ma_waveform) == 120, "ma_waveform has size % instead of 120", size_of(ma_waveform));
    }

    {
        instance: ma_pulsewave_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_pulsewave_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pulsewave_config.format)) == 4, "ma_pulsewave_config.format has unexpected size % instead of 4", size_of(type_of(ma_pulsewave_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_pulsewave_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pulsewave_config.channels)) == 4, "ma_pulsewave_config.channels has unexpected size % instead of 4", size_of(type_of(ma_pulsewave_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 8, "ma_pulsewave_config.sampleRate has unexpected offset % instead of 8", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pulsewave_config.sampleRate)) == 4, "ma_pulsewave_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_pulsewave_config.sampleRate)));
        assert(((cast(*void)(*instance.dutyCycle)) - cast(*void)(*instance)) == 16, "ma_pulsewave_config.dutyCycle has unexpected offset % instead of 16", ((cast(*void)(*instance.dutyCycle)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pulsewave_config.dutyCycle)) == 8, "ma_pulsewave_config.dutyCycle has unexpected size % instead of 8", size_of(type_of(ma_pulsewave_config.dutyCycle)));
        assert(((cast(*void)(*instance.amplitude)) - cast(*void)(*instance)) == 24, "ma_pulsewave_config.amplitude has unexpected offset % instead of 24", ((cast(*void)(*instance.amplitude)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pulsewave_config.amplitude)) == 8, "ma_pulsewave_config.amplitude has unexpected size % instead of 8", size_of(type_of(ma_pulsewave_config.amplitude)));
        assert(((cast(*void)(*instance.frequency)) - cast(*void)(*instance)) == 32, "ma_pulsewave_config.frequency has unexpected offset % instead of 32", ((cast(*void)(*instance.frequency)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pulsewave_config.frequency)) == 8, "ma_pulsewave_config.frequency has unexpected size % instead of 8", size_of(type_of(ma_pulsewave_config.frequency)));
        assert(size_of(ma_pulsewave_config) == 40, "ma_pulsewave_config has size % instead of 40", size_of(ma_pulsewave_config));
    }

    {
        instance: ma_pulsewave;
        assert(((cast(*void)(*instance.waveform)) - cast(*void)(*instance)) == 0, "ma_pulsewave.waveform has unexpected offset % instead of 0", ((cast(*void)(*instance.waveform)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pulsewave.waveform)) == 120, "ma_pulsewave.waveform has unexpected size % instead of 120", size_of(type_of(ma_pulsewave.waveform)));
        assert(((cast(*void)(*instance.config)) - cast(*void)(*instance)) == 120, "ma_pulsewave.config has unexpected offset % instead of 120", ((cast(*void)(*instance.config)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_pulsewave.config)) == 40, "ma_pulsewave.config has unexpected size % instead of 40", size_of(type_of(ma_pulsewave.config)));
        assert(size_of(ma_pulsewave) == 160, "ma_pulsewave has size % instead of 160", size_of(ma_pulsewave));
    }

    {
        instance: ma_noise_config;
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 0, "ma_noise_config.format has unexpected offset % instead of 0", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise_config.format)) == 4, "ma_noise_config.format has unexpected size % instead of 4", size_of(type_of(ma_noise_config.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_noise_config.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise_config.channels)) == 4, "ma_noise_config.channels has unexpected size % instead of 4", size_of(type_of(ma_noise_config.channels)));
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 8, "ma_noise_config.type has unexpected offset % instead of 8", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise_config.type)) == 4, "ma_noise_config.type has unexpected size % instead of 4", size_of(type_of(ma_noise_config.type)));
        assert(((cast(*void)(*instance.seed)) - cast(*void)(*instance)) == 12, "ma_noise_config.seed has unexpected offset % instead of 12", ((cast(*void)(*instance.seed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise_config.seed)) == 4, "ma_noise_config.seed has unexpected size % instead of 4", size_of(type_of(ma_noise_config.seed)));
        assert(((cast(*void)(*instance.amplitude)) - cast(*void)(*instance)) == 16, "ma_noise_config.amplitude has unexpected offset % instead of 16", ((cast(*void)(*instance.amplitude)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise_config.amplitude)) == 8, "ma_noise_config.amplitude has unexpected size % instead of 8", size_of(type_of(ma_noise_config.amplitude)));
        assert(((cast(*void)(*instance.duplicateChannels)) - cast(*void)(*instance)) == 24, "ma_noise_config.duplicateChannels has unexpected offset % instead of 24", ((cast(*void)(*instance.duplicateChannels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise_config.duplicateChannels)) == 4, "ma_noise_config.duplicateChannels has unexpected size % instead of 4", size_of(type_of(ma_noise_config.duplicateChannels)));
        assert(size_of(ma_noise_config) == 32, "ma_noise_config has size % instead of 32", size_of(ma_noise_config));
    }

    {
        instance: ma_noise;
        assert(((cast(*void)(*instance.ds)) - cast(*void)(*instance)) == 0, "ma_noise.ds has unexpected offset % instead of 0", ((cast(*void)(*instance.ds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise.ds)) == 56, "ma_noise.ds has unexpected size % instead of 56", size_of(type_of(ma_noise.ds)));
        assert(((cast(*void)(*instance.config)) - cast(*void)(*instance)) == 56, "ma_noise.config has unexpected offset % instead of 56", ((cast(*void)(*instance.config)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise.config)) == 32, "ma_noise.config has unexpected size % instead of 32", size_of(type_of(ma_noise.config)));
        assert(((cast(*void)(*instance.lcg)) - cast(*void)(*instance)) == 88, "ma_noise.lcg has unexpected offset % instead of 88", ((cast(*void)(*instance.lcg)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise.lcg)) == 4, "ma_noise.lcg has unexpected size % instead of 4", size_of(type_of(ma_noise.lcg)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 96, "ma_noise.state has unexpected offset % instead of 96", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise.state)) == 24, "ma_noise.state has unexpected size % instead of 24", size_of(type_of(ma_noise.state)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 120, "ma_noise._pHeap has unexpected offset % instead of 120", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise._pHeap)) == 8, "ma_noise._pHeap has unexpected size % instead of 8", size_of(type_of(ma_noise._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 128, "ma_noise._ownsHeap has unexpected offset % instead of 128", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise._ownsHeap)) == 4, "ma_noise._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_noise._ownsHeap)));
        assert(size_of(ma_noise) == 136, "ma_noise has size % instead of 136", size_of(ma_noise));
    }

    {
        instance: ma_resource_manager_pipeline_stage_notification;
        assert(((cast(*void)(*instance.pNotification)) - cast(*void)(*instance)) == 0, "ma_resource_manager_pipeline_stage_notification.pNotification has unexpected offset % instead of 0", ((cast(*void)(*instance.pNotification)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_pipeline_stage_notification.pNotification)) == 8, "ma_resource_manager_pipeline_stage_notification.pNotification has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_pipeline_stage_notification.pNotification)));
        assert(((cast(*void)(*instance.pFence)) - cast(*void)(*instance)) == 8, "ma_resource_manager_pipeline_stage_notification.pFence has unexpected offset % instead of 8", ((cast(*void)(*instance.pFence)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_pipeline_stage_notification.pFence)) == 8, "ma_resource_manager_pipeline_stage_notification.pFence has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_pipeline_stage_notification.pFence)));
        assert(size_of(ma_resource_manager_pipeline_stage_notification) == 16, "ma_resource_manager_pipeline_stage_notification has size % instead of 16", size_of(ma_resource_manager_pipeline_stage_notification));
    }

    {
        instance: ma_resource_manager_pipeline_notifications;
        assert(((cast(*void)(*instance.init)) - cast(*void)(*instance)) == 0, "ma_resource_manager_pipeline_notifications.init has unexpected offset % instead of 0", ((cast(*void)(*instance.init)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_pipeline_notifications.init)) == 16, "ma_resource_manager_pipeline_notifications.init has unexpected size % instead of 16", size_of(type_of(ma_resource_manager_pipeline_notifications.init)));
        assert(((cast(*void)(*instance.done)) - cast(*void)(*instance)) == 16, "ma_resource_manager_pipeline_notifications.done has unexpected offset % instead of 16", ((cast(*void)(*instance.done)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_pipeline_notifications.done)) == 16, "ma_resource_manager_pipeline_notifications.done has unexpected size % instead of 16", size_of(type_of(ma_resource_manager_pipeline_notifications.done)));
        assert(size_of(ma_resource_manager_pipeline_notifications) == 32, "ma_resource_manager_pipeline_notifications has size % instead of 32", size_of(ma_resource_manager_pipeline_notifications));
    }

    {
        instance: ma_resource_manager_data_source_config;
        assert(((cast(*void)(*instance.pFilePath)) - cast(*void)(*instance)) == 0, "ma_resource_manager_data_source_config.pFilePath has unexpected offset % instead of 0", ((cast(*void)(*instance.pFilePath)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source_config.pFilePath)) == 8, "ma_resource_manager_data_source_config.pFilePath has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_source_config.pFilePath)));
        assert(((cast(*void)(*instance.pFilePathW)) - cast(*void)(*instance)) == 8, "ma_resource_manager_data_source_config.pFilePathW has unexpected offset % instead of 8", ((cast(*void)(*instance.pFilePathW)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source_config.pFilePathW)) == 8, "ma_resource_manager_data_source_config.pFilePathW has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_source_config.pFilePathW)));
        assert(((cast(*void)(*instance.pNotifications)) - cast(*void)(*instance)) == 16, "ma_resource_manager_data_source_config.pNotifications has unexpected offset % instead of 16", ((cast(*void)(*instance.pNotifications)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source_config.pNotifications)) == 8, "ma_resource_manager_data_source_config.pNotifications has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_source_config.pNotifications)));
        assert(((cast(*void)(*instance.initialSeekPointInPCMFrames)) - cast(*void)(*instance)) == 24, "ma_resource_manager_data_source_config.initialSeekPointInPCMFrames has unexpected offset % instead of 24", ((cast(*void)(*instance.initialSeekPointInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source_config.initialSeekPointInPCMFrames)) == 8, "ma_resource_manager_data_source_config.initialSeekPointInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_source_config.initialSeekPointInPCMFrames)));
        assert(((cast(*void)(*instance.rangeBegInPCMFrames)) - cast(*void)(*instance)) == 32, "ma_resource_manager_data_source_config.rangeBegInPCMFrames has unexpected offset % instead of 32", ((cast(*void)(*instance.rangeBegInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source_config.rangeBegInPCMFrames)) == 8, "ma_resource_manager_data_source_config.rangeBegInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_source_config.rangeBegInPCMFrames)));
        assert(((cast(*void)(*instance.rangeEndInPCMFrames)) - cast(*void)(*instance)) == 40, "ma_resource_manager_data_source_config.rangeEndInPCMFrames has unexpected offset % instead of 40", ((cast(*void)(*instance.rangeEndInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source_config.rangeEndInPCMFrames)) == 8, "ma_resource_manager_data_source_config.rangeEndInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_source_config.rangeEndInPCMFrames)));
        assert(((cast(*void)(*instance.loopPointBegInPCMFrames)) - cast(*void)(*instance)) == 48, "ma_resource_manager_data_source_config.loopPointBegInPCMFrames has unexpected offset % instead of 48", ((cast(*void)(*instance.loopPointBegInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source_config.loopPointBegInPCMFrames)) == 8, "ma_resource_manager_data_source_config.loopPointBegInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_source_config.loopPointBegInPCMFrames)));
        assert(((cast(*void)(*instance.loopPointEndInPCMFrames)) - cast(*void)(*instance)) == 56, "ma_resource_manager_data_source_config.loopPointEndInPCMFrames has unexpected offset % instead of 56", ((cast(*void)(*instance.loopPointEndInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source_config.loopPointEndInPCMFrames)) == 8, "ma_resource_manager_data_source_config.loopPointEndInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_source_config.loopPointEndInPCMFrames)));
        assert(((cast(*void)(*instance.isLooping)) - cast(*void)(*instance)) == 64, "ma_resource_manager_data_source_config.isLooping has unexpected offset % instead of 64", ((cast(*void)(*instance.isLooping)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source_config.isLooping)) == 4, "ma_resource_manager_data_source_config.isLooping has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_source_config.isLooping)));
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 68, "ma_resource_manager_data_source_config.flags has unexpected offset % instead of 68", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source_config.flags)) == 4, "ma_resource_manager_data_source_config.flags has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_source_config.flags)));
        assert(size_of(ma_resource_manager_data_source_config) == 72, "ma_resource_manager_data_source_config has size % instead of 72", size_of(ma_resource_manager_data_source_config));
    }

    {
        instance: ma_resource_manager_data_supply;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "ma_resource_manager_data_supply.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_supply.type)) == 4, "ma_resource_manager_data_supply.type has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_supply.type)));
        assert(((cast(*void)(*instance.backend)) - cast(*void)(*instance)) == 8, "ma_resource_manager_data_supply.backend has unexpected offset % instead of 8", ((cast(*void)(*instance.backend)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_supply.backend)) == 56, "ma_resource_manager_data_supply.backend has unexpected size % instead of 56", size_of(type_of(ma_resource_manager_data_supply.backend)));
        assert(size_of(ma_resource_manager_data_supply) == 64, "ma_resource_manager_data_supply has size % instead of 64", size_of(ma_resource_manager_data_supply));
    }

    {
        instance: ma_resource_manager_data_buffer_node;
        assert(((cast(*void)(*instance.hashedName32)) - cast(*void)(*instance)) == 0, "ma_resource_manager_data_buffer_node.hashedName32 has unexpected offset % instead of 0", ((cast(*void)(*instance.hashedName32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer_node.hashedName32)) == 4, "ma_resource_manager_data_buffer_node.hashedName32 has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer_node.hashedName32)));
        assert(((cast(*void)(*instance.refCount)) - cast(*void)(*instance)) == 4, "ma_resource_manager_data_buffer_node.refCount has unexpected offset % instead of 4", ((cast(*void)(*instance.refCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer_node.refCount)) == 4, "ma_resource_manager_data_buffer_node.refCount has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer_node.refCount)));
        assert(((cast(*void)(*instance.result)) - cast(*void)(*instance)) == 8, "ma_resource_manager_data_buffer_node.result has unexpected offset % instead of 8", ((cast(*void)(*instance.result)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer_node.result)) == 4, "ma_resource_manager_data_buffer_node.result has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer_node.result)));
        assert(((cast(*void)(*instance.executionCounter)) - cast(*void)(*instance)) == 12, "ma_resource_manager_data_buffer_node.executionCounter has unexpected offset % instead of 12", ((cast(*void)(*instance.executionCounter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer_node.executionCounter)) == 4, "ma_resource_manager_data_buffer_node.executionCounter has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer_node.executionCounter)));
        assert(((cast(*void)(*instance.executionPointer)) - cast(*void)(*instance)) == 16, "ma_resource_manager_data_buffer_node.executionPointer has unexpected offset % instead of 16", ((cast(*void)(*instance.executionPointer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer_node.executionPointer)) == 4, "ma_resource_manager_data_buffer_node.executionPointer has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer_node.executionPointer)));
        assert(((cast(*void)(*instance.isDataOwnedByResourceManager)) - cast(*void)(*instance)) == 20, "ma_resource_manager_data_buffer_node.isDataOwnedByResourceManager has unexpected offset % instead of 20", ((cast(*void)(*instance.isDataOwnedByResourceManager)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer_node.isDataOwnedByResourceManager)) == 4, "ma_resource_manager_data_buffer_node.isDataOwnedByResourceManager has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer_node.isDataOwnedByResourceManager)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 24, "ma_resource_manager_data_buffer_node.data has unexpected offset % instead of 24", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer_node.data)) == 64, "ma_resource_manager_data_buffer_node.data has unexpected size % instead of 64", size_of(type_of(ma_resource_manager_data_buffer_node.data)));
        assert(((cast(*void)(*instance.pParent)) - cast(*void)(*instance)) == 88, "ma_resource_manager_data_buffer_node.pParent has unexpected offset % instead of 88", ((cast(*void)(*instance.pParent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer_node.pParent)) == 8, "ma_resource_manager_data_buffer_node.pParent has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_buffer_node.pParent)));
        assert(((cast(*void)(*instance.pChildLo)) - cast(*void)(*instance)) == 96, "ma_resource_manager_data_buffer_node.pChildLo has unexpected offset % instead of 96", ((cast(*void)(*instance.pChildLo)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer_node.pChildLo)) == 8, "ma_resource_manager_data_buffer_node.pChildLo has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_buffer_node.pChildLo)));
        assert(((cast(*void)(*instance.pChildHi)) - cast(*void)(*instance)) == 104, "ma_resource_manager_data_buffer_node.pChildHi has unexpected offset % instead of 104", ((cast(*void)(*instance.pChildHi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer_node.pChildHi)) == 8, "ma_resource_manager_data_buffer_node.pChildHi has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_buffer_node.pChildHi)));
        assert(size_of(ma_resource_manager_data_buffer_node) == 112, "ma_resource_manager_data_buffer_node has size % instead of 112", size_of(ma_resource_manager_data_buffer_node));
    }

    {
        instance: ma_resource_manager_data_buffer;
        assert(((cast(*void)(*instance.ds)) - cast(*void)(*instance)) == 0, "ma_resource_manager_data_buffer.ds has unexpected offset % instead of 0", ((cast(*void)(*instance.ds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.ds)) == 72, "ma_resource_manager_data_buffer.ds has unexpected size % instead of 72", size_of(type_of(ma_resource_manager_data_buffer.ds)));
        assert(((cast(*void)(*instance.pResourceManager)) - cast(*void)(*instance)) == 72, "ma_resource_manager_data_buffer.pResourceManager has unexpected offset % instead of 72", ((cast(*void)(*instance.pResourceManager)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.pResourceManager)) == 8, "ma_resource_manager_data_buffer.pResourceManager has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_buffer.pResourceManager)));
        assert(((cast(*void)(*instance.pNode)) - cast(*void)(*instance)) == 80, "ma_resource_manager_data_buffer.pNode has unexpected offset % instead of 80", ((cast(*void)(*instance.pNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.pNode)) == 8, "ma_resource_manager_data_buffer.pNode has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_buffer.pNode)));
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 88, "ma_resource_manager_data_buffer.flags has unexpected offset % instead of 88", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.flags)) == 4, "ma_resource_manager_data_buffer.flags has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer.flags)));
        assert(((cast(*void)(*instance.executionCounter)) - cast(*void)(*instance)) == 92, "ma_resource_manager_data_buffer.executionCounter has unexpected offset % instead of 92", ((cast(*void)(*instance.executionCounter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.executionCounter)) == 4, "ma_resource_manager_data_buffer.executionCounter has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer.executionCounter)));
        assert(((cast(*void)(*instance.executionPointer)) - cast(*void)(*instance)) == 96, "ma_resource_manager_data_buffer.executionPointer has unexpected offset % instead of 96", ((cast(*void)(*instance.executionPointer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.executionPointer)) == 4, "ma_resource_manager_data_buffer.executionPointer has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer.executionPointer)));
        assert(((cast(*void)(*instance.seekTargetInPCMFrames)) - cast(*void)(*instance)) == 104, "ma_resource_manager_data_buffer.seekTargetInPCMFrames has unexpected offset % instead of 104", ((cast(*void)(*instance.seekTargetInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.seekTargetInPCMFrames)) == 8, "ma_resource_manager_data_buffer.seekTargetInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_buffer.seekTargetInPCMFrames)));
        assert(((cast(*void)(*instance.seekToCursorOnNextRead)) - cast(*void)(*instance)) == 112, "ma_resource_manager_data_buffer.seekToCursorOnNextRead has unexpected offset % instead of 112", ((cast(*void)(*instance.seekToCursorOnNextRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.seekToCursorOnNextRead)) == 4, "ma_resource_manager_data_buffer.seekToCursorOnNextRead has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer.seekToCursorOnNextRead)));
        assert(((cast(*void)(*instance.result)) - cast(*void)(*instance)) == 116, "ma_resource_manager_data_buffer.result has unexpected offset % instead of 116", ((cast(*void)(*instance.result)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.result)) == 4, "ma_resource_manager_data_buffer.result has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer.result)));
        assert(((cast(*void)(*instance.isLooping)) - cast(*void)(*instance)) == 120, "ma_resource_manager_data_buffer.isLooping has unexpected offset % instead of 120", ((cast(*void)(*instance.isLooping)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.isLooping)) == 4, "ma_resource_manager_data_buffer.isLooping has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer.isLooping)));
        assert(((cast(*void)(*instance.isConnectorInitialized)) - cast(*void)(*instance)) == 124, "ma_resource_manager_data_buffer.isConnectorInitialized has unexpected offset % instead of 124", ((cast(*void)(*instance.isConnectorInitialized)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.isConnectorInitialized)) == 4, "ma_resource_manager_data_buffer.isConnectorInitialized has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_buffer.isConnectorInitialized)));
        assert(((cast(*void)(*instance.connector)) - cast(*void)(*instance)) == 128, "ma_resource_manager_data_buffer.connector has unexpected offset % instead of 128", ((cast(*void)(*instance.connector)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_buffer.connector)) == 552, "ma_resource_manager_data_buffer.connector has unexpected size % instead of 552", size_of(type_of(ma_resource_manager_data_buffer.connector)));
        assert(size_of(ma_resource_manager_data_buffer) == 680, "ma_resource_manager_data_buffer has size % instead of 680", size_of(ma_resource_manager_data_buffer));
    }

    {
        instance: ma_resource_manager_data_stream;
        assert(((cast(*void)(*instance.ds)) - cast(*void)(*instance)) == 0, "ma_resource_manager_data_stream.ds has unexpected offset % instead of 0", ((cast(*void)(*instance.ds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.ds)) == 72, "ma_resource_manager_data_stream.ds has unexpected size % instead of 72", size_of(type_of(ma_resource_manager_data_stream.ds)));
        assert(((cast(*void)(*instance.pResourceManager)) - cast(*void)(*instance)) == 72, "ma_resource_manager_data_stream.pResourceManager has unexpected offset % instead of 72", ((cast(*void)(*instance.pResourceManager)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.pResourceManager)) == 8, "ma_resource_manager_data_stream.pResourceManager has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_stream.pResourceManager)));
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 80, "ma_resource_manager_data_stream.flags has unexpected offset % instead of 80", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.flags)) == 4, "ma_resource_manager_data_stream.flags has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_stream.flags)));
        assert(((cast(*void)(*instance.decoder)) - cast(*void)(*instance)) == 88, "ma_resource_manager_data_stream.decoder has unexpected offset % instead of 88", ((cast(*void)(*instance.decoder)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.decoder)) == 552, "ma_resource_manager_data_stream.decoder has unexpected size % instead of 552", size_of(type_of(ma_resource_manager_data_stream.decoder)));
        assert(((cast(*void)(*instance.isDecoderInitialized)) - cast(*void)(*instance)) == 640, "ma_resource_manager_data_stream.isDecoderInitialized has unexpected offset % instead of 640", ((cast(*void)(*instance.isDecoderInitialized)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.isDecoderInitialized)) == 4, "ma_resource_manager_data_stream.isDecoderInitialized has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_stream.isDecoderInitialized)));
        assert(((cast(*void)(*instance.totalLengthInPCMFrames)) - cast(*void)(*instance)) == 648, "ma_resource_manager_data_stream.totalLengthInPCMFrames has unexpected offset % instead of 648", ((cast(*void)(*instance.totalLengthInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.totalLengthInPCMFrames)) == 8, "ma_resource_manager_data_stream.totalLengthInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_stream.totalLengthInPCMFrames)));
        assert(((cast(*void)(*instance.relativeCursor)) - cast(*void)(*instance)) == 656, "ma_resource_manager_data_stream.relativeCursor has unexpected offset % instead of 656", ((cast(*void)(*instance.relativeCursor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.relativeCursor)) == 4, "ma_resource_manager_data_stream.relativeCursor has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_stream.relativeCursor)));
        assert(((cast(*void)(*instance.absoluteCursor)) - cast(*void)(*instance)) == 664, "ma_resource_manager_data_stream.absoluteCursor has unexpected offset % instead of 664", ((cast(*void)(*instance.absoluteCursor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.absoluteCursor)) == 8, "ma_resource_manager_data_stream.absoluteCursor has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_stream.absoluteCursor)));
        assert(((cast(*void)(*instance.currentPageIndex)) - cast(*void)(*instance)) == 672, "ma_resource_manager_data_stream.currentPageIndex has unexpected offset % instead of 672", ((cast(*void)(*instance.currentPageIndex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.currentPageIndex)) == 4, "ma_resource_manager_data_stream.currentPageIndex has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_stream.currentPageIndex)));
        assert(((cast(*void)(*instance.executionCounter)) - cast(*void)(*instance)) == 676, "ma_resource_manager_data_stream.executionCounter has unexpected offset % instead of 676", ((cast(*void)(*instance.executionCounter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.executionCounter)) == 4, "ma_resource_manager_data_stream.executionCounter has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_stream.executionCounter)));
        assert(((cast(*void)(*instance.executionPointer)) - cast(*void)(*instance)) == 680, "ma_resource_manager_data_stream.executionPointer has unexpected offset % instead of 680", ((cast(*void)(*instance.executionPointer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.executionPointer)) == 4, "ma_resource_manager_data_stream.executionPointer has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_stream.executionPointer)));
        assert(((cast(*void)(*instance.isLooping)) - cast(*void)(*instance)) == 684, "ma_resource_manager_data_stream.isLooping has unexpected offset % instead of 684", ((cast(*void)(*instance.isLooping)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.isLooping)) == 4, "ma_resource_manager_data_stream.isLooping has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_stream.isLooping)));
        assert(((cast(*void)(*instance.pPageData)) - cast(*void)(*instance)) == 688, "ma_resource_manager_data_stream.pPageData has unexpected offset % instead of 688", ((cast(*void)(*instance.pPageData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.pPageData)) == 8, "ma_resource_manager_data_stream.pPageData has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_stream.pPageData)));
        assert(((cast(*void)(*instance.pageFrameCount)) - cast(*void)(*instance)) == 696, "ma_resource_manager_data_stream.pageFrameCount has unexpected offset % instead of 696", ((cast(*void)(*instance.pageFrameCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.pageFrameCount)) == 8, "ma_resource_manager_data_stream.pageFrameCount has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_stream.pageFrameCount)));
        assert(((cast(*void)(*instance.result)) - cast(*void)(*instance)) == 704, "ma_resource_manager_data_stream.result has unexpected offset % instead of 704", ((cast(*void)(*instance.result)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.result)) == 4, "ma_resource_manager_data_stream.result has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_stream.result)));
        assert(((cast(*void)(*instance.isDecoderAtEnd)) - cast(*void)(*instance)) == 708, "ma_resource_manager_data_stream.isDecoderAtEnd has unexpected offset % instead of 708", ((cast(*void)(*instance.isDecoderAtEnd)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.isDecoderAtEnd)) == 4, "ma_resource_manager_data_stream.isDecoderAtEnd has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_stream.isDecoderAtEnd)));
        assert(((cast(*void)(*instance.isPageValid)) - cast(*void)(*instance)) == 712, "ma_resource_manager_data_stream.isPageValid has unexpected offset % instead of 712", ((cast(*void)(*instance.isPageValid)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.isPageValid)) == 8, "ma_resource_manager_data_stream.isPageValid has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_data_stream.isPageValid)));
        assert(((cast(*void)(*instance.seekCounter)) - cast(*void)(*instance)) == 720, "ma_resource_manager_data_stream.seekCounter has unexpected offset % instead of 720", ((cast(*void)(*instance.seekCounter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_stream.seekCounter)) == 4, "ma_resource_manager_data_stream.seekCounter has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_stream.seekCounter)));
        assert(size_of(ma_resource_manager_data_stream) == 728, "ma_resource_manager_data_stream has size % instead of 728", size_of(ma_resource_manager_data_stream));
    }

    {
        instance: ma_resource_manager_data_source;
        assert(((cast(*void)(*instance.backend)) - cast(*void)(*instance)) == 0, "ma_resource_manager_data_source.backend has unexpected offset % instead of 0", ((cast(*void)(*instance.backend)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source.backend)) == 728, "ma_resource_manager_data_source.backend has unexpected size % instead of 728", size_of(type_of(ma_resource_manager_data_source.backend)));
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 728, "ma_resource_manager_data_source.flags has unexpected offset % instead of 728", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source.flags)) == 4, "ma_resource_manager_data_source.flags has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_source.flags)));
        assert(((cast(*void)(*instance.executionCounter)) - cast(*void)(*instance)) == 732, "ma_resource_manager_data_source.executionCounter has unexpected offset % instead of 732", ((cast(*void)(*instance.executionCounter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source.executionCounter)) == 4, "ma_resource_manager_data_source.executionCounter has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_source.executionCounter)));
        assert(((cast(*void)(*instance.executionPointer)) - cast(*void)(*instance)) == 736, "ma_resource_manager_data_source.executionPointer has unexpected offset % instead of 736", ((cast(*void)(*instance.executionPointer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_data_source.executionPointer)) == 4, "ma_resource_manager_data_source.executionPointer has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_data_source.executionPointer)));
        assert(size_of(ma_resource_manager_data_source) == 744, "ma_resource_manager_data_source has size % instead of 744", size_of(ma_resource_manager_data_source));
    }

    {
        instance: ma_resource_manager_config;
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 0, "ma_resource_manager_config.allocationCallbacks has unexpected offset % instead of 0", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.allocationCallbacks)) == 32, "ma_resource_manager_config.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_resource_manager_config.allocationCallbacks)));
        assert(((cast(*void)(*instance.pLog)) - cast(*void)(*instance)) == 32, "ma_resource_manager_config.pLog has unexpected offset % instead of 32", ((cast(*void)(*instance.pLog)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.pLog)) == 8, "ma_resource_manager_config.pLog has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_config.pLog)));
        assert(((cast(*void)(*instance.decodedFormat)) - cast(*void)(*instance)) == 40, "ma_resource_manager_config.decodedFormat has unexpected offset % instead of 40", ((cast(*void)(*instance.decodedFormat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.decodedFormat)) == 4, "ma_resource_manager_config.decodedFormat has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_config.decodedFormat)));
        assert(((cast(*void)(*instance.decodedChannels)) - cast(*void)(*instance)) == 44, "ma_resource_manager_config.decodedChannels has unexpected offset % instead of 44", ((cast(*void)(*instance.decodedChannels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.decodedChannels)) == 4, "ma_resource_manager_config.decodedChannels has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_config.decodedChannels)));
        assert(((cast(*void)(*instance.decodedSampleRate)) - cast(*void)(*instance)) == 48, "ma_resource_manager_config.decodedSampleRate has unexpected offset % instead of 48", ((cast(*void)(*instance.decodedSampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.decodedSampleRate)) == 4, "ma_resource_manager_config.decodedSampleRate has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_config.decodedSampleRate)));
        assert(((cast(*void)(*instance.jobThreadCount)) - cast(*void)(*instance)) == 52, "ma_resource_manager_config.jobThreadCount has unexpected offset % instead of 52", ((cast(*void)(*instance.jobThreadCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.jobThreadCount)) == 4, "ma_resource_manager_config.jobThreadCount has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_config.jobThreadCount)));
        assert(((cast(*void)(*instance.jobThreadStackSize)) - cast(*void)(*instance)) == 56, "ma_resource_manager_config.jobThreadStackSize has unexpected offset % instead of 56", ((cast(*void)(*instance.jobThreadStackSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.jobThreadStackSize)) == 8, "ma_resource_manager_config.jobThreadStackSize has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_config.jobThreadStackSize)));
        assert(((cast(*void)(*instance.jobQueueCapacity)) - cast(*void)(*instance)) == 64, "ma_resource_manager_config.jobQueueCapacity has unexpected offset % instead of 64", ((cast(*void)(*instance.jobQueueCapacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.jobQueueCapacity)) == 4, "ma_resource_manager_config.jobQueueCapacity has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_config.jobQueueCapacity)));
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 68, "ma_resource_manager_config.flags has unexpected offset % instead of 68", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.flags)) == 4, "ma_resource_manager_config.flags has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_config.flags)));
        assert(((cast(*void)(*instance.pVFS)) - cast(*void)(*instance)) == 72, "ma_resource_manager_config.pVFS has unexpected offset % instead of 72", ((cast(*void)(*instance.pVFS)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.pVFS)) == 8, "ma_resource_manager_config.pVFS has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_config.pVFS)));
        assert(((cast(*void)(*instance.ppCustomDecodingBackendVTables)) - cast(*void)(*instance)) == 80, "ma_resource_manager_config.ppCustomDecodingBackendVTables has unexpected offset % instead of 80", ((cast(*void)(*instance.ppCustomDecodingBackendVTables)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.ppCustomDecodingBackendVTables)) == 8, "ma_resource_manager_config.ppCustomDecodingBackendVTables has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_config.ppCustomDecodingBackendVTables)));
        assert(((cast(*void)(*instance.customDecodingBackendCount)) - cast(*void)(*instance)) == 88, "ma_resource_manager_config.customDecodingBackendCount has unexpected offset % instead of 88", ((cast(*void)(*instance.customDecodingBackendCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.customDecodingBackendCount)) == 4, "ma_resource_manager_config.customDecodingBackendCount has unexpected size % instead of 4", size_of(type_of(ma_resource_manager_config.customDecodingBackendCount)));
        assert(((cast(*void)(*instance.pCustomDecodingBackendUserData)) - cast(*void)(*instance)) == 96, "ma_resource_manager_config.pCustomDecodingBackendUserData has unexpected offset % instead of 96", ((cast(*void)(*instance.pCustomDecodingBackendUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_config.pCustomDecodingBackendUserData)) == 8, "ma_resource_manager_config.pCustomDecodingBackendUserData has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_config.pCustomDecodingBackendUserData)));
        assert(size_of(ma_resource_manager_config) == 104, "ma_resource_manager_config has size % instead of 104", size_of(ma_resource_manager_config));
    }

    {
        instance: ma_resource_manager;
        assert(((cast(*void)(*instance.config)) - cast(*void)(*instance)) == 0, "ma_resource_manager.config has unexpected offset % instead of 0", ((cast(*void)(*instance.config)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager.config)) == 104, "ma_resource_manager.config has unexpected size % instead of 104", size_of(type_of(ma_resource_manager.config)));
        assert(((cast(*void)(*instance.pRootDataBufferNode)) - cast(*void)(*instance)) == 104, "ma_resource_manager.pRootDataBufferNode has unexpected offset % instead of 104", ((cast(*void)(*instance.pRootDataBufferNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager.pRootDataBufferNode)) == 8, "ma_resource_manager.pRootDataBufferNode has unexpected size % instead of 8", size_of(type_of(ma_resource_manager.pRootDataBufferNode)));
        assert(((cast(*void)(*instance.dataBufferBSTLock)) - cast(*void)(*instance)) == 112, "ma_resource_manager.dataBufferBSTLock has unexpected offset % instead of 112", ((cast(*void)(*instance.dataBufferBSTLock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager.dataBufferBSTLock)) == 64, "ma_resource_manager.dataBufferBSTLock has unexpected size % instead of 64", size_of(type_of(ma_resource_manager.dataBufferBSTLock)));
        assert(((cast(*void)(*instance.jobThreads)) - cast(*void)(*instance)) == 176, "ma_resource_manager.jobThreads has unexpected offset % instead of 176", ((cast(*void)(*instance.jobThreads)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager.jobThreads)) == 512, "ma_resource_manager.jobThreads has unexpected size % instead of 512", size_of(type_of(ma_resource_manager.jobThreads)));
        assert(((cast(*void)(*instance.jobQueue)) - cast(*void)(*instance)) == 688, "ma_resource_manager.jobQueue has unexpected offset % instead of 688", ((cast(*void)(*instance.jobQueue)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager.jobQueue)) == 216, "ma_resource_manager.jobQueue has unexpected size % instead of 216", size_of(type_of(ma_resource_manager.jobQueue)));
        assert(((cast(*void)(*instance.defaultVFS)) - cast(*void)(*instance)) == 904, "ma_resource_manager.defaultVFS has unexpected offset % instead of 904", ((cast(*void)(*instance.defaultVFS)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager.defaultVFS)) == 96, "ma_resource_manager.defaultVFS has unexpected size % instead of 96", size_of(type_of(ma_resource_manager.defaultVFS)));
        assert(((cast(*void)(*instance.log)) - cast(*void)(*instance)) == 1000, "ma_resource_manager.log has unexpected offset % instead of 1000", ((cast(*void)(*instance.log)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager.log)) == 168, "ma_resource_manager.log has unexpected size % instead of 168", size_of(type_of(ma_resource_manager.log)));
        assert(size_of(ma_resource_manager) == 1168, "ma_resource_manager has size % instead of 1168", size_of(ma_resource_manager));
    }

    {
        instance: ma_node_vtable;
        assert(((cast(*void)(*instance.onProcess)) - cast(*void)(*instance)) == 0, "ma_node_vtable.onProcess has unexpected offset % instead of 0", ((cast(*void)(*instance.onProcess)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_vtable.onProcess)) == 8, "ma_node_vtable.onProcess has unexpected size % instead of 8", size_of(type_of(ma_node_vtable.onProcess)));
        assert(((cast(*void)(*instance.onGetRequiredInputFrameCount)) - cast(*void)(*instance)) == 8, "ma_node_vtable.onGetRequiredInputFrameCount has unexpected offset % instead of 8", ((cast(*void)(*instance.onGetRequiredInputFrameCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_vtable.onGetRequiredInputFrameCount)) == 8, "ma_node_vtable.onGetRequiredInputFrameCount has unexpected size % instead of 8", size_of(type_of(ma_node_vtable.onGetRequiredInputFrameCount)));
        assert(((cast(*void)(*instance.inputBusCount)) - cast(*void)(*instance)) == 16, "ma_node_vtable.inputBusCount has unexpected offset % instead of 16", ((cast(*void)(*instance.inputBusCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_vtable.inputBusCount)) == 1, "ma_node_vtable.inputBusCount has unexpected size % instead of 1", size_of(type_of(ma_node_vtable.inputBusCount)));
        assert(((cast(*void)(*instance.outputBusCount)) - cast(*void)(*instance)) == 17, "ma_node_vtable.outputBusCount has unexpected offset % instead of 17", ((cast(*void)(*instance.outputBusCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_vtable.outputBusCount)) == 1, "ma_node_vtable.outputBusCount has unexpected size % instead of 1", size_of(type_of(ma_node_vtable.outputBusCount)));
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 20, "ma_node_vtable.flags has unexpected offset % instead of 20", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_vtable.flags)) == 4, "ma_node_vtable.flags has unexpected size % instead of 4", size_of(type_of(ma_node_vtable.flags)));
        assert(size_of(ma_node_vtable) == 24, "ma_node_vtable has size % instead of 24", size_of(ma_node_vtable));
    }

    {
        instance: ma_node_config;
        assert(((cast(*void)(*instance.vtable)) - cast(*void)(*instance)) == 0, "ma_node_config.vtable has unexpected offset % instead of 0", ((cast(*void)(*instance.vtable)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_config.vtable)) == 8, "ma_node_config.vtable has unexpected size % instead of 8", size_of(type_of(ma_node_config.vtable)));
        assert(((cast(*void)(*instance.initialState)) - cast(*void)(*instance)) == 8, "ma_node_config.initialState has unexpected offset % instead of 8", ((cast(*void)(*instance.initialState)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_config.initialState)) == 4, "ma_node_config.initialState has unexpected size % instead of 4", size_of(type_of(ma_node_config.initialState)));
        assert(((cast(*void)(*instance.inputBusCount)) - cast(*void)(*instance)) == 12, "ma_node_config.inputBusCount has unexpected offset % instead of 12", ((cast(*void)(*instance.inputBusCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_config.inputBusCount)) == 4, "ma_node_config.inputBusCount has unexpected size % instead of 4", size_of(type_of(ma_node_config.inputBusCount)));
        assert(((cast(*void)(*instance.outputBusCount)) - cast(*void)(*instance)) == 16, "ma_node_config.outputBusCount has unexpected offset % instead of 16", ((cast(*void)(*instance.outputBusCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_config.outputBusCount)) == 4, "ma_node_config.outputBusCount has unexpected size % instead of 4", size_of(type_of(ma_node_config.outputBusCount)));
        assert(((cast(*void)(*instance.pInputChannels)) - cast(*void)(*instance)) == 24, "ma_node_config.pInputChannels has unexpected offset % instead of 24", ((cast(*void)(*instance.pInputChannels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_config.pInputChannels)) == 8, "ma_node_config.pInputChannels has unexpected size % instead of 8", size_of(type_of(ma_node_config.pInputChannels)));
        assert(((cast(*void)(*instance.pOutputChannels)) - cast(*void)(*instance)) == 32, "ma_node_config.pOutputChannels has unexpected offset % instead of 32", ((cast(*void)(*instance.pOutputChannels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_config.pOutputChannels)) == 8, "ma_node_config.pOutputChannels has unexpected size % instead of 8", size_of(type_of(ma_node_config.pOutputChannels)));
        assert(size_of(ma_node_config) == 40, "ma_node_config has size % instead of 40", size_of(ma_node_config));
    }

    {
        instance: ma_node_output_bus;
        assert(((cast(*void)(*instance.pNode)) - cast(*void)(*instance)) == 0, "ma_node_output_bus.pNode has unexpected offset % instead of 0", ((cast(*void)(*instance.pNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.pNode)) == 8, "ma_node_output_bus.pNode has unexpected size % instead of 8", size_of(type_of(ma_node_output_bus.pNode)));
        assert(((cast(*void)(*instance.outputBusIndex)) - cast(*void)(*instance)) == 8, "ma_node_output_bus.outputBusIndex has unexpected offset % instead of 8", ((cast(*void)(*instance.outputBusIndex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.outputBusIndex)) == 1, "ma_node_output_bus.outputBusIndex has unexpected size % instead of 1", size_of(type_of(ma_node_output_bus.outputBusIndex)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 9, "ma_node_output_bus.channels has unexpected offset % instead of 9", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.channels)) == 1, "ma_node_output_bus.channels has unexpected size % instead of 1", size_of(type_of(ma_node_output_bus.channels)));
        assert(((cast(*void)(*instance.inputNodeInputBusIndex)) - cast(*void)(*instance)) == 10, "ma_node_output_bus.inputNodeInputBusIndex has unexpected offset % instead of 10", ((cast(*void)(*instance.inputNodeInputBusIndex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.inputNodeInputBusIndex)) == 1, "ma_node_output_bus.inputNodeInputBusIndex has unexpected size % instead of 1", size_of(type_of(ma_node_output_bus.inputNodeInputBusIndex)));
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 12, "ma_node_output_bus.flags has unexpected offset % instead of 12", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.flags)) == 4, "ma_node_output_bus.flags has unexpected size % instead of 4", size_of(type_of(ma_node_output_bus.flags)));
        assert(((cast(*void)(*instance.refCount)) - cast(*void)(*instance)) == 16, "ma_node_output_bus.refCount has unexpected offset % instead of 16", ((cast(*void)(*instance.refCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.refCount)) == 4, "ma_node_output_bus.refCount has unexpected size % instead of 4", size_of(type_of(ma_node_output_bus.refCount)));
        assert(((cast(*void)(*instance.isAttached)) - cast(*void)(*instance)) == 20, "ma_node_output_bus.isAttached has unexpected offset % instead of 20", ((cast(*void)(*instance.isAttached)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.isAttached)) == 4, "ma_node_output_bus.isAttached has unexpected size % instead of 4", size_of(type_of(ma_node_output_bus.isAttached)));
        assert(((cast(*void)(*instance.lock)) - cast(*void)(*instance)) == 24, "ma_node_output_bus.lock has unexpected offset % instead of 24", ((cast(*void)(*instance.lock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.lock)) == 4, "ma_node_output_bus.lock has unexpected size % instead of 4", size_of(type_of(ma_node_output_bus.lock)));
        assert(((cast(*void)(*instance.volume)) - cast(*void)(*instance)) == 28, "ma_node_output_bus.volume has unexpected offset % instead of 28", ((cast(*void)(*instance.volume)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.volume)) == 4, "ma_node_output_bus.volume has unexpected size % instead of 4", size_of(type_of(ma_node_output_bus.volume)));
        assert(((cast(*void)(*instance.pNext)) - cast(*void)(*instance)) == 32, "ma_node_output_bus.pNext has unexpected offset % instead of 32", ((cast(*void)(*instance.pNext)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.pNext)) == 8, "ma_node_output_bus.pNext has unexpected size % instead of 8", size_of(type_of(ma_node_output_bus.pNext)));
        assert(((cast(*void)(*instance.pPrev)) - cast(*void)(*instance)) == 40, "ma_node_output_bus.pPrev has unexpected offset % instead of 40", ((cast(*void)(*instance.pPrev)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.pPrev)) == 8, "ma_node_output_bus.pPrev has unexpected size % instead of 8", size_of(type_of(ma_node_output_bus.pPrev)));
        assert(((cast(*void)(*instance.pInputNode)) - cast(*void)(*instance)) == 48, "ma_node_output_bus.pInputNode has unexpected offset % instead of 48", ((cast(*void)(*instance.pInputNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_output_bus.pInputNode)) == 8, "ma_node_output_bus.pInputNode has unexpected size % instead of 8", size_of(type_of(ma_node_output_bus.pInputNode)));
        assert(size_of(ma_node_output_bus) == 56, "ma_node_output_bus has size % instead of 56", size_of(ma_node_output_bus));
    }

    {
        instance: ma_node_input_bus;
        assert(((cast(*void)(*instance.head)) - cast(*void)(*instance)) == 0, "ma_node_input_bus.head has unexpected offset % instead of 0", ((cast(*void)(*instance.head)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_input_bus.head)) == 56, "ma_node_input_bus.head has unexpected size % instead of 56", size_of(type_of(ma_node_input_bus.head)));
        assert(((cast(*void)(*instance.nextCounter)) - cast(*void)(*instance)) == 56, "ma_node_input_bus.nextCounter has unexpected offset % instead of 56", ((cast(*void)(*instance.nextCounter)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_input_bus.nextCounter)) == 4, "ma_node_input_bus.nextCounter has unexpected size % instead of 4", size_of(type_of(ma_node_input_bus.nextCounter)));
        assert(((cast(*void)(*instance.lock)) - cast(*void)(*instance)) == 60, "ma_node_input_bus.lock has unexpected offset % instead of 60", ((cast(*void)(*instance.lock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_input_bus.lock)) == 4, "ma_node_input_bus.lock has unexpected size % instead of 4", size_of(type_of(ma_node_input_bus.lock)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 64, "ma_node_input_bus.channels has unexpected offset % instead of 64", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_input_bus.channels)) == 1, "ma_node_input_bus.channels has unexpected size % instead of 1", size_of(type_of(ma_node_input_bus.channels)));
        assert(size_of(ma_node_input_bus) == 72, "ma_node_input_bus has size % instead of 72", size_of(ma_node_input_bus));
    }

    {
        instance: ma_node_base;
        assert(((cast(*void)(*instance.pNodeGraph)) - cast(*void)(*instance)) == 0, "ma_node_base.pNodeGraph has unexpected offset % instead of 0", ((cast(*void)(*instance.pNodeGraph)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.pNodeGraph)) == 8, "ma_node_base.pNodeGraph has unexpected size % instead of 8", size_of(type_of(ma_node_base.pNodeGraph)));
        assert(((cast(*void)(*instance.vtable)) - cast(*void)(*instance)) == 8, "ma_node_base.vtable has unexpected offset % instead of 8", ((cast(*void)(*instance.vtable)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.vtable)) == 8, "ma_node_base.vtable has unexpected size % instead of 8", size_of(type_of(ma_node_base.vtable)));
        assert(((cast(*void)(*instance.pCachedData)) - cast(*void)(*instance)) == 16, "ma_node_base.pCachedData has unexpected offset % instead of 16", ((cast(*void)(*instance.pCachedData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.pCachedData)) == 8, "ma_node_base.pCachedData has unexpected size % instead of 8", size_of(type_of(ma_node_base.pCachedData)));
        assert(((cast(*void)(*instance.cachedDataCapInFramesPerBus)) - cast(*void)(*instance)) == 24, "ma_node_base.cachedDataCapInFramesPerBus has unexpected offset % instead of 24", ((cast(*void)(*instance.cachedDataCapInFramesPerBus)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.cachedDataCapInFramesPerBus)) == 2, "ma_node_base.cachedDataCapInFramesPerBus has unexpected size % instead of 2", size_of(type_of(ma_node_base.cachedDataCapInFramesPerBus)));
        assert(((cast(*void)(*instance.cachedFrameCountOut)) - cast(*void)(*instance)) == 26, "ma_node_base.cachedFrameCountOut has unexpected offset % instead of 26", ((cast(*void)(*instance.cachedFrameCountOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.cachedFrameCountOut)) == 2, "ma_node_base.cachedFrameCountOut has unexpected size % instead of 2", size_of(type_of(ma_node_base.cachedFrameCountOut)));
        assert(((cast(*void)(*instance.cachedFrameCountIn)) - cast(*void)(*instance)) == 28, "ma_node_base.cachedFrameCountIn has unexpected offset % instead of 28", ((cast(*void)(*instance.cachedFrameCountIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.cachedFrameCountIn)) == 2, "ma_node_base.cachedFrameCountIn has unexpected size % instead of 2", size_of(type_of(ma_node_base.cachedFrameCountIn)));
        assert(((cast(*void)(*instance.consumedFrameCountIn)) - cast(*void)(*instance)) == 30, "ma_node_base.consumedFrameCountIn has unexpected offset % instead of 30", ((cast(*void)(*instance.consumedFrameCountIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.consumedFrameCountIn)) == 2, "ma_node_base.consumedFrameCountIn has unexpected size % instead of 2", size_of(type_of(ma_node_base.consumedFrameCountIn)));
        assert(((cast(*void)(*instance.state)) - cast(*void)(*instance)) == 32, "ma_node_base.state has unexpected offset % instead of 32", ((cast(*void)(*instance.state)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.state)) == 4, "ma_node_base.state has unexpected size % instead of 4", size_of(type_of(ma_node_base.state)));
        assert(((cast(*void)(*instance.stateTimes)) - cast(*void)(*instance)) == 40, "ma_node_base.stateTimes has unexpected offset % instead of 40", ((cast(*void)(*instance.stateTimes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.stateTimes)) == 16, "ma_node_base.stateTimes has unexpected size % instead of 16", size_of(type_of(ma_node_base.stateTimes)));
        assert(((cast(*void)(*instance.localTime)) - cast(*void)(*instance)) == 56, "ma_node_base.localTime has unexpected offset % instead of 56", ((cast(*void)(*instance.localTime)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.localTime)) == 8, "ma_node_base.localTime has unexpected size % instead of 8", size_of(type_of(ma_node_base.localTime)));
        assert(((cast(*void)(*instance.inputBusCount)) - cast(*void)(*instance)) == 64, "ma_node_base.inputBusCount has unexpected offset % instead of 64", ((cast(*void)(*instance.inputBusCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.inputBusCount)) == 4, "ma_node_base.inputBusCount has unexpected size % instead of 4", size_of(type_of(ma_node_base.inputBusCount)));
        assert(((cast(*void)(*instance.outputBusCount)) - cast(*void)(*instance)) == 68, "ma_node_base.outputBusCount has unexpected offset % instead of 68", ((cast(*void)(*instance.outputBusCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.outputBusCount)) == 4, "ma_node_base.outputBusCount has unexpected size % instead of 4", size_of(type_of(ma_node_base.outputBusCount)));
        assert(((cast(*void)(*instance.pInputBuses)) - cast(*void)(*instance)) == 72, "ma_node_base.pInputBuses has unexpected offset % instead of 72", ((cast(*void)(*instance.pInputBuses)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.pInputBuses)) == 8, "ma_node_base.pInputBuses has unexpected size % instead of 8", size_of(type_of(ma_node_base.pInputBuses)));
        assert(((cast(*void)(*instance.pOutputBuses)) - cast(*void)(*instance)) == 80, "ma_node_base.pOutputBuses has unexpected offset % instead of 80", ((cast(*void)(*instance.pOutputBuses)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base.pOutputBuses)) == 8, "ma_node_base.pOutputBuses has unexpected size % instead of 8", size_of(type_of(ma_node_base.pOutputBuses)));
        assert(((cast(*void)(*instance._inputBuses)) - cast(*void)(*instance)) == 88, "ma_node_base._inputBuses has unexpected offset % instead of 88", ((cast(*void)(*instance._inputBuses)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base._inputBuses)) == 144, "ma_node_base._inputBuses has unexpected size % instead of 144", size_of(type_of(ma_node_base._inputBuses)));
        assert(((cast(*void)(*instance._outputBuses)) - cast(*void)(*instance)) == 232, "ma_node_base._outputBuses has unexpected offset % instead of 232", ((cast(*void)(*instance._outputBuses)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base._outputBuses)) == 112, "ma_node_base._outputBuses has unexpected size % instead of 112", size_of(type_of(ma_node_base._outputBuses)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 344, "ma_node_base._pHeap has unexpected offset % instead of 344", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base._pHeap)) == 8, "ma_node_base._pHeap has unexpected size % instead of 8", size_of(type_of(ma_node_base._pHeap)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 352, "ma_node_base._ownsHeap has unexpected offset % instead of 352", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_base._ownsHeap)) == 4, "ma_node_base._ownsHeap has unexpected size % instead of 4", size_of(type_of(ma_node_base._ownsHeap)));
        assert(size_of(ma_node_base) == 360, "ma_node_base has size % instead of 360", size_of(ma_node_base));
    }

    {
        instance: ma_node_graph_config;
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 0, "ma_node_graph_config.channels has unexpected offset % instead of 0", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_graph_config.channels)) == 4, "ma_node_graph_config.channels has unexpected size % instead of 4", size_of(type_of(ma_node_graph_config.channels)));
        assert(((cast(*void)(*instance.nodeCacheCapInFrames)) - cast(*void)(*instance)) == 4, "ma_node_graph_config.nodeCacheCapInFrames has unexpected offset % instead of 4", ((cast(*void)(*instance.nodeCacheCapInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_graph_config.nodeCacheCapInFrames)) == 2, "ma_node_graph_config.nodeCacheCapInFrames has unexpected size % instead of 2", size_of(type_of(ma_node_graph_config.nodeCacheCapInFrames)));
        assert(size_of(ma_node_graph_config) == 8, "ma_node_graph_config has size % instead of 8", size_of(ma_node_graph_config));
    }

    {
        instance: ma_node_graph;
        assert(((cast(*void)(*instance.base)) - cast(*void)(*instance)) == 0, "ma_node_graph.base has unexpected offset % instead of 0", ((cast(*void)(*instance.base)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_graph.base)) == 360, "ma_node_graph.base has unexpected size % instead of 360", size_of(type_of(ma_node_graph.base)));
        assert(((cast(*void)(*instance.endpoint)) - cast(*void)(*instance)) == 360, "ma_node_graph.endpoint has unexpected offset % instead of 360", ((cast(*void)(*instance.endpoint)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_graph.endpoint)) == 360, "ma_node_graph.endpoint has unexpected size % instead of 360", size_of(type_of(ma_node_graph.endpoint)));
        assert(((cast(*void)(*instance.nodeCacheCapInFrames)) - cast(*void)(*instance)) == 720, "ma_node_graph.nodeCacheCapInFrames has unexpected offset % instead of 720", ((cast(*void)(*instance.nodeCacheCapInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_graph.nodeCacheCapInFrames)) == 2, "ma_node_graph.nodeCacheCapInFrames has unexpected size % instead of 2", size_of(type_of(ma_node_graph.nodeCacheCapInFrames)));
        assert(((cast(*void)(*instance.isReading)) - cast(*void)(*instance)) == 724, "ma_node_graph.isReading has unexpected offset % instead of 724", ((cast(*void)(*instance.isReading)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_graph.isReading)) == 4, "ma_node_graph.isReading has unexpected size % instead of 4", size_of(type_of(ma_node_graph.isReading)));
        assert(size_of(ma_node_graph) == 728, "ma_node_graph has size % instead of 728", size_of(ma_node_graph));
    }

    {
        instance: ma_data_source_node_config;
        assert(((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)) == 0, "ma_data_source_node_config.nodeConfig has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_node_config.nodeConfig)) == 40, "ma_data_source_node_config.nodeConfig has unexpected size % instead of 40", size_of(type_of(ma_data_source_node_config.nodeConfig)));
        assert(((cast(*void)(*instance.pDataSource)) - cast(*void)(*instance)) == 40, "ma_data_source_node_config.pDataSource has unexpected offset % instead of 40", ((cast(*void)(*instance.pDataSource)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_node_config.pDataSource)) == 8, "ma_data_source_node_config.pDataSource has unexpected size % instead of 8", size_of(type_of(ma_data_source_node_config.pDataSource)));
        assert(size_of(ma_data_source_node_config) == 48, "ma_data_source_node_config has size % instead of 48", size_of(ma_data_source_node_config));
    }

    {
        instance: ma_data_source_node;
        assert(((cast(*void)(*instance.base)) - cast(*void)(*instance)) == 0, "ma_data_source_node.base has unexpected offset % instead of 0", ((cast(*void)(*instance.base)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_node.base)) == 360, "ma_data_source_node.base has unexpected size % instead of 360", size_of(type_of(ma_data_source_node.base)));
        assert(((cast(*void)(*instance.pDataSource)) - cast(*void)(*instance)) == 360, "ma_data_source_node.pDataSource has unexpected offset % instead of 360", ((cast(*void)(*instance.pDataSource)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_source_node.pDataSource)) == 8, "ma_data_source_node.pDataSource has unexpected size % instead of 8", size_of(type_of(ma_data_source_node.pDataSource)));
        assert(size_of(ma_data_source_node) == 368, "ma_data_source_node has size % instead of 368", size_of(ma_data_source_node));
    }

    {
        instance: ma_splitter_node_config;
        assert(((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)) == 0, "ma_splitter_node_config.nodeConfig has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_splitter_node_config.nodeConfig)) == 40, "ma_splitter_node_config.nodeConfig has unexpected size % instead of 40", size_of(type_of(ma_splitter_node_config.nodeConfig)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 40, "ma_splitter_node_config.channels has unexpected offset % instead of 40", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_splitter_node_config.channels)) == 4, "ma_splitter_node_config.channels has unexpected size % instead of 4", size_of(type_of(ma_splitter_node_config.channels)));
        assert(((cast(*void)(*instance.outputBusCount)) - cast(*void)(*instance)) == 44, "ma_splitter_node_config.outputBusCount has unexpected offset % instead of 44", ((cast(*void)(*instance.outputBusCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_splitter_node_config.outputBusCount)) == 4, "ma_splitter_node_config.outputBusCount has unexpected size % instead of 4", size_of(type_of(ma_splitter_node_config.outputBusCount)));
        assert(size_of(ma_splitter_node_config) == 48, "ma_splitter_node_config has size % instead of 48", size_of(ma_splitter_node_config));
    }

    {
        instance: ma_splitter_node;
        assert(((cast(*void)(*instance.base)) - cast(*void)(*instance)) == 0, "ma_splitter_node.base has unexpected offset % instead of 0", ((cast(*void)(*instance.base)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_splitter_node.base)) == 360, "ma_splitter_node.base has unexpected size % instead of 360", size_of(type_of(ma_splitter_node.base)));
        assert(size_of(ma_splitter_node) == 360, "ma_splitter_node has size % instead of 360", size_of(ma_splitter_node));
    }

    {
        instance: ma_biquad_node_config;
        assert(((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)) == 0, "ma_biquad_node_config.nodeConfig has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_node_config.nodeConfig)) == 40, "ma_biquad_node_config.nodeConfig has unexpected size % instead of 40", size_of(type_of(ma_biquad_node_config.nodeConfig)));
        assert(((cast(*void)(*instance.biquad)) - cast(*void)(*instance)) == 40, "ma_biquad_node_config.biquad has unexpected offset % instead of 40", ((cast(*void)(*instance.biquad)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_node_config.biquad)) == 56, "ma_biquad_node_config.biquad has unexpected size % instead of 56", size_of(type_of(ma_biquad_node_config.biquad)));
        assert(size_of(ma_biquad_node_config) == 96, "ma_biquad_node_config has size % instead of 96", size_of(ma_biquad_node_config));
    }

    {
        instance: ma_biquad_node;
        assert(((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)) == 0, "ma_biquad_node.baseNode has unexpected offset % instead of 0", ((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_node.baseNode)) == 360, "ma_biquad_node.baseNode has unexpected size % instead of 360", size_of(type_of(ma_biquad_node.baseNode)));
        assert(((cast(*void)(*instance.biquad)) - cast(*void)(*instance)) == 360, "ma_biquad_node.biquad has unexpected offset % instead of 360", ((cast(*void)(*instance.biquad)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_node.biquad)) == 64, "ma_biquad_node.biquad has unexpected size % instead of 64", size_of(type_of(ma_biquad_node.biquad)));
        assert(size_of(ma_biquad_node) == 424, "ma_biquad_node has size % instead of 424", size_of(ma_biquad_node));
    }

    {
        instance: ma_lpf_node_config;
        assert(((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)) == 0, "ma_lpf_node_config.nodeConfig has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_node_config.nodeConfig)) == 40, "ma_lpf_node_config.nodeConfig has unexpected size % instead of 40", size_of(type_of(ma_lpf_node_config.nodeConfig)));
        assert(((cast(*void)(*instance.lpf)) - cast(*void)(*instance)) == 40, "ma_lpf_node_config.lpf has unexpected offset % instead of 40", ((cast(*void)(*instance.lpf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_node_config.lpf)) == 32, "ma_lpf_node_config.lpf has unexpected size % instead of 32", size_of(type_of(ma_lpf_node_config.lpf)));
        assert(size_of(ma_lpf_node_config) == 72, "ma_lpf_node_config has size % instead of 72", size_of(ma_lpf_node_config));
    }

    {
        instance: ma_lpf_node;
        assert(((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)) == 0, "ma_lpf_node.baseNode has unexpected offset % instead of 0", ((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_node.baseNode)) == 360, "ma_lpf_node.baseNode has unexpected size % instead of 360", size_of(type_of(ma_lpf_node.baseNode)));
        assert(((cast(*void)(*instance.lpf)) - cast(*void)(*instance)) == 360, "ma_lpf_node.lpf has unexpected offset % instead of 360", ((cast(*void)(*instance.lpf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_node.lpf)) == 56, "ma_lpf_node.lpf has unexpected size % instead of 56", size_of(type_of(ma_lpf_node.lpf)));
        assert(size_of(ma_lpf_node) == 416, "ma_lpf_node has size % instead of 416", size_of(ma_lpf_node));
    }

    {
        instance: ma_hpf_node_config;
        assert(((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)) == 0, "ma_hpf_node_config.nodeConfig has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_node_config.nodeConfig)) == 40, "ma_hpf_node_config.nodeConfig has unexpected size % instead of 40", size_of(type_of(ma_hpf_node_config.nodeConfig)));
        assert(((cast(*void)(*instance.hpf)) - cast(*void)(*instance)) == 40, "ma_hpf_node_config.hpf has unexpected offset % instead of 40", ((cast(*void)(*instance.hpf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_node_config.hpf)) == 32, "ma_hpf_node_config.hpf has unexpected size % instead of 32", size_of(type_of(ma_hpf_node_config.hpf)));
        assert(size_of(ma_hpf_node_config) == 72, "ma_hpf_node_config has size % instead of 72", size_of(ma_hpf_node_config));
    }

    {
        instance: ma_hpf_node;
        assert(((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)) == 0, "ma_hpf_node.baseNode has unexpected offset % instead of 0", ((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_node.baseNode)) == 360, "ma_hpf_node.baseNode has unexpected size % instead of 360", size_of(type_of(ma_hpf_node.baseNode)));
        assert(((cast(*void)(*instance.hpf)) - cast(*void)(*instance)) == 360, "ma_hpf_node.hpf has unexpected offset % instead of 360", ((cast(*void)(*instance.hpf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_node.hpf)) == 56, "ma_hpf_node.hpf has unexpected size % instead of 56", size_of(type_of(ma_hpf_node.hpf)));
        assert(size_of(ma_hpf_node) == 416, "ma_hpf_node has size % instead of 416", size_of(ma_hpf_node));
    }

    {
        instance: ma_bpf_node_config;
        assert(((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)) == 0, "ma_bpf_node_config.nodeConfig has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf_node_config.nodeConfig)) == 40, "ma_bpf_node_config.nodeConfig has unexpected size % instead of 40", size_of(type_of(ma_bpf_node_config.nodeConfig)));
        assert(((cast(*void)(*instance.bpf)) - cast(*void)(*instance)) == 40, "ma_bpf_node_config.bpf has unexpected offset % instead of 40", ((cast(*void)(*instance.bpf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf_node_config.bpf)) == 32, "ma_bpf_node_config.bpf has unexpected size % instead of 32", size_of(type_of(ma_bpf_node_config.bpf)));
        assert(size_of(ma_bpf_node_config) == 72, "ma_bpf_node_config has size % instead of 72", size_of(ma_bpf_node_config));
    }

    {
        instance: ma_bpf_node;
        assert(((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)) == 0, "ma_bpf_node.baseNode has unexpected offset % instead of 0", ((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf_node.baseNode)) == 360, "ma_bpf_node.baseNode has unexpected size % instead of 360", size_of(type_of(ma_bpf_node.baseNode)));
        assert(((cast(*void)(*instance.bpf)) - cast(*void)(*instance)) == 360, "ma_bpf_node.bpf has unexpected offset % instead of 360", ((cast(*void)(*instance.bpf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf_node.bpf)) == 40, "ma_bpf_node.bpf has unexpected size % instead of 40", size_of(type_of(ma_bpf_node.bpf)));
        assert(size_of(ma_bpf_node) == 400, "ma_bpf_node has size % instead of 400", size_of(ma_bpf_node));
    }

    {
        instance: ma_notch_node_config;
        assert(((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)) == 0, "ma_notch_node_config.nodeConfig has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_notch_node_config.nodeConfig)) == 40, "ma_notch_node_config.nodeConfig has unexpected size % instead of 40", size_of(type_of(ma_notch_node_config.nodeConfig)));
        assert(((cast(*void)(*instance.notch)) - cast(*void)(*instance)) == 40, "ma_notch_node_config.notch has unexpected offset % instead of 40", ((cast(*void)(*instance.notch)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_notch_node_config.notch)) == 32, "ma_notch_node_config.notch has unexpected size % instead of 32", size_of(type_of(ma_notch_node_config.notch)));
        assert(size_of(ma_notch_node_config) == 72, "ma_notch_node_config has size % instead of 72", size_of(ma_notch_node_config));
    }

    {
        instance: ma_notch_node;
        assert(((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)) == 0, "ma_notch_node.baseNode has unexpected offset % instead of 0", ((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_notch_node.baseNode)) == 360, "ma_notch_node.baseNode has unexpected size % instead of 360", size_of(type_of(ma_notch_node.baseNode)));
        assert(((cast(*void)(*instance.notch)) - cast(*void)(*instance)) == 360, "ma_notch_node.notch has unexpected offset % instead of 360", ((cast(*void)(*instance.notch)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_notch_node.notch)) == 64, "ma_notch_node.notch has unexpected size % instead of 64", size_of(type_of(ma_notch_node.notch)));
        assert(size_of(ma_notch_node) == 424, "ma_notch_node has size % instead of 424", size_of(ma_notch_node));
    }

    {
        instance: ma_peak_node_config;
        assert(((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)) == 0, "ma_peak_node_config.nodeConfig has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_peak_node_config.nodeConfig)) == 40, "ma_peak_node_config.nodeConfig has unexpected size % instead of 40", size_of(type_of(ma_peak_node_config.nodeConfig)));
        assert(((cast(*void)(*instance.peak)) - cast(*void)(*instance)) == 40, "ma_peak_node_config.peak has unexpected offset % instead of 40", ((cast(*void)(*instance.peak)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_peak_node_config.peak)) == 40, "ma_peak_node_config.peak has unexpected size % instead of 40", size_of(type_of(ma_peak_node_config.peak)));
        assert(size_of(ma_peak_node_config) == 80, "ma_peak_node_config has size % instead of 80", size_of(ma_peak_node_config));
    }

    {
        instance: ma_peak_node;
        assert(((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)) == 0, "ma_peak_node.baseNode has unexpected offset % instead of 0", ((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_peak_node.baseNode)) == 360, "ma_peak_node.baseNode has unexpected size % instead of 360", size_of(type_of(ma_peak_node.baseNode)));
        assert(((cast(*void)(*instance.peak)) - cast(*void)(*instance)) == 360, "ma_peak_node.peak has unexpected offset % instead of 360", ((cast(*void)(*instance.peak)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_peak_node.peak)) == 64, "ma_peak_node.peak has unexpected size % instead of 64", size_of(type_of(ma_peak_node.peak)));
        assert(size_of(ma_peak_node) == 424, "ma_peak_node has size % instead of 424", size_of(ma_peak_node));
    }

    {
        instance: ma_loshelf_node_config;
        assert(((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)) == 0, "ma_loshelf_node_config.nodeConfig has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_loshelf_node_config.nodeConfig)) == 40, "ma_loshelf_node_config.nodeConfig has unexpected size % instead of 40", size_of(type_of(ma_loshelf_node_config.nodeConfig)));
        assert(((cast(*void)(*instance.loshelf)) - cast(*void)(*instance)) == 40, "ma_loshelf_node_config.loshelf has unexpected offset % instead of 40", ((cast(*void)(*instance.loshelf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_loshelf_node_config.loshelf)) == 40, "ma_loshelf_node_config.loshelf has unexpected size % instead of 40", size_of(type_of(ma_loshelf_node_config.loshelf)));
        assert(size_of(ma_loshelf_node_config) == 80, "ma_loshelf_node_config has size % instead of 80", size_of(ma_loshelf_node_config));
    }

    {
        instance: ma_loshelf_node;
        assert(((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)) == 0, "ma_loshelf_node.baseNode has unexpected offset % instead of 0", ((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_loshelf_node.baseNode)) == 360, "ma_loshelf_node.baseNode has unexpected size % instead of 360", size_of(type_of(ma_loshelf_node.baseNode)));
        assert(((cast(*void)(*instance.loshelf)) - cast(*void)(*instance)) == 360, "ma_loshelf_node.loshelf has unexpected offset % instead of 360", ((cast(*void)(*instance.loshelf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_loshelf_node.loshelf)) == 64, "ma_loshelf_node.loshelf has unexpected size % instead of 64", size_of(type_of(ma_loshelf_node.loshelf)));
        assert(size_of(ma_loshelf_node) == 424, "ma_loshelf_node has size % instead of 424", size_of(ma_loshelf_node));
    }

    {
        instance: ma_hishelf_node_config;
        assert(((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)) == 0, "ma_hishelf_node_config.nodeConfig has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hishelf_node_config.nodeConfig)) == 40, "ma_hishelf_node_config.nodeConfig has unexpected size % instead of 40", size_of(type_of(ma_hishelf_node_config.nodeConfig)));
        assert(((cast(*void)(*instance.hishelf)) - cast(*void)(*instance)) == 40, "ma_hishelf_node_config.hishelf has unexpected offset % instead of 40", ((cast(*void)(*instance.hishelf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hishelf_node_config.hishelf)) == 40, "ma_hishelf_node_config.hishelf has unexpected size % instead of 40", size_of(type_of(ma_hishelf_node_config.hishelf)));
        assert(size_of(ma_hishelf_node_config) == 80, "ma_hishelf_node_config has size % instead of 80", size_of(ma_hishelf_node_config));
    }

    {
        instance: ma_hishelf_node;
        assert(((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)) == 0, "ma_hishelf_node.baseNode has unexpected offset % instead of 0", ((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hishelf_node.baseNode)) == 360, "ma_hishelf_node.baseNode has unexpected size % instead of 360", size_of(type_of(ma_hishelf_node.baseNode)));
        assert(((cast(*void)(*instance.hishelf)) - cast(*void)(*instance)) == 360, "ma_hishelf_node.hishelf has unexpected offset % instead of 360", ((cast(*void)(*instance.hishelf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hishelf_node.hishelf)) == 64, "ma_hishelf_node.hishelf has unexpected size % instead of 64", size_of(type_of(ma_hishelf_node.hishelf)));
        assert(size_of(ma_hishelf_node) == 424, "ma_hishelf_node has size % instead of 424", size_of(ma_hishelf_node));
    }

    {
        instance: ma_delay_node_config;
        assert(((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)) == 0, "ma_delay_node_config.nodeConfig has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeConfig)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay_node_config.nodeConfig)) == 40, "ma_delay_node_config.nodeConfig has unexpected size % instead of 40", size_of(type_of(ma_delay_node_config.nodeConfig)));
        assert(((cast(*void)(*instance.delay)) - cast(*void)(*instance)) == 40, "ma_delay_node_config.delay has unexpected offset % instead of 40", ((cast(*void)(*instance.delay)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay_node_config.delay)) == 28, "ma_delay_node_config.delay has unexpected size % instead of 28", size_of(type_of(ma_delay_node_config.delay)));
        assert(size_of(ma_delay_node_config) == 72, "ma_delay_node_config has size % instead of 72", size_of(ma_delay_node_config));
    }

    {
        instance: ma_delay_node;
        assert(((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)) == 0, "ma_delay_node.baseNode has unexpected offset % instead of 0", ((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay_node.baseNode)) == 360, "ma_delay_node.baseNode has unexpected size % instead of 360", size_of(type_of(ma_delay_node.baseNode)));
        assert(((cast(*void)(*instance.delay)) - cast(*void)(*instance)) == 360, "ma_delay_node.delay has unexpected offset % instead of 360", ((cast(*void)(*instance.delay)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_delay_node.delay)) == 48, "ma_delay_node.delay has unexpected size % instead of 48", size_of(type_of(ma_delay_node.delay)));
        assert(size_of(ma_delay_node) == 408, "ma_delay_node has size % instead of 408", size_of(ma_delay_node));
    }

    {
        instance: ma_engine_node_config;
        assert(((cast(*void)(*instance.pEngine)) - cast(*void)(*instance)) == 0, "ma_engine_node_config.pEngine has unexpected offset % instead of 0", ((cast(*void)(*instance.pEngine)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_config.pEngine)) == 8, "ma_engine_node_config.pEngine has unexpected size % instead of 8", size_of(type_of(ma_engine_node_config.pEngine)));
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 8, "ma_engine_node_config.type has unexpected offset % instead of 8", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_config.type)) == 4, "ma_engine_node_config.type has unexpected size % instead of 4", size_of(type_of(ma_engine_node_config.type)));
        assert(((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)) == 12, "ma_engine_node_config.channelsIn has unexpected offset % instead of 12", ((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_config.channelsIn)) == 4, "ma_engine_node_config.channelsIn has unexpected size % instead of 4", size_of(type_of(ma_engine_node_config.channelsIn)));
        assert(((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)) == 16, "ma_engine_node_config.channelsOut has unexpected offset % instead of 16", ((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_config.channelsOut)) == 4, "ma_engine_node_config.channelsOut has unexpected size % instead of 4", size_of(type_of(ma_engine_node_config.channelsOut)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 20, "ma_engine_node_config.sampleRate has unexpected offset % instead of 20", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_config.sampleRate)) == 4, "ma_engine_node_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_engine_node_config.sampleRate)));
        assert(((cast(*void)(*instance.volumeSmoothTimeInPCMFrames)) - cast(*void)(*instance)) == 24, "ma_engine_node_config.volumeSmoothTimeInPCMFrames has unexpected offset % instead of 24", ((cast(*void)(*instance.volumeSmoothTimeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_config.volumeSmoothTimeInPCMFrames)) == 4, "ma_engine_node_config.volumeSmoothTimeInPCMFrames has unexpected size % instead of 4", size_of(type_of(ma_engine_node_config.volumeSmoothTimeInPCMFrames)));
        assert(((cast(*void)(*instance.monoExpansionMode)) - cast(*void)(*instance)) == 28, "ma_engine_node_config.monoExpansionMode has unexpected offset % instead of 28", ((cast(*void)(*instance.monoExpansionMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_config.monoExpansionMode)) == 4, "ma_engine_node_config.monoExpansionMode has unexpected size % instead of 4", size_of(type_of(ma_engine_node_config.monoExpansionMode)));
        assert(((cast(*void)(*instance.isPitchDisabled)) - cast(*void)(*instance)) == 32, "ma_engine_node_config.isPitchDisabled has unexpected offset % instead of 32", ((cast(*void)(*instance.isPitchDisabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_config.isPitchDisabled)) == 1, "ma_engine_node_config.isPitchDisabled has unexpected size % instead of 1", size_of(type_of(ma_engine_node_config.isPitchDisabled)));
        assert(((cast(*void)(*instance.isSpatializationDisabled)) - cast(*void)(*instance)) == 33, "ma_engine_node_config.isSpatializationDisabled has unexpected offset % instead of 33", ((cast(*void)(*instance.isSpatializationDisabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_config.isSpatializationDisabled)) == 1, "ma_engine_node_config.isSpatializationDisabled has unexpected size % instead of 1", size_of(type_of(ma_engine_node_config.isSpatializationDisabled)));
        assert(((cast(*void)(*instance.pinnedListenerIndex)) - cast(*void)(*instance)) == 34, "ma_engine_node_config.pinnedListenerIndex has unexpected offset % instead of 34", ((cast(*void)(*instance.pinnedListenerIndex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_config.pinnedListenerIndex)) == 1, "ma_engine_node_config.pinnedListenerIndex has unexpected size % instead of 1", size_of(type_of(ma_engine_node_config.pinnedListenerIndex)));
        assert(size_of(ma_engine_node_config) == 40, "ma_engine_node_config has size % instead of 40", size_of(ma_engine_node_config));
    }

    {
        instance: ma_engine_node;
        assert(((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)) == 0, "ma_engine_node.baseNode has unexpected offset % instead of 0", ((cast(*void)(*instance.baseNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.baseNode)) == 360, "ma_engine_node.baseNode has unexpected size % instead of 360", size_of(type_of(ma_engine_node.baseNode)));
        assert(((cast(*void)(*instance.pEngine)) - cast(*void)(*instance)) == 360, "ma_engine_node.pEngine has unexpected offset % instead of 360", ((cast(*void)(*instance.pEngine)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.pEngine)) == 8, "ma_engine_node.pEngine has unexpected size % instead of 8", size_of(type_of(ma_engine_node.pEngine)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 368, "ma_engine_node.sampleRate has unexpected offset % instead of 368", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.sampleRate)) == 4, "ma_engine_node.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_engine_node.sampleRate)));
        assert(((cast(*void)(*instance.volumeSmoothTimeInPCMFrames)) - cast(*void)(*instance)) == 372, "ma_engine_node.volumeSmoothTimeInPCMFrames has unexpected offset % instead of 372", ((cast(*void)(*instance.volumeSmoothTimeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.volumeSmoothTimeInPCMFrames)) == 4, "ma_engine_node.volumeSmoothTimeInPCMFrames has unexpected size % instead of 4", size_of(type_of(ma_engine_node.volumeSmoothTimeInPCMFrames)));
        assert(((cast(*void)(*instance.monoExpansionMode)) - cast(*void)(*instance)) == 376, "ma_engine_node.monoExpansionMode has unexpected offset % instead of 376", ((cast(*void)(*instance.monoExpansionMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.monoExpansionMode)) == 4, "ma_engine_node.monoExpansionMode has unexpected size % instead of 4", size_of(type_of(ma_engine_node.monoExpansionMode)));
        assert(((cast(*void)(*instance.fader)) - cast(*void)(*instance)) == 384, "ma_engine_node.fader has unexpected offset % instead of 384", ((cast(*void)(*instance.fader)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.fader)) == 40, "ma_engine_node.fader has unexpected size % instead of 40", size_of(type_of(ma_engine_node.fader)));
        assert(((cast(*void)(*instance.resampler)) - cast(*void)(*instance)) == 424, "ma_engine_node.resampler has unexpected offset % instead of 424", ((cast(*void)(*instance.resampler)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.resampler)) == 136, "ma_engine_node.resampler has unexpected size % instead of 136", size_of(type_of(ma_engine_node.resampler)));
        assert(((cast(*void)(*instance.spatializer)) - cast(*void)(*instance)) == 560, "ma_engine_node.spatializer has unexpected offset % instead of 560", ((cast(*void)(*instance.spatializer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.spatializer)) == 200, "ma_engine_node.spatializer has unexpected size % instead of 200", size_of(type_of(ma_engine_node.spatializer)));
        assert(((cast(*void)(*instance.panner)) - cast(*void)(*instance)) == 760, "ma_engine_node.panner has unexpected offset % instead of 760", ((cast(*void)(*instance.panner)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.panner)) == 16, "ma_engine_node.panner has unexpected size % instead of 16", size_of(type_of(ma_engine_node.panner)));
        assert(((cast(*void)(*instance.volumeGainer)) - cast(*void)(*instance)) == 776, "ma_engine_node.volumeGainer has unexpected offset % instead of 776", ((cast(*void)(*instance.volumeGainer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.volumeGainer)) == 48, "ma_engine_node.volumeGainer has unexpected size % instead of 48", size_of(type_of(ma_engine_node.volumeGainer)));
        assert(((cast(*void)(*instance.volume)) - cast(*void)(*instance)) == 824, "ma_engine_node.volume has unexpected offset % instead of 824", ((cast(*void)(*instance.volume)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.volume)) == 4, "ma_engine_node.volume has unexpected size % instead of 4", size_of(type_of(ma_engine_node.volume)));
        assert(((cast(*void)(*instance.pitch)) - cast(*void)(*instance)) == 828, "ma_engine_node.pitch has unexpected offset % instead of 828", ((cast(*void)(*instance.pitch)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.pitch)) == 4, "ma_engine_node.pitch has unexpected size % instead of 4", size_of(type_of(ma_engine_node.pitch)));
        assert(((cast(*void)(*instance.oldPitch)) - cast(*void)(*instance)) == 832, "ma_engine_node.oldPitch has unexpected offset % instead of 832", ((cast(*void)(*instance.oldPitch)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.oldPitch)) == 4, "ma_engine_node.oldPitch has unexpected size % instead of 4", size_of(type_of(ma_engine_node.oldPitch)));
        assert(((cast(*void)(*instance.oldDopplerPitch)) - cast(*void)(*instance)) == 836, "ma_engine_node.oldDopplerPitch has unexpected offset % instead of 836", ((cast(*void)(*instance.oldDopplerPitch)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.oldDopplerPitch)) == 4, "ma_engine_node.oldDopplerPitch has unexpected size % instead of 4", size_of(type_of(ma_engine_node.oldDopplerPitch)));
        assert(((cast(*void)(*instance.isPitchDisabled)) - cast(*void)(*instance)) == 840, "ma_engine_node.isPitchDisabled has unexpected offset % instead of 840", ((cast(*void)(*instance.isPitchDisabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.isPitchDisabled)) == 4, "ma_engine_node.isPitchDisabled has unexpected size % instead of 4", size_of(type_of(ma_engine_node.isPitchDisabled)));
        assert(((cast(*void)(*instance.isSpatializationDisabled)) - cast(*void)(*instance)) == 844, "ma_engine_node.isSpatializationDisabled has unexpected offset % instead of 844", ((cast(*void)(*instance.isSpatializationDisabled)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.isSpatializationDisabled)) == 4, "ma_engine_node.isSpatializationDisabled has unexpected size % instead of 4", size_of(type_of(ma_engine_node.isSpatializationDisabled)));
        assert(((cast(*void)(*instance.pinnedListenerIndex)) - cast(*void)(*instance)) == 848, "ma_engine_node.pinnedListenerIndex has unexpected offset % instead of 848", ((cast(*void)(*instance.pinnedListenerIndex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.pinnedListenerIndex)) == 4, "ma_engine_node.pinnedListenerIndex has unexpected size % instead of 4", size_of(type_of(ma_engine_node.pinnedListenerIndex)));
        assert(((cast(*void)(*instance.fadeSettings)) - cast(*void)(*instance)) == 856, "ma_engine_node.fadeSettings has unexpected offset % instead of 856", ((cast(*void)(*instance.fadeSettings)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node.fadeSettings)) == 24, "ma_engine_node.fadeSettings has unexpected size % instead of 24", size_of(type_of(ma_engine_node.fadeSettings)));
        assert(((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)) == 880, "ma_engine_node._ownsHeap has unexpected offset % instead of 880", ((cast(*void)(*instance._ownsHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node._ownsHeap)) == 1, "ma_engine_node._ownsHeap has unexpected size % instead of 1", size_of(type_of(ma_engine_node._ownsHeap)));
        assert(((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)) == 888, "ma_engine_node._pHeap has unexpected offset % instead of 888", ((cast(*void)(*instance._pHeap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node._pHeap)) == 8, "ma_engine_node._pHeap has unexpected size % instead of 8", size_of(type_of(ma_engine_node._pHeap)));
        assert(size_of(ma_engine_node) == 896, "ma_engine_node has size % instead of 896", size_of(ma_engine_node));
    }

    {
        instance: ma_sound_config;
        assert(((cast(*void)(*instance.pFilePath)) - cast(*void)(*instance)) == 0, "ma_sound_config.pFilePath has unexpected offset % instead of 0", ((cast(*void)(*instance.pFilePath)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.pFilePath)) == 8, "ma_sound_config.pFilePath has unexpected size % instead of 8", size_of(type_of(ma_sound_config.pFilePath)));
        assert(((cast(*void)(*instance.pFilePathW)) - cast(*void)(*instance)) == 8, "ma_sound_config.pFilePathW has unexpected offset % instead of 8", ((cast(*void)(*instance.pFilePathW)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.pFilePathW)) == 8, "ma_sound_config.pFilePathW has unexpected size % instead of 8", size_of(type_of(ma_sound_config.pFilePathW)));
        assert(((cast(*void)(*instance.pDataSource)) - cast(*void)(*instance)) == 16, "ma_sound_config.pDataSource has unexpected offset % instead of 16", ((cast(*void)(*instance.pDataSource)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.pDataSource)) == 8, "ma_sound_config.pDataSource has unexpected size % instead of 8", size_of(type_of(ma_sound_config.pDataSource)));
        assert(((cast(*void)(*instance.pInitialAttachment)) - cast(*void)(*instance)) == 24, "ma_sound_config.pInitialAttachment has unexpected offset % instead of 24", ((cast(*void)(*instance.pInitialAttachment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.pInitialAttachment)) == 8, "ma_sound_config.pInitialAttachment has unexpected size % instead of 8", size_of(type_of(ma_sound_config.pInitialAttachment)));
        assert(((cast(*void)(*instance.initialAttachmentInputBusIndex)) - cast(*void)(*instance)) == 32, "ma_sound_config.initialAttachmentInputBusIndex has unexpected offset % instead of 32", ((cast(*void)(*instance.initialAttachmentInputBusIndex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.initialAttachmentInputBusIndex)) == 4, "ma_sound_config.initialAttachmentInputBusIndex has unexpected size % instead of 4", size_of(type_of(ma_sound_config.initialAttachmentInputBusIndex)));
        assert(((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)) == 36, "ma_sound_config.channelsIn has unexpected offset % instead of 36", ((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.channelsIn)) == 4, "ma_sound_config.channelsIn has unexpected size % instead of 4", size_of(type_of(ma_sound_config.channelsIn)));
        assert(((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)) == 40, "ma_sound_config.channelsOut has unexpected offset % instead of 40", ((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.channelsOut)) == 4, "ma_sound_config.channelsOut has unexpected size % instead of 4", size_of(type_of(ma_sound_config.channelsOut)));
        assert(((cast(*void)(*instance.monoExpansionMode)) - cast(*void)(*instance)) == 44, "ma_sound_config.monoExpansionMode has unexpected offset % instead of 44", ((cast(*void)(*instance.monoExpansionMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.monoExpansionMode)) == 4, "ma_sound_config.monoExpansionMode has unexpected size % instead of 4", size_of(type_of(ma_sound_config.monoExpansionMode)));
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 48, "ma_sound_config.flags has unexpected offset % instead of 48", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.flags)) == 4, "ma_sound_config.flags has unexpected size % instead of 4", size_of(type_of(ma_sound_config.flags)));
        assert(((cast(*void)(*instance.volumeSmoothTimeInPCMFrames)) - cast(*void)(*instance)) == 52, "ma_sound_config.volumeSmoothTimeInPCMFrames has unexpected offset % instead of 52", ((cast(*void)(*instance.volumeSmoothTimeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.volumeSmoothTimeInPCMFrames)) == 4, "ma_sound_config.volumeSmoothTimeInPCMFrames has unexpected size % instead of 4", size_of(type_of(ma_sound_config.volumeSmoothTimeInPCMFrames)));
        assert(((cast(*void)(*instance.initialSeekPointInPCMFrames)) - cast(*void)(*instance)) == 56, "ma_sound_config.initialSeekPointInPCMFrames has unexpected offset % instead of 56", ((cast(*void)(*instance.initialSeekPointInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.initialSeekPointInPCMFrames)) == 8, "ma_sound_config.initialSeekPointInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_sound_config.initialSeekPointInPCMFrames)));
        assert(((cast(*void)(*instance.rangeBegInPCMFrames)) - cast(*void)(*instance)) == 64, "ma_sound_config.rangeBegInPCMFrames has unexpected offset % instead of 64", ((cast(*void)(*instance.rangeBegInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.rangeBegInPCMFrames)) == 8, "ma_sound_config.rangeBegInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_sound_config.rangeBegInPCMFrames)));
        assert(((cast(*void)(*instance.rangeEndInPCMFrames)) - cast(*void)(*instance)) == 72, "ma_sound_config.rangeEndInPCMFrames has unexpected offset % instead of 72", ((cast(*void)(*instance.rangeEndInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.rangeEndInPCMFrames)) == 8, "ma_sound_config.rangeEndInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_sound_config.rangeEndInPCMFrames)));
        assert(((cast(*void)(*instance.loopPointBegInPCMFrames)) - cast(*void)(*instance)) == 80, "ma_sound_config.loopPointBegInPCMFrames has unexpected offset % instead of 80", ((cast(*void)(*instance.loopPointBegInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.loopPointBegInPCMFrames)) == 8, "ma_sound_config.loopPointBegInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_sound_config.loopPointBegInPCMFrames)));
        assert(((cast(*void)(*instance.loopPointEndInPCMFrames)) - cast(*void)(*instance)) == 88, "ma_sound_config.loopPointEndInPCMFrames has unexpected offset % instead of 88", ((cast(*void)(*instance.loopPointEndInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.loopPointEndInPCMFrames)) == 8, "ma_sound_config.loopPointEndInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_sound_config.loopPointEndInPCMFrames)));
        assert(((cast(*void)(*instance.isLooping)) - cast(*void)(*instance)) == 96, "ma_sound_config.isLooping has unexpected offset % instead of 96", ((cast(*void)(*instance.isLooping)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.isLooping)) == 4, "ma_sound_config.isLooping has unexpected size % instead of 4", size_of(type_of(ma_sound_config.isLooping)));
        assert(((cast(*void)(*instance.endCallback)) - cast(*void)(*instance)) == 104, "ma_sound_config.endCallback has unexpected offset % instead of 104", ((cast(*void)(*instance.endCallback)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.endCallback)) == 8, "ma_sound_config.endCallback has unexpected size % instead of 8", size_of(type_of(ma_sound_config.endCallback)));
        assert(((cast(*void)(*instance.pEndCallbackUserData)) - cast(*void)(*instance)) == 112, "ma_sound_config.pEndCallbackUserData has unexpected offset % instead of 112", ((cast(*void)(*instance.pEndCallbackUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.pEndCallbackUserData)) == 8, "ma_sound_config.pEndCallbackUserData has unexpected size % instead of 8", size_of(type_of(ma_sound_config.pEndCallbackUserData)));
        assert(((cast(*void)(*instance.initNotifications)) - cast(*void)(*instance)) == 120, "ma_sound_config.initNotifications has unexpected offset % instead of 120", ((cast(*void)(*instance.initNotifications)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.initNotifications)) == 32, "ma_sound_config.initNotifications has unexpected size % instead of 32", size_of(type_of(ma_sound_config.initNotifications)));
        assert(((cast(*void)(*instance.pDoneFence)) - cast(*void)(*instance)) == 152, "ma_sound_config.pDoneFence has unexpected offset % instead of 152", ((cast(*void)(*instance.pDoneFence)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_config.pDoneFence)) == 8, "ma_sound_config.pDoneFence has unexpected size % instead of 8", size_of(type_of(ma_sound_config.pDoneFence)));
        assert(size_of(ma_sound_config) == 160, "ma_sound_config has size % instead of 160", size_of(ma_sound_config));
    }

    {
        instance: ma_sound;
        assert(((cast(*void)(*instance.engineNode)) - cast(*void)(*instance)) == 0, "ma_sound.engineNode has unexpected offset % instead of 0", ((cast(*void)(*instance.engineNode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound.engineNode)) == 896, "ma_sound.engineNode has unexpected size % instead of 896", size_of(type_of(ma_sound.engineNode)));
        assert(((cast(*void)(*instance.pDataSource)) - cast(*void)(*instance)) == 896, "ma_sound.pDataSource has unexpected offset % instead of 896", ((cast(*void)(*instance.pDataSource)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound.pDataSource)) == 8, "ma_sound.pDataSource has unexpected size % instead of 8", size_of(type_of(ma_sound.pDataSource)));
        assert(((cast(*void)(*instance.seekTarget)) - cast(*void)(*instance)) == 904, "ma_sound.seekTarget has unexpected offset % instead of 904", ((cast(*void)(*instance.seekTarget)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound.seekTarget)) == 8, "ma_sound.seekTarget has unexpected size % instead of 8", size_of(type_of(ma_sound.seekTarget)));
        assert(((cast(*void)(*instance.atEnd)) - cast(*void)(*instance)) == 912, "ma_sound.atEnd has unexpected offset % instead of 912", ((cast(*void)(*instance.atEnd)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound.atEnd)) == 4, "ma_sound.atEnd has unexpected size % instead of 4", size_of(type_of(ma_sound.atEnd)));
        assert(((cast(*void)(*instance.endCallback)) - cast(*void)(*instance)) == 920, "ma_sound.endCallback has unexpected offset % instead of 920", ((cast(*void)(*instance.endCallback)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound.endCallback)) == 8, "ma_sound.endCallback has unexpected size % instead of 8", size_of(type_of(ma_sound.endCallback)));
        assert(((cast(*void)(*instance.pEndCallbackUserData)) - cast(*void)(*instance)) == 928, "ma_sound.pEndCallbackUserData has unexpected offset % instead of 928", ((cast(*void)(*instance.pEndCallbackUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound.pEndCallbackUserData)) == 8, "ma_sound.pEndCallbackUserData has unexpected size % instead of 8", size_of(type_of(ma_sound.pEndCallbackUserData)));
        assert(((cast(*void)(*instance.ownsDataSource)) - cast(*void)(*instance)) == 936, "ma_sound.ownsDataSource has unexpected offset % instead of 936", ((cast(*void)(*instance.ownsDataSource)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound.ownsDataSource)) == 1, "ma_sound.ownsDataSource has unexpected size % instead of 1", size_of(type_of(ma_sound.ownsDataSource)));
        assert(((cast(*void)(*instance.pResourceManagerDataSource)) - cast(*void)(*instance)) == 944, "ma_sound.pResourceManagerDataSource has unexpected offset % instead of 944", ((cast(*void)(*instance.pResourceManagerDataSource)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound.pResourceManagerDataSource)) == 8, "ma_sound.pResourceManagerDataSource has unexpected size % instead of 8", size_of(type_of(ma_sound.pResourceManagerDataSource)));
        assert(size_of(ma_sound) == 952, "ma_sound has size % instead of 952", size_of(ma_sound));
    }

    {
        instance: ma_sound_inlined;
        assert(((cast(*void)(*instance.sound)) - cast(*void)(*instance)) == 0, "ma_sound_inlined.sound has unexpected offset % instead of 0", ((cast(*void)(*instance.sound)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_inlined.sound)) == 952, "ma_sound_inlined.sound has unexpected size % instead of 952", size_of(type_of(ma_sound_inlined.sound)));
        assert(((cast(*void)(*instance.pNext)) - cast(*void)(*instance)) == 952, "ma_sound_inlined.pNext has unexpected offset % instead of 952", ((cast(*void)(*instance.pNext)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_inlined.pNext)) == 8, "ma_sound_inlined.pNext has unexpected size % instead of 8", size_of(type_of(ma_sound_inlined.pNext)));
        assert(((cast(*void)(*instance.pPrev)) - cast(*void)(*instance)) == 960, "ma_sound_inlined.pPrev has unexpected offset % instead of 960", ((cast(*void)(*instance.pPrev)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_sound_inlined.pPrev)) == 8, "ma_sound_inlined.pPrev has unexpected size % instead of 8", size_of(type_of(ma_sound_inlined.pPrev)));
        assert(size_of(ma_sound_inlined) == 968, "ma_sound_inlined has size % instead of 968", size_of(ma_sound_inlined));
    }

    {
        instance: ma_engine_config;
        assert(((cast(*void)(*instance.pResourceManager)) - cast(*void)(*instance)) == 0, "ma_engine_config.pResourceManager has unexpected offset % instead of 0", ((cast(*void)(*instance.pResourceManager)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.pResourceManager)) == 8, "ma_engine_config.pResourceManager has unexpected size % instead of 8", size_of(type_of(ma_engine_config.pResourceManager)));
        assert(((cast(*void)(*instance.pContext)) - cast(*void)(*instance)) == 8, "ma_engine_config.pContext has unexpected offset % instead of 8", ((cast(*void)(*instance.pContext)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.pContext)) == 8, "ma_engine_config.pContext has unexpected size % instead of 8", size_of(type_of(ma_engine_config.pContext)));
        assert(((cast(*void)(*instance.pDevice)) - cast(*void)(*instance)) == 16, "ma_engine_config.pDevice has unexpected offset % instead of 16", ((cast(*void)(*instance.pDevice)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.pDevice)) == 8, "ma_engine_config.pDevice has unexpected size % instead of 8", size_of(type_of(ma_engine_config.pDevice)));
        assert(((cast(*void)(*instance.pPlaybackDeviceID)) - cast(*void)(*instance)) == 24, "ma_engine_config.pPlaybackDeviceID has unexpected offset % instead of 24", ((cast(*void)(*instance.pPlaybackDeviceID)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.pPlaybackDeviceID)) == 8, "ma_engine_config.pPlaybackDeviceID has unexpected size % instead of 8", size_of(type_of(ma_engine_config.pPlaybackDeviceID)));
        assert(((cast(*void)(*instance.dataCallback)) - cast(*void)(*instance)) == 32, "ma_engine_config.dataCallback has unexpected offset % instead of 32", ((cast(*void)(*instance.dataCallback)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.dataCallback)) == 8, "ma_engine_config.dataCallback has unexpected size % instead of 8", size_of(type_of(ma_engine_config.dataCallback)));
        assert(((cast(*void)(*instance.notificationCallback)) - cast(*void)(*instance)) == 40, "ma_engine_config.notificationCallback has unexpected offset % instead of 40", ((cast(*void)(*instance.notificationCallback)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.notificationCallback)) == 8, "ma_engine_config.notificationCallback has unexpected size % instead of 8", size_of(type_of(ma_engine_config.notificationCallback)));
        assert(((cast(*void)(*instance.pLog)) - cast(*void)(*instance)) == 48, "ma_engine_config.pLog has unexpected offset % instead of 48", ((cast(*void)(*instance.pLog)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.pLog)) == 8, "ma_engine_config.pLog has unexpected size % instead of 8", size_of(type_of(ma_engine_config.pLog)));
        assert(((cast(*void)(*instance.listenerCount)) - cast(*void)(*instance)) == 56, "ma_engine_config.listenerCount has unexpected offset % instead of 56", ((cast(*void)(*instance.listenerCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.listenerCount)) == 4, "ma_engine_config.listenerCount has unexpected size % instead of 4", size_of(type_of(ma_engine_config.listenerCount)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 60, "ma_engine_config.channels has unexpected offset % instead of 60", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.channels)) == 4, "ma_engine_config.channels has unexpected size % instead of 4", size_of(type_of(ma_engine_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 64, "ma_engine_config.sampleRate has unexpected offset % instead of 64", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.sampleRate)) == 4, "ma_engine_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_engine_config.sampleRate)));
        assert(((cast(*void)(*instance.periodSizeInFrames)) - cast(*void)(*instance)) == 68, "ma_engine_config.periodSizeInFrames has unexpected offset % instead of 68", ((cast(*void)(*instance.periodSizeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.periodSizeInFrames)) == 4, "ma_engine_config.periodSizeInFrames has unexpected size % instead of 4", size_of(type_of(ma_engine_config.periodSizeInFrames)));
        assert(((cast(*void)(*instance.periodSizeInMilliseconds)) - cast(*void)(*instance)) == 72, "ma_engine_config.periodSizeInMilliseconds has unexpected offset % instead of 72", ((cast(*void)(*instance.periodSizeInMilliseconds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.periodSizeInMilliseconds)) == 4, "ma_engine_config.periodSizeInMilliseconds has unexpected size % instead of 4", size_of(type_of(ma_engine_config.periodSizeInMilliseconds)));
        assert(((cast(*void)(*instance.gainSmoothTimeInFrames)) - cast(*void)(*instance)) == 76, "ma_engine_config.gainSmoothTimeInFrames has unexpected offset % instead of 76", ((cast(*void)(*instance.gainSmoothTimeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.gainSmoothTimeInFrames)) == 4, "ma_engine_config.gainSmoothTimeInFrames has unexpected size % instead of 4", size_of(type_of(ma_engine_config.gainSmoothTimeInFrames)));
        assert(((cast(*void)(*instance.gainSmoothTimeInMilliseconds)) - cast(*void)(*instance)) == 80, "ma_engine_config.gainSmoothTimeInMilliseconds has unexpected offset % instead of 80", ((cast(*void)(*instance.gainSmoothTimeInMilliseconds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.gainSmoothTimeInMilliseconds)) == 4, "ma_engine_config.gainSmoothTimeInMilliseconds has unexpected size % instead of 4", size_of(type_of(ma_engine_config.gainSmoothTimeInMilliseconds)));
        assert(((cast(*void)(*instance.defaultVolumeSmoothTimeInPCMFrames)) - cast(*void)(*instance)) == 84, "ma_engine_config.defaultVolumeSmoothTimeInPCMFrames has unexpected offset % instead of 84", ((cast(*void)(*instance.defaultVolumeSmoothTimeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.defaultVolumeSmoothTimeInPCMFrames)) == 4, "ma_engine_config.defaultVolumeSmoothTimeInPCMFrames has unexpected size % instead of 4", size_of(type_of(ma_engine_config.defaultVolumeSmoothTimeInPCMFrames)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 88, "ma_engine_config.allocationCallbacks has unexpected offset % instead of 88", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.allocationCallbacks)) == 32, "ma_engine_config.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_engine_config.allocationCallbacks)));
        assert(((cast(*void)(*instance.noAutoStart)) - cast(*void)(*instance)) == 120, "ma_engine_config.noAutoStart has unexpected offset % instead of 120", ((cast(*void)(*instance.noAutoStart)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.noAutoStart)) == 4, "ma_engine_config.noAutoStart has unexpected size % instead of 4", size_of(type_of(ma_engine_config.noAutoStart)));
        assert(((cast(*void)(*instance.noDevice)) - cast(*void)(*instance)) == 124, "ma_engine_config.noDevice has unexpected offset % instead of 124", ((cast(*void)(*instance.noDevice)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.noDevice)) == 4, "ma_engine_config.noDevice has unexpected size % instead of 4", size_of(type_of(ma_engine_config.noDevice)));
        assert(((cast(*void)(*instance.monoExpansionMode)) - cast(*void)(*instance)) == 128, "ma_engine_config.monoExpansionMode has unexpected offset % instead of 128", ((cast(*void)(*instance.monoExpansionMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.monoExpansionMode)) == 4, "ma_engine_config.monoExpansionMode has unexpected size % instead of 4", size_of(type_of(ma_engine_config.monoExpansionMode)));
        assert(((cast(*void)(*instance.pResourceManagerVFS)) - cast(*void)(*instance)) == 136, "ma_engine_config.pResourceManagerVFS has unexpected offset % instead of 136", ((cast(*void)(*instance.pResourceManagerVFS)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.pResourceManagerVFS)) == 8, "ma_engine_config.pResourceManagerVFS has unexpected size % instead of 8", size_of(type_of(ma_engine_config.pResourceManagerVFS)));
        assert(((cast(*void)(*instance.onProcess)) - cast(*void)(*instance)) == 144, "ma_engine_config.onProcess has unexpected offset % instead of 144", ((cast(*void)(*instance.onProcess)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.onProcess)) == 8, "ma_engine_config.onProcess has unexpected size % instead of 8", size_of(type_of(ma_engine_config.onProcess)));
        assert(((cast(*void)(*instance.pProcessUserData)) - cast(*void)(*instance)) == 152, "ma_engine_config.pProcessUserData has unexpected offset % instead of 152", ((cast(*void)(*instance.pProcessUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_config.pProcessUserData)) == 8, "ma_engine_config.pProcessUserData has unexpected size % instead of 8", size_of(type_of(ma_engine_config.pProcessUserData)));
        assert(size_of(ma_engine_config) == 160, "ma_engine_config has size % instead of 160", size_of(ma_engine_config));
    }

    {
        instance: ma_engine;
        assert(((cast(*void)(*instance.nodeGraph)) - cast(*void)(*instance)) == 0, "ma_engine.nodeGraph has unexpected offset % instead of 0", ((cast(*void)(*instance.nodeGraph)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.nodeGraph)) == 728, "ma_engine.nodeGraph has unexpected size % instead of 728", size_of(type_of(ma_engine.nodeGraph)));
        assert(((cast(*void)(*instance.pResourceManager)) - cast(*void)(*instance)) == 728, "ma_engine.pResourceManager has unexpected offset % instead of 728", ((cast(*void)(*instance.pResourceManager)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.pResourceManager)) == 8, "ma_engine.pResourceManager has unexpected size % instead of 8", size_of(type_of(ma_engine.pResourceManager)));
        assert(((cast(*void)(*instance.pDevice)) - cast(*void)(*instance)) == 736, "ma_engine.pDevice has unexpected offset % instead of 736", ((cast(*void)(*instance.pDevice)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.pDevice)) == 8, "ma_engine.pDevice has unexpected size % instead of 8", size_of(type_of(ma_engine.pDevice)));
        assert(((cast(*void)(*instance.pLog)) - cast(*void)(*instance)) == 744, "ma_engine.pLog has unexpected offset % instead of 744", ((cast(*void)(*instance.pLog)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.pLog)) == 8, "ma_engine.pLog has unexpected size % instead of 8", size_of(type_of(ma_engine.pLog)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 752, "ma_engine.sampleRate has unexpected offset % instead of 752", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.sampleRate)) == 4, "ma_engine.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_engine.sampleRate)));
        assert(((cast(*void)(*instance.listenerCount)) - cast(*void)(*instance)) == 756, "ma_engine.listenerCount has unexpected offset % instead of 756", ((cast(*void)(*instance.listenerCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.listenerCount)) == 4, "ma_engine.listenerCount has unexpected size % instead of 4", size_of(type_of(ma_engine.listenerCount)));
        assert(((cast(*void)(*instance.listeners)) - cast(*void)(*instance)) == 760, "ma_engine.listeners has unexpected offset % instead of 760", ((cast(*void)(*instance.listeners)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.listeners)) == 448, "ma_engine.listeners has unexpected size % instead of 448", size_of(type_of(ma_engine.listeners)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 1208, "ma_engine.allocationCallbacks has unexpected offset % instead of 1208", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.allocationCallbacks)) == 32, "ma_engine.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_engine.allocationCallbacks)));
        assert(((cast(*void)(*instance.ownsResourceManager)) - cast(*void)(*instance)) == 1240, "ma_engine.ownsResourceManager has unexpected offset % instead of 1240", ((cast(*void)(*instance.ownsResourceManager)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.ownsResourceManager)) == 1, "ma_engine.ownsResourceManager has unexpected size % instead of 1", size_of(type_of(ma_engine.ownsResourceManager)));
        assert(((cast(*void)(*instance.ownsDevice)) - cast(*void)(*instance)) == 1241, "ma_engine.ownsDevice has unexpected offset % instead of 1241", ((cast(*void)(*instance.ownsDevice)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.ownsDevice)) == 1, "ma_engine.ownsDevice has unexpected size % instead of 1", size_of(type_of(ma_engine.ownsDevice)));
        assert(((cast(*void)(*instance.inlinedSoundLock)) - cast(*void)(*instance)) == 1244, "ma_engine.inlinedSoundLock has unexpected offset % instead of 1244", ((cast(*void)(*instance.inlinedSoundLock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.inlinedSoundLock)) == 4, "ma_engine.inlinedSoundLock has unexpected size % instead of 4", size_of(type_of(ma_engine.inlinedSoundLock)));
        assert(((cast(*void)(*instance.pInlinedSoundHead)) - cast(*void)(*instance)) == 1248, "ma_engine.pInlinedSoundHead has unexpected offset % instead of 1248", ((cast(*void)(*instance.pInlinedSoundHead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.pInlinedSoundHead)) == 8, "ma_engine.pInlinedSoundHead has unexpected size % instead of 8", size_of(type_of(ma_engine.pInlinedSoundHead)));
        assert(((cast(*void)(*instance.inlinedSoundCount)) - cast(*void)(*instance)) == 1256, "ma_engine.inlinedSoundCount has unexpected offset % instead of 1256", ((cast(*void)(*instance.inlinedSoundCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.inlinedSoundCount)) == 4, "ma_engine.inlinedSoundCount has unexpected size % instead of 4", size_of(type_of(ma_engine.inlinedSoundCount)));
        assert(((cast(*void)(*instance.gainSmoothTimeInFrames)) - cast(*void)(*instance)) == 1260, "ma_engine.gainSmoothTimeInFrames has unexpected offset % instead of 1260", ((cast(*void)(*instance.gainSmoothTimeInFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.gainSmoothTimeInFrames)) == 4, "ma_engine.gainSmoothTimeInFrames has unexpected size % instead of 4", size_of(type_of(ma_engine.gainSmoothTimeInFrames)));
        assert(((cast(*void)(*instance.defaultVolumeSmoothTimeInPCMFrames)) - cast(*void)(*instance)) == 1264, "ma_engine.defaultVolumeSmoothTimeInPCMFrames has unexpected offset % instead of 1264", ((cast(*void)(*instance.defaultVolumeSmoothTimeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.defaultVolumeSmoothTimeInPCMFrames)) == 4, "ma_engine.defaultVolumeSmoothTimeInPCMFrames has unexpected size % instead of 4", size_of(type_of(ma_engine.defaultVolumeSmoothTimeInPCMFrames)));
        assert(((cast(*void)(*instance.monoExpansionMode)) - cast(*void)(*instance)) == 1268, "ma_engine.monoExpansionMode has unexpected offset % instead of 1268", ((cast(*void)(*instance.monoExpansionMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.monoExpansionMode)) == 4, "ma_engine.monoExpansionMode has unexpected size % instead of 4", size_of(type_of(ma_engine.monoExpansionMode)));
        assert(((cast(*void)(*instance.onProcess)) - cast(*void)(*instance)) == 1272, "ma_engine.onProcess has unexpected offset % instead of 1272", ((cast(*void)(*instance.onProcess)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.onProcess)) == 8, "ma_engine.onProcess has unexpected size % instead of 8", size_of(type_of(ma_engine.onProcess)));
        assert(((cast(*void)(*instance.pProcessUserData)) - cast(*void)(*instance)) == 1280, "ma_engine.pProcessUserData has unexpected offset % instead of 1280", ((cast(*void)(*instance.pProcessUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine.pProcessUserData)) == 8, "ma_engine.pProcessUserData has unexpected size % instead of 8", size_of(type_of(ma_engine.pProcessUserData)));
        assert(size_of(ma_engine) == 1288, "ma_engine has size % instead of 1288", size_of(ma_engine));
    }

    {
        instance: ma_atomic_if32;
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 0, "ma_atomic_if32.i has unexpected offset % instead of 0", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_if32.i)) == 4, "ma_atomic_if32.i has unexpected size % instead of 4", size_of(type_of(ma_atomic_if32.i)));
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 0, "ma_atomic_if32.f has unexpected offset % instead of 0", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_if32.f)) == 4, "ma_atomic_if32.f has unexpected size % instead of 4", size_of(type_of(ma_atomic_if32.f)));
        assert(size_of(ma_atomic_if32) == 4, "ma_atomic_if32 has size % instead of 4", size_of(ma_atomic_if32));
    }

    {
        instance: ma_atomic_if64;
        assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 0, "ma_atomic_if64.i has unexpected offset % instead of 0", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_if64.i)) == 8, "ma_atomic_if64.i has unexpected size % instead of 8", size_of(type_of(ma_atomic_if64.i)));
        assert(((cast(*void)(*instance.f)) - cast(*void)(*instance)) == 0, "ma_atomic_if64.f has unexpected offset % instead of 0", ((cast(*void)(*instance.f)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_atomic_if64.f)) == 8, "ma_atomic_if64.f has unexpected size % instead of 8", size_of(type_of(ma_atomic_if64.f)));
        assert(size_of(ma_atomic_if64) == 8, "ma_atomic_if64 has size % instead of 8", size_of(ma_atomic_if64));
    }

    {
        instance: ma_thread_proxy_data;
        assert(((cast(*void)(*instance.entryProc)) - cast(*void)(*instance)) == 0, "ma_thread_proxy_data.entryProc has unexpected offset % instead of 0", ((cast(*void)(*instance.entryProc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_thread_proxy_data.entryProc)) == 8, "ma_thread_proxy_data.entryProc has unexpected size % instead of 8", size_of(type_of(ma_thread_proxy_data.entryProc)));
        assert(((cast(*void)(*instance.pData)) - cast(*void)(*instance)) == 8, "ma_thread_proxy_data.pData has unexpected offset % instead of 8", ((cast(*void)(*instance.pData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_thread_proxy_data.pData)) == 8, "ma_thread_proxy_data.pData has unexpected size % instead of 8", size_of(type_of(ma_thread_proxy_data.pData)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 16, "ma_thread_proxy_data.allocationCallbacks has unexpected offset % instead of 16", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_thread_proxy_data.allocationCallbacks)) == 32, "ma_thread_proxy_data.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_thread_proxy_data.allocationCallbacks)));
        assert(size_of(ma_thread_proxy_data) == 48, "ma_thread_proxy_data has size % instead of 48", size_of(ma_thread_proxy_data));
    }

    {
        instance: ma_slot_allocator_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_slot_allocator_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_slot_allocator_heap_layout.sizeInBytes)) == 8, "ma_slot_allocator_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_slot_allocator_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.groupsOffset)) - cast(*void)(*instance)) == 8, "ma_slot_allocator_heap_layout.groupsOffset has unexpected offset % instead of 8", ((cast(*void)(*instance.groupsOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_slot_allocator_heap_layout.groupsOffset)) == 8, "ma_slot_allocator_heap_layout.groupsOffset has unexpected size % instead of 8", size_of(type_of(ma_slot_allocator_heap_layout.groupsOffset)));
        assert(((cast(*void)(*instance.slotsOffset)) - cast(*void)(*instance)) == 16, "ma_slot_allocator_heap_layout.slotsOffset has unexpected offset % instead of 16", ((cast(*void)(*instance.slotsOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_slot_allocator_heap_layout.slotsOffset)) == 8, "ma_slot_allocator_heap_layout.slotsOffset has unexpected size % instead of 8", size_of(type_of(ma_slot_allocator_heap_layout.slotsOffset)));
        assert(size_of(ma_slot_allocator_heap_layout) == 24, "ma_slot_allocator_heap_layout has size % instead of 24", size_of(ma_slot_allocator_heap_layout));
    }

    {
        instance: ma_job_queue_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_job_queue_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue_heap_layout.sizeInBytes)) == 8, "ma_job_queue_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_job_queue_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.allocatorOffset)) - cast(*void)(*instance)) == 8, "ma_job_queue_heap_layout.allocatorOffset has unexpected offset % instead of 8", ((cast(*void)(*instance.allocatorOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue_heap_layout.allocatorOffset)) == 8, "ma_job_queue_heap_layout.allocatorOffset has unexpected size % instead of 8", size_of(type_of(ma_job_queue_heap_layout.allocatorOffset)));
        assert(((cast(*void)(*instance.jobsOffset)) - cast(*void)(*instance)) == 16, "ma_job_queue_heap_layout.jobsOffset has unexpected offset % instead of 16", ((cast(*void)(*instance.jobsOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_job_queue_heap_layout.jobsOffset)) == 8, "ma_job_queue_heap_layout.jobsOffset has unexpected size % instead of 8", size_of(type_of(ma_job_queue_heap_layout.jobsOffset)));
        assert(size_of(ma_job_queue_heap_layout) == 24, "ma_job_queue_heap_layout has size % instead of 24", size_of(ma_job_queue_heap_layout));
    }

    {
        instance: ma_backend_info;
        assert(((cast(*void)(*instance.backend)) - cast(*void)(*instance)) == 0, "ma_backend_info.backend has unexpected offset % instead of 0", ((cast(*void)(*instance.backend)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_info.backend)) == 4, "ma_backend_info.backend has unexpected size % instead of 4", size_of(type_of(ma_backend_info.backend)));
        assert(((cast(*void)(*instance.pName)) - cast(*void)(*instance)) == 8, "ma_backend_info.pName has unexpected offset % instead of 8", ((cast(*void)(*instance.pName)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_backend_info.pName)) == 8, "ma_backend_info.pName has unexpected size % instead of 8", size_of(type_of(ma_backend_info.pName)));
        assert(size_of(ma_backend_info) == 16, "ma_backend_info has size % instead of 16", size_of(ma_backend_info));
    }

    {
        instance: ma_device_init_internal_data__coreaudio;
        assert(((cast(*void)(*instance.allowNominalSampleRateChange)) - cast(*void)(*instance)) == 0, "ma_device_init_internal_data__coreaudio.allowNominalSampleRateChange has unexpected offset % instead of 0", ((cast(*void)(*instance.allowNominalSampleRateChange)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.allowNominalSampleRateChange)) == 4, "ma_device_init_internal_data__coreaudio.allowNominalSampleRateChange has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.allowNominalSampleRateChange)));
        assert(((cast(*void)(*instance.formatIn)) - cast(*void)(*instance)) == 4, "ma_device_init_internal_data__coreaudio.formatIn has unexpected offset % instead of 4", ((cast(*void)(*instance.formatIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.formatIn)) == 4, "ma_device_init_internal_data__coreaudio.formatIn has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.formatIn)));
        assert(((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)) == 8, "ma_device_init_internal_data__coreaudio.channelsIn has unexpected offset % instead of 8", ((cast(*void)(*instance.channelsIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.channelsIn)) == 4, "ma_device_init_internal_data__coreaudio.channelsIn has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.channelsIn)));
        assert(((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)) == 12, "ma_device_init_internal_data__coreaudio.sampleRateIn has unexpected offset % instead of 12", ((cast(*void)(*instance.sampleRateIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.sampleRateIn)) == 4, "ma_device_init_internal_data__coreaudio.sampleRateIn has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.sampleRateIn)));
        assert(((cast(*void)(*instance.channelMapIn)) - cast(*void)(*instance)) == 16, "ma_device_init_internal_data__coreaudio.channelMapIn has unexpected offset % instead of 16", ((cast(*void)(*instance.channelMapIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.channelMapIn)) == 254, "ma_device_init_internal_data__coreaudio.channelMapIn has unexpected size % instead of 254", size_of(type_of(ma_device_init_internal_data__coreaudio.channelMapIn)));
        assert(((cast(*void)(*instance.periodSizeInFramesIn)) - cast(*void)(*instance)) == 272, "ma_device_init_internal_data__coreaudio.periodSizeInFramesIn has unexpected offset % instead of 272", ((cast(*void)(*instance.periodSizeInFramesIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.periodSizeInFramesIn)) == 4, "ma_device_init_internal_data__coreaudio.periodSizeInFramesIn has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.periodSizeInFramesIn)));
        assert(((cast(*void)(*instance.periodSizeInMillisecondsIn)) - cast(*void)(*instance)) == 276, "ma_device_init_internal_data__coreaudio.periodSizeInMillisecondsIn has unexpected offset % instead of 276", ((cast(*void)(*instance.periodSizeInMillisecondsIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.periodSizeInMillisecondsIn)) == 4, "ma_device_init_internal_data__coreaudio.periodSizeInMillisecondsIn has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.periodSizeInMillisecondsIn)));
        assert(((cast(*void)(*instance.periodsIn)) - cast(*void)(*instance)) == 280, "ma_device_init_internal_data__coreaudio.periodsIn has unexpected offset % instead of 280", ((cast(*void)(*instance.periodsIn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.periodsIn)) == 4, "ma_device_init_internal_data__coreaudio.periodsIn has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.periodsIn)));
        assert(((cast(*void)(*instance.shareMode)) - cast(*void)(*instance)) == 284, "ma_device_init_internal_data__coreaudio.shareMode has unexpected offset % instead of 284", ((cast(*void)(*instance.shareMode)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.shareMode)) == 4, "ma_device_init_internal_data__coreaudio.shareMode has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.shareMode)));
        assert(((cast(*void)(*instance.performanceProfile)) - cast(*void)(*instance)) == 288, "ma_device_init_internal_data__coreaudio.performanceProfile has unexpected offset % instead of 288", ((cast(*void)(*instance.performanceProfile)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.performanceProfile)) == 4, "ma_device_init_internal_data__coreaudio.performanceProfile has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.performanceProfile)));
        assert(((cast(*void)(*instance.registerStopEvent)) - cast(*void)(*instance)) == 292, "ma_device_init_internal_data__coreaudio.registerStopEvent has unexpected offset % instead of 292", ((cast(*void)(*instance.registerStopEvent)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.registerStopEvent)) == 4, "ma_device_init_internal_data__coreaudio.registerStopEvent has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.registerStopEvent)));
        assert(((cast(*void)(*instance.deviceObjectID)) - cast(*void)(*instance)) == 296, "ma_device_init_internal_data__coreaudio.deviceObjectID has unexpected offset % instead of 296", ((cast(*void)(*instance.deviceObjectID)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.deviceObjectID)) == 4, "ma_device_init_internal_data__coreaudio.deviceObjectID has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.deviceObjectID)));
        assert(((cast(*void)(*instance.component)) - cast(*void)(*instance)) == 304, "ma_device_init_internal_data__coreaudio.component has unexpected offset % instead of 304", ((cast(*void)(*instance.component)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.component)) == 8, "ma_device_init_internal_data__coreaudio.component has unexpected size % instead of 8", size_of(type_of(ma_device_init_internal_data__coreaudio.component)));
        assert(((cast(*void)(*instance.audioUnit)) - cast(*void)(*instance)) == 312, "ma_device_init_internal_data__coreaudio.audioUnit has unexpected offset % instead of 312", ((cast(*void)(*instance.audioUnit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.audioUnit)) == 8, "ma_device_init_internal_data__coreaudio.audioUnit has unexpected size % instead of 8", size_of(type_of(ma_device_init_internal_data__coreaudio.audioUnit)));
        assert(((cast(*void)(*instance.pAudioBufferList)) - cast(*void)(*instance)) == 320, "ma_device_init_internal_data__coreaudio.pAudioBufferList has unexpected offset % instead of 320", ((cast(*void)(*instance.pAudioBufferList)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.pAudioBufferList)) == 8, "ma_device_init_internal_data__coreaudio.pAudioBufferList has unexpected size % instead of 8", size_of(type_of(ma_device_init_internal_data__coreaudio.pAudioBufferList)));
        assert(((cast(*void)(*instance.formatOut)) - cast(*void)(*instance)) == 328, "ma_device_init_internal_data__coreaudio.formatOut has unexpected offset % instead of 328", ((cast(*void)(*instance.formatOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.formatOut)) == 4, "ma_device_init_internal_data__coreaudio.formatOut has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.formatOut)));
        assert(((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)) == 332, "ma_device_init_internal_data__coreaudio.channelsOut has unexpected offset % instead of 332", ((cast(*void)(*instance.channelsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.channelsOut)) == 4, "ma_device_init_internal_data__coreaudio.channelsOut has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.channelsOut)));
        assert(((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)) == 336, "ma_device_init_internal_data__coreaudio.sampleRateOut has unexpected offset % instead of 336", ((cast(*void)(*instance.sampleRateOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.sampleRateOut)) == 4, "ma_device_init_internal_data__coreaudio.sampleRateOut has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.sampleRateOut)));
        assert(((cast(*void)(*instance.channelMapOut)) - cast(*void)(*instance)) == 340, "ma_device_init_internal_data__coreaudio.channelMapOut has unexpected offset % instead of 340", ((cast(*void)(*instance.channelMapOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.channelMapOut)) == 254, "ma_device_init_internal_data__coreaudio.channelMapOut has unexpected size % instead of 254", size_of(type_of(ma_device_init_internal_data__coreaudio.channelMapOut)));
        assert(((cast(*void)(*instance.periodSizeInFramesOut)) - cast(*void)(*instance)) == 596, "ma_device_init_internal_data__coreaudio.periodSizeInFramesOut has unexpected offset % instead of 596", ((cast(*void)(*instance.periodSizeInFramesOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.periodSizeInFramesOut)) == 4, "ma_device_init_internal_data__coreaudio.periodSizeInFramesOut has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.periodSizeInFramesOut)));
        assert(((cast(*void)(*instance.periodsOut)) - cast(*void)(*instance)) == 600, "ma_device_init_internal_data__coreaudio.periodsOut has unexpected offset % instead of 600", ((cast(*void)(*instance.periodsOut)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.periodsOut)) == 4, "ma_device_init_internal_data__coreaudio.periodsOut has unexpected size % instead of 4", size_of(type_of(ma_device_init_internal_data__coreaudio.periodsOut)));
        assert(((cast(*void)(*instance.deviceName)) - cast(*void)(*instance)) == 604, "ma_device_init_internal_data__coreaudio.deviceName has unexpected offset % instead of 604", ((cast(*void)(*instance.deviceName)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_device_init_internal_data__coreaudio.deviceName)) == 256, "ma_device_init_internal_data__coreaudio.deviceName has unexpected size % instead of 256", size_of(type_of(ma_device_init_internal_data__coreaudio.deviceName)));
        assert(size_of(ma_device_init_internal_data__coreaudio) == 864, "ma_device_init_internal_data__coreaudio has size % instead of 864", size_of(ma_device_init_internal_data__coreaudio));
    }

    {
        instance: ma_biquad_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_biquad_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_heap_layout.sizeInBytes)) == 8, "ma_biquad_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_biquad_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.r1Offset)) - cast(*void)(*instance)) == 8, "ma_biquad_heap_layout.r1Offset has unexpected offset % instead of 8", ((cast(*void)(*instance.r1Offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_heap_layout.r1Offset)) == 8, "ma_biquad_heap_layout.r1Offset has unexpected size % instead of 8", size_of(type_of(ma_biquad_heap_layout.r1Offset)));
        assert(((cast(*void)(*instance.r2Offset)) - cast(*void)(*instance)) == 16, "ma_biquad_heap_layout.r2Offset has unexpected offset % instead of 16", ((cast(*void)(*instance.r2Offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_biquad_heap_layout.r2Offset)) == 8, "ma_biquad_heap_layout.r2Offset has unexpected size % instead of 8", size_of(type_of(ma_biquad_heap_layout.r2Offset)));
        assert(size_of(ma_biquad_heap_layout) == 24, "ma_biquad_heap_layout has size % instead of 24", size_of(ma_biquad_heap_layout));
    }

    {
        instance: ma_lpf1_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_lpf1_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1_heap_layout.sizeInBytes)) == 8, "ma_lpf1_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_lpf1_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.r1Offset)) - cast(*void)(*instance)) == 8, "ma_lpf1_heap_layout.r1Offset has unexpected offset % instead of 8", ((cast(*void)(*instance.r1Offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf1_heap_layout.r1Offset)) == 8, "ma_lpf1_heap_layout.r1Offset has unexpected size % instead of 8", size_of(type_of(ma_lpf1_heap_layout.r1Offset)));
        assert(size_of(ma_lpf1_heap_layout) == 16, "ma_lpf1_heap_layout has size % instead of 16", size_of(ma_lpf1_heap_layout));
    }

    {
        instance: ma_lpf_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_lpf_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_heap_layout.sizeInBytes)) == 8, "ma_lpf_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_lpf_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.lpf1Offset)) - cast(*void)(*instance)) == 8, "ma_lpf_heap_layout.lpf1Offset has unexpected offset % instead of 8", ((cast(*void)(*instance.lpf1Offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_heap_layout.lpf1Offset)) == 8, "ma_lpf_heap_layout.lpf1Offset has unexpected size % instead of 8", size_of(type_of(ma_lpf_heap_layout.lpf1Offset)));
        assert(((cast(*void)(*instance.lpf2Offset)) - cast(*void)(*instance)) == 16, "ma_lpf_heap_layout.lpf2Offset has unexpected offset % instead of 16", ((cast(*void)(*instance.lpf2Offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_lpf_heap_layout.lpf2Offset)) == 8, "ma_lpf_heap_layout.lpf2Offset has unexpected size % instead of 8", size_of(type_of(ma_lpf_heap_layout.lpf2Offset)));
        assert(size_of(ma_lpf_heap_layout) == 24, "ma_lpf_heap_layout has size % instead of 24", size_of(ma_lpf_heap_layout));
    }

    {
        instance: ma_hpf1_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_hpf1_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1_heap_layout.sizeInBytes)) == 8, "ma_hpf1_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_hpf1_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.r1Offset)) - cast(*void)(*instance)) == 8, "ma_hpf1_heap_layout.r1Offset has unexpected offset % instead of 8", ((cast(*void)(*instance.r1Offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf1_heap_layout.r1Offset)) == 8, "ma_hpf1_heap_layout.r1Offset has unexpected size % instead of 8", size_of(type_of(ma_hpf1_heap_layout.r1Offset)));
        assert(size_of(ma_hpf1_heap_layout) == 16, "ma_hpf1_heap_layout has size % instead of 16", size_of(ma_hpf1_heap_layout));
    }

    {
        instance: ma_hpf_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_hpf_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_heap_layout.sizeInBytes)) == 8, "ma_hpf_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_hpf_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.hpf1Offset)) - cast(*void)(*instance)) == 8, "ma_hpf_heap_layout.hpf1Offset has unexpected offset % instead of 8", ((cast(*void)(*instance.hpf1Offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_heap_layout.hpf1Offset)) == 8, "ma_hpf_heap_layout.hpf1Offset has unexpected size % instead of 8", size_of(type_of(ma_hpf_heap_layout.hpf1Offset)));
        assert(((cast(*void)(*instance.hpf2Offset)) - cast(*void)(*instance)) == 16, "ma_hpf_heap_layout.hpf2Offset has unexpected offset % instead of 16", ((cast(*void)(*instance.hpf2Offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_hpf_heap_layout.hpf2Offset)) == 8, "ma_hpf_heap_layout.hpf2Offset has unexpected size % instead of 8", size_of(type_of(ma_hpf_heap_layout.hpf2Offset)));
        assert(size_of(ma_hpf_heap_layout) == 24, "ma_hpf_heap_layout has size % instead of 24", size_of(ma_hpf_heap_layout));
    }

    {
        instance: ma_bpf_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_bpf_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf_heap_layout.sizeInBytes)) == 8, "ma_bpf_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_bpf_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.bpf2Offset)) - cast(*void)(*instance)) == 8, "ma_bpf_heap_layout.bpf2Offset has unexpected offset % instead of 8", ((cast(*void)(*instance.bpf2Offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_bpf_heap_layout.bpf2Offset)) == 8, "ma_bpf_heap_layout.bpf2Offset has unexpected size % instead of 8", size_of(type_of(ma_bpf_heap_layout.bpf2Offset)));
        assert(size_of(ma_bpf_heap_layout) == 16, "ma_bpf_heap_layout has size % instead of 16", size_of(ma_bpf_heap_layout));
    }

    {
        instance: ma_gainer_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_gainer_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer_heap_layout.sizeInBytes)) == 8, "ma_gainer_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_gainer_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.oldGainsOffset)) - cast(*void)(*instance)) == 8, "ma_gainer_heap_layout.oldGainsOffset has unexpected offset % instead of 8", ((cast(*void)(*instance.oldGainsOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer_heap_layout.oldGainsOffset)) == 8, "ma_gainer_heap_layout.oldGainsOffset has unexpected size % instead of 8", size_of(type_of(ma_gainer_heap_layout.oldGainsOffset)));
        assert(((cast(*void)(*instance.newGainsOffset)) - cast(*void)(*instance)) == 16, "ma_gainer_heap_layout.newGainsOffset has unexpected offset % instead of 16", ((cast(*void)(*instance.newGainsOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_gainer_heap_layout.newGainsOffset)) == 8, "ma_gainer_heap_layout.newGainsOffset has unexpected size % instead of 8", size_of(type_of(ma_gainer_heap_layout.newGainsOffset)));
        assert(size_of(ma_gainer_heap_layout) == 24, "ma_gainer_heap_layout has size % instead of 24", size_of(ma_gainer_heap_layout));
    }

    {
        instance: ma_spatializer_listener_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_spatializer_listener_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener_heap_layout.sizeInBytes)) == 8, "ma_spatializer_listener_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_spatializer_listener_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.channelMapOutOffset)) - cast(*void)(*instance)) == 8, "ma_spatializer_listener_heap_layout.channelMapOutOffset has unexpected offset % instead of 8", ((cast(*void)(*instance.channelMapOutOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_listener_heap_layout.channelMapOutOffset)) == 8, "ma_spatializer_listener_heap_layout.channelMapOutOffset has unexpected size % instead of 8", size_of(type_of(ma_spatializer_listener_heap_layout.channelMapOutOffset)));
        assert(size_of(ma_spatializer_listener_heap_layout) == 16, "ma_spatializer_listener_heap_layout has size % instead of 16", size_of(ma_spatializer_listener_heap_layout));
    }

    {
        instance: ma_spatializer_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_spatializer_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_heap_layout.sizeInBytes)) == 8, "ma_spatializer_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_spatializer_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.channelMapInOffset)) - cast(*void)(*instance)) == 8, "ma_spatializer_heap_layout.channelMapInOffset has unexpected offset % instead of 8", ((cast(*void)(*instance.channelMapInOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_heap_layout.channelMapInOffset)) == 8, "ma_spatializer_heap_layout.channelMapInOffset has unexpected size % instead of 8", size_of(type_of(ma_spatializer_heap_layout.channelMapInOffset)));
        assert(((cast(*void)(*instance.newChannelGainsOffset)) - cast(*void)(*instance)) == 16, "ma_spatializer_heap_layout.newChannelGainsOffset has unexpected offset % instead of 16", ((cast(*void)(*instance.newChannelGainsOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_heap_layout.newChannelGainsOffset)) == 8, "ma_spatializer_heap_layout.newChannelGainsOffset has unexpected size % instead of 8", size_of(type_of(ma_spatializer_heap_layout.newChannelGainsOffset)));
        assert(((cast(*void)(*instance.gainerOffset)) - cast(*void)(*instance)) == 24, "ma_spatializer_heap_layout.gainerOffset has unexpected offset % instead of 24", ((cast(*void)(*instance.gainerOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_spatializer_heap_layout.gainerOffset)) == 8, "ma_spatializer_heap_layout.gainerOffset has unexpected size % instead of 8", size_of(type_of(ma_spatializer_heap_layout.gainerOffset)));
        assert(size_of(ma_spatializer_heap_layout) == 32, "ma_spatializer_heap_layout has size % instead of 32", size_of(ma_spatializer_heap_layout));
    }

    {
        instance: ma_linear_resampler_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_linear_resampler_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler_heap_layout.sizeInBytes)) == 8, "ma_linear_resampler_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_linear_resampler_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.x0Offset)) - cast(*void)(*instance)) == 8, "ma_linear_resampler_heap_layout.x0Offset has unexpected offset % instead of 8", ((cast(*void)(*instance.x0Offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler_heap_layout.x0Offset)) == 8, "ma_linear_resampler_heap_layout.x0Offset has unexpected size % instead of 8", size_of(type_of(ma_linear_resampler_heap_layout.x0Offset)));
        assert(((cast(*void)(*instance.x1Offset)) - cast(*void)(*instance)) == 16, "ma_linear_resampler_heap_layout.x1Offset has unexpected offset % instead of 16", ((cast(*void)(*instance.x1Offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler_heap_layout.x1Offset)) == 8, "ma_linear_resampler_heap_layout.x1Offset has unexpected size % instead of 8", size_of(type_of(ma_linear_resampler_heap_layout.x1Offset)));
        assert(((cast(*void)(*instance.lpfOffset)) - cast(*void)(*instance)) == 24, "ma_linear_resampler_heap_layout.lpfOffset has unexpected offset % instead of 24", ((cast(*void)(*instance.lpfOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_linear_resampler_heap_layout.lpfOffset)) == 8, "ma_linear_resampler_heap_layout.lpfOffset has unexpected size % instead of 8", size_of(type_of(ma_linear_resampler_heap_layout.lpfOffset)));
        assert(size_of(ma_linear_resampler_heap_layout) == 32, "ma_linear_resampler_heap_layout has size % instead of 32", size_of(ma_linear_resampler_heap_layout));
    }

    {
        instance: ma_channel_converter_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_channel_converter_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_heap_layout.sizeInBytes)) == 8, "ma_channel_converter_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_channel_converter_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.channelMapInOffset)) - cast(*void)(*instance)) == 8, "ma_channel_converter_heap_layout.channelMapInOffset has unexpected offset % instead of 8", ((cast(*void)(*instance.channelMapInOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_heap_layout.channelMapInOffset)) == 8, "ma_channel_converter_heap_layout.channelMapInOffset has unexpected size % instead of 8", size_of(type_of(ma_channel_converter_heap_layout.channelMapInOffset)));
        assert(((cast(*void)(*instance.channelMapOutOffset)) - cast(*void)(*instance)) == 16, "ma_channel_converter_heap_layout.channelMapOutOffset has unexpected offset % instead of 16", ((cast(*void)(*instance.channelMapOutOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_heap_layout.channelMapOutOffset)) == 8, "ma_channel_converter_heap_layout.channelMapOutOffset has unexpected size % instead of 8", size_of(type_of(ma_channel_converter_heap_layout.channelMapOutOffset)));
        assert(((cast(*void)(*instance.shuffleTableOffset)) - cast(*void)(*instance)) == 24, "ma_channel_converter_heap_layout.shuffleTableOffset has unexpected offset % instead of 24", ((cast(*void)(*instance.shuffleTableOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_heap_layout.shuffleTableOffset)) == 8, "ma_channel_converter_heap_layout.shuffleTableOffset has unexpected size % instead of 8", size_of(type_of(ma_channel_converter_heap_layout.shuffleTableOffset)));
        assert(((cast(*void)(*instance.weightsOffset)) - cast(*void)(*instance)) == 32, "ma_channel_converter_heap_layout.weightsOffset has unexpected offset % instead of 32", ((cast(*void)(*instance.weightsOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_channel_converter_heap_layout.weightsOffset)) == 8, "ma_channel_converter_heap_layout.weightsOffset has unexpected size % instead of 8", size_of(type_of(ma_channel_converter_heap_layout.weightsOffset)));
        assert(size_of(ma_channel_converter_heap_layout) == 40, "ma_channel_converter_heap_layout has size % instead of 40", size_of(ma_channel_converter_heap_layout));
    }

    {
        instance: ma_data_converter_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_data_converter_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_heap_layout.sizeInBytes)) == 8, "ma_data_converter_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_data_converter_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.channelConverterOffset)) - cast(*void)(*instance)) == 8, "ma_data_converter_heap_layout.channelConverterOffset has unexpected offset % instead of 8", ((cast(*void)(*instance.channelConverterOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_heap_layout.channelConverterOffset)) == 8, "ma_data_converter_heap_layout.channelConverterOffset has unexpected size % instead of 8", size_of(type_of(ma_data_converter_heap_layout.channelConverterOffset)));
        assert(((cast(*void)(*instance.resamplerOffset)) - cast(*void)(*instance)) == 16, "ma_data_converter_heap_layout.resamplerOffset has unexpected offset % instead of 16", ((cast(*void)(*instance.resamplerOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_data_converter_heap_layout.resamplerOffset)) == 8, "ma_data_converter_heap_layout.resamplerOffset has unexpected size % instead of 8", size_of(type_of(ma_data_converter_heap_layout.resamplerOffset)));
        assert(size_of(ma_data_converter_heap_layout) == 24, "ma_data_converter_heap_layout has size % instead of 24", size_of(ma_data_converter_heap_layout));
    }

    {
        instance: ma_dr_wav_chunk_header;
        assert(((cast(*void)(*instance.id)) - cast(*void)(*instance)) == 0, "ma_dr_wav_chunk_header.id has unexpected offset % instead of 0", ((cast(*void)(*instance.id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_chunk_header.id)) == 16, "ma_dr_wav_chunk_header.id has unexpected size % instead of 16", size_of(type_of(ma_dr_wav_chunk_header.id)));
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 16, "ma_dr_wav_chunk_header.sizeInBytes has unexpected offset % instead of 16", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_chunk_header.sizeInBytes)) == 8, "ma_dr_wav_chunk_header.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_chunk_header.sizeInBytes)));
        assert(((cast(*void)(*instance.paddingSize)) - cast(*void)(*instance)) == 24, "ma_dr_wav_chunk_header.paddingSize has unexpected offset % instead of 24", ((cast(*void)(*instance.paddingSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_chunk_header.paddingSize)) == 4, "ma_dr_wav_chunk_header.paddingSize has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_chunk_header.paddingSize)));
        assert(size_of(ma_dr_wav_chunk_header) == 32, "ma_dr_wav_chunk_header has size % instead of 32", size_of(ma_dr_wav_chunk_header));
    }

    {
        instance: ma_dr_wav_fmt;
        assert(((cast(*void)(*instance.formatTag)) - cast(*void)(*instance)) == 0, "ma_dr_wav_fmt.formatTag has unexpected offset % instead of 0", ((cast(*void)(*instance.formatTag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_fmt.formatTag)) == 2, "ma_dr_wav_fmt.formatTag has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_fmt.formatTag)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 2, "ma_dr_wav_fmt.channels has unexpected offset % instead of 2", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_fmt.channels)) == 2, "ma_dr_wav_fmt.channels has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_fmt.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 4, "ma_dr_wav_fmt.sampleRate has unexpected offset % instead of 4", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_fmt.sampleRate)) == 4, "ma_dr_wav_fmt.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_fmt.sampleRate)));
        assert(((cast(*void)(*instance.avgBytesPerSec)) - cast(*void)(*instance)) == 8, "ma_dr_wav_fmt.avgBytesPerSec has unexpected offset % instead of 8", ((cast(*void)(*instance.avgBytesPerSec)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_fmt.avgBytesPerSec)) == 4, "ma_dr_wav_fmt.avgBytesPerSec has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_fmt.avgBytesPerSec)));
        assert(((cast(*void)(*instance.blockAlign)) - cast(*void)(*instance)) == 12, "ma_dr_wav_fmt.blockAlign has unexpected offset % instead of 12", ((cast(*void)(*instance.blockAlign)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_fmt.blockAlign)) == 2, "ma_dr_wav_fmt.blockAlign has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_fmt.blockAlign)));
        assert(((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)) == 14, "ma_dr_wav_fmt.bitsPerSample has unexpected offset % instead of 14", ((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_fmt.bitsPerSample)) == 2, "ma_dr_wav_fmt.bitsPerSample has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_fmt.bitsPerSample)));
        assert(((cast(*void)(*instance.extendedSize)) - cast(*void)(*instance)) == 16, "ma_dr_wav_fmt.extendedSize has unexpected offset % instead of 16", ((cast(*void)(*instance.extendedSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_fmt.extendedSize)) == 2, "ma_dr_wav_fmt.extendedSize has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_fmt.extendedSize)));
        assert(((cast(*void)(*instance.validBitsPerSample)) - cast(*void)(*instance)) == 18, "ma_dr_wav_fmt.validBitsPerSample has unexpected offset % instead of 18", ((cast(*void)(*instance.validBitsPerSample)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_fmt.validBitsPerSample)) == 2, "ma_dr_wav_fmt.validBitsPerSample has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_fmt.validBitsPerSample)));
        assert(((cast(*void)(*instance.channelMask)) - cast(*void)(*instance)) == 20, "ma_dr_wav_fmt.channelMask has unexpected offset % instead of 20", ((cast(*void)(*instance.channelMask)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_fmt.channelMask)) == 4, "ma_dr_wav_fmt.channelMask has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_fmt.channelMask)));
        assert(((cast(*void)(*instance.subFormat)) - cast(*void)(*instance)) == 24, "ma_dr_wav_fmt.subFormat has unexpected offset % instead of 24", ((cast(*void)(*instance.subFormat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_fmt.subFormat)) == 16, "ma_dr_wav_fmt.subFormat has unexpected size % instead of 16", size_of(type_of(ma_dr_wav_fmt.subFormat)));
        assert(size_of(ma_dr_wav_fmt) == 40, "ma_dr_wav_fmt has size % instead of 40", size_of(ma_dr_wav_fmt));
    }

    {
        instance: ma_dr_wav__memory_stream;
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 0, "ma_dr_wav__memory_stream.data has unexpected offset % instead of 0", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__memory_stream.data)) == 8, "ma_dr_wav__memory_stream.data has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__memory_stream.data)));
        assert(((cast(*void)(*instance.dataSize)) - cast(*void)(*instance)) == 8, "ma_dr_wav__memory_stream.dataSize has unexpected offset % instead of 8", ((cast(*void)(*instance.dataSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__memory_stream.dataSize)) == 8, "ma_dr_wav__memory_stream.dataSize has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__memory_stream.dataSize)));
        assert(((cast(*void)(*instance.currentReadPos)) - cast(*void)(*instance)) == 16, "ma_dr_wav__memory_stream.currentReadPos has unexpected offset % instead of 16", ((cast(*void)(*instance.currentReadPos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__memory_stream.currentReadPos)) == 8, "ma_dr_wav__memory_stream.currentReadPos has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__memory_stream.currentReadPos)));
        assert(size_of(ma_dr_wav__memory_stream) == 24, "ma_dr_wav__memory_stream has size % instead of 24", size_of(ma_dr_wav__memory_stream));
    }

    {
        instance: ma_dr_wav__memory_stream_write;
        assert(((cast(*void)(*instance.ppData)) - cast(*void)(*instance)) == 0, "ma_dr_wav__memory_stream_write.ppData has unexpected offset % instead of 0", ((cast(*void)(*instance.ppData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__memory_stream_write.ppData)) == 8, "ma_dr_wav__memory_stream_write.ppData has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__memory_stream_write.ppData)));
        assert(((cast(*void)(*instance.pDataSize)) - cast(*void)(*instance)) == 8, "ma_dr_wav__memory_stream_write.pDataSize has unexpected offset % instead of 8", ((cast(*void)(*instance.pDataSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__memory_stream_write.pDataSize)) == 8, "ma_dr_wav__memory_stream_write.pDataSize has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__memory_stream_write.pDataSize)));
        assert(((cast(*void)(*instance.dataSize)) - cast(*void)(*instance)) == 16, "ma_dr_wav__memory_stream_write.dataSize has unexpected offset % instead of 16", ((cast(*void)(*instance.dataSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__memory_stream_write.dataSize)) == 8, "ma_dr_wav__memory_stream_write.dataSize has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__memory_stream_write.dataSize)));
        assert(((cast(*void)(*instance.dataCapacity)) - cast(*void)(*instance)) == 24, "ma_dr_wav__memory_stream_write.dataCapacity has unexpected offset % instead of 24", ((cast(*void)(*instance.dataCapacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__memory_stream_write.dataCapacity)) == 8, "ma_dr_wav__memory_stream_write.dataCapacity has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__memory_stream_write.dataCapacity)));
        assert(((cast(*void)(*instance.currentWritePos)) - cast(*void)(*instance)) == 32, "ma_dr_wav__memory_stream_write.currentWritePos has unexpected offset % instead of 32", ((cast(*void)(*instance.currentWritePos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__memory_stream_write.currentWritePos)) == 8, "ma_dr_wav__memory_stream_write.currentWritePos has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__memory_stream_write.currentWritePos)));
        assert(size_of(ma_dr_wav__memory_stream_write) == 40, "ma_dr_wav__memory_stream_write has size % instead of 40", size_of(ma_dr_wav__memory_stream_write));
    }

    {
        instance: ma_dr_wav_data_format;
        assert(((cast(*void)(*instance.container)) - cast(*void)(*instance)) == 0, "ma_dr_wav_data_format.container has unexpected offset % instead of 0", ((cast(*void)(*instance.container)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_data_format.container)) == 4, "ma_dr_wav_data_format.container has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_data_format.container)));
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 4, "ma_dr_wav_data_format.format has unexpected offset % instead of 4", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_data_format.format)) == 4, "ma_dr_wav_data_format.format has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_data_format.format)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 8, "ma_dr_wav_data_format.channels has unexpected offset % instead of 8", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_data_format.channels)) == 4, "ma_dr_wav_data_format.channels has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_data_format.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 12, "ma_dr_wav_data_format.sampleRate has unexpected offset % instead of 12", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_data_format.sampleRate)) == 4, "ma_dr_wav_data_format.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_data_format.sampleRate)));
        assert(((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)) == 16, "ma_dr_wav_data_format.bitsPerSample has unexpected offset % instead of 16", ((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_data_format.bitsPerSample)) == 4, "ma_dr_wav_data_format.bitsPerSample has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_data_format.bitsPerSample)));
        assert(size_of(ma_dr_wav_data_format) == 20, "ma_dr_wav_data_format has size % instead of 20", size_of(ma_dr_wav_data_format));
    }

    {
        instance: ma_dr_wav_smpl_loop;
        assert(((cast(*void)(*instance.cuePointId)) - cast(*void)(*instance)) == 0, "ma_dr_wav_smpl_loop.cuePointId has unexpected offset % instead of 0", ((cast(*void)(*instance.cuePointId)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl_loop.cuePointId)) == 4, "ma_dr_wav_smpl_loop.cuePointId has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl_loop.cuePointId)));
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 4, "ma_dr_wav_smpl_loop.type has unexpected offset % instead of 4", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl_loop.type)) == 4, "ma_dr_wav_smpl_loop.type has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl_loop.type)));
        assert(((cast(*void)(*instance.firstSampleByteOffset)) - cast(*void)(*instance)) == 8, "ma_dr_wav_smpl_loop.firstSampleByteOffset has unexpected offset % instead of 8", ((cast(*void)(*instance.firstSampleByteOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl_loop.firstSampleByteOffset)) == 4, "ma_dr_wav_smpl_loop.firstSampleByteOffset has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl_loop.firstSampleByteOffset)));
        assert(((cast(*void)(*instance.lastSampleByteOffset)) - cast(*void)(*instance)) == 12, "ma_dr_wav_smpl_loop.lastSampleByteOffset has unexpected offset % instead of 12", ((cast(*void)(*instance.lastSampleByteOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl_loop.lastSampleByteOffset)) == 4, "ma_dr_wav_smpl_loop.lastSampleByteOffset has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl_loop.lastSampleByteOffset)));
        assert(((cast(*void)(*instance.sampleFraction)) - cast(*void)(*instance)) == 16, "ma_dr_wav_smpl_loop.sampleFraction has unexpected offset % instead of 16", ((cast(*void)(*instance.sampleFraction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl_loop.sampleFraction)) == 4, "ma_dr_wav_smpl_loop.sampleFraction has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl_loop.sampleFraction)));
        assert(((cast(*void)(*instance.playCount)) - cast(*void)(*instance)) == 20, "ma_dr_wav_smpl_loop.playCount has unexpected offset % instead of 20", ((cast(*void)(*instance.playCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl_loop.playCount)) == 4, "ma_dr_wav_smpl_loop.playCount has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl_loop.playCount)));
        assert(size_of(ma_dr_wav_smpl_loop) == 24, "ma_dr_wav_smpl_loop has size % instead of 24", size_of(ma_dr_wav_smpl_loop));
    }

    {
        instance: ma_dr_wav_smpl;
        assert(((cast(*void)(*instance.manufacturerId)) - cast(*void)(*instance)) == 0, "ma_dr_wav_smpl.manufacturerId has unexpected offset % instead of 0", ((cast(*void)(*instance.manufacturerId)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl.manufacturerId)) == 4, "ma_dr_wav_smpl.manufacturerId has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl.manufacturerId)));
        assert(((cast(*void)(*instance.productId)) - cast(*void)(*instance)) == 4, "ma_dr_wav_smpl.productId has unexpected offset % instead of 4", ((cast(*void)(*instance.productId)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl.productId)) == 4, "ma_dr_wav_smpl.productId has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl.productId)));
        assert(((cast(*void)(*instance.samplePeriodNanoseconds)) - cast(*void)(*instance)) == 8, "ma_dr_wav_smpl.samplePeriodNanoseconds has unexpected offset % instead of 8", ((cast(*void)(*instance.samplePeriodNanoseconds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl.samplePeriodNanoseconds)) == 4, "ma_dr_wav_smpl.samplePeriodNanoseconds has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl.samplePeriodNanoseconds)));
        assert(((cast(*void)(*instance.midiUnityNote)) - cast(*void)(*instance)) == 12, "ma_dr_wav_smpl.midiUnityNote has unexpected offset % instead of 12", ((cast(*void)(*instance.midiUnityNote)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl.midiUnityNote)) == 4, "ma_dr_wav_smpl.midiUnityNote has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl.midiUnityNote)));
        assert(((cast(*void)(*instance.midiPitchFraction)) - cast(*void)(*instance)) == 16, "ma_dr_wav_smpl.midiPitchFraction has unexpected offset % instead of 16", ((cast(*void)(*instance.midiPitchFraction)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl.midiPitchFraction)) == 4, "ma_dr_wav_smpl.midiPitchFraction has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl.midiPitchFraction)));
        assert(((cast(*void)(*instance.smpteFormat)) - cast(*void)(*instance)) == 20, "ma_dr_wav_smpl.smpteFormat has unexpected offset % instead of 20", ((cast(*void)(*instance.smpteFormat)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl.smpteFormat)) == 4, "ma_dr_wav_smpl.smpteFormat has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl.smpteFormat)));
        assert(((cast(*void)(*instance.smpteOffset)) - cast(*void)(*instance)) == 24, "ma_dr_wav_smpl.smpteOffset has unexpected offset % instead of 24", ((cast(*void)(*instance.smpteOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl.smpteOffset)) == 4, "ma_dr_wav_smpl.smpteOffset has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl.smpteOffset)));
        assert(((cast(*void)(*instance.sampleLoopCount)) - cast(*void)(*instance)) == 28, "ma_dr_wav_smpl.sampleLoopCount has unexpected offset % instead of 28", ((cast(*void)(*instance.sampleLoopCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl.sampleLoopCount)) == 4, "ma_dr_wav_smpl.sampleLoopCount has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl.sampleLoopCount)));
        assert(((cast(*void)(*instance.samplerSpecificDataSizeInBytes)) - cast(*void)(*instance)) == 32, "ma_dr_wav_smpl.samplerSpecificDataSizeInBytes has unexpected offset % instead of 32", ((cast(*void)(*instance.samplerSpecificDataSizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl.samplerSpecificDataSizeInBytes)) == 4, "ma_dr_wav_smpl.samplerSpecificDataSizeInBytes has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_smpl.samplerSpecificDataSizeInBytes)));
        assert(((cast(*void)(*instance.pLoops)) - cast(*void)(*instance)) == 40, "ma_dr_wav_smpl.pLoops has unexpected offset % instead of 40", ((cast(*void)(*instance.pLoops)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl.pLoops)) == 8, "ma_dr_wav_smpl.pLoops has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_smpl.pLoops)));
        assert(((cast(*void)(*instance.pSamplerSpecificData)) - cast(*void)(*instance)) == 48, "ma_dr_wav_smpl.pSamplerSpecificData has unexpected offset % instead of 48", ((cast(*void)(*instance.pSamplerSpecificData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_smpl.pSamplerSpecificData)) == 8, "ma_dr_wav_smpl.pSamplerSpecificData has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_smpl.pSamplerSpecificData)));
        assert(size_of(ma_dr_wav_smpl) == 56, "ma_dr_wav_smpl has size % instead of 56", size_of(ma_dr_wav_smpl));
    }

    {
        instance: ma_dr_wav_inst;
        assert(((cast(*void)(*instance.midiUnityNote)) - cast(*void)(*instance)) == 0, "ma_dr_wav_inst.midiUnityNote has unexpected offset % instead of 0", ((cast(*void)(*instance.midiUnityNote)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_inst.midiUnityNote)) == 1, "ma_dr_wav_inst.midiUnityNote has unexpected size % instead of 1", size_of(type_of(ma_dr_wav_inst.midiUnityNote)));
        assert(((cast(*void)(*instance.fineTuneCents)) - cast(*void)(*instance)) == 1, "ma_dr_wav_inst.fineTuneCents has unexpected offset % instead of 1", ((cast(*void)(*instance.fineTuneCents)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_inst.fineTuneCents)) == 1, "ma_dr_wav_inst.fineTuneCents has unexpected size % instead of 1", size_of(type_of(ma_dr_wav_inst.fineTuneCents)));
        assert(((cast(*void)(*instance.gainDecibels)) - cast(*void)(*instance)) == 2, "ma_dr_wav_inst.gainDecibels has unexpected offset % instead of 2", ((cast(*void)(*instance.gainDecibels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_inst.gainDecibels)) == 1, "ma_dr_wav_inst.gainDecibels has unexpected size % instead of 1", size_of(type_of(ma_dr_wav_inst.gainDecibels)));
        assert(((cast(*void)(*instance.lowNote)) - cast(*void)(*instance)) == 3, "ma_dr_wav_inst.lowNote has unexpected offset % instead of 3", ((cast(*void)(*instance.lowNote)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_inst.lowNote)) == 1, "ma_dr_wav_inst.lowNote has unexpected size % instead of 1", size_of(type_of(ma_dr_wav_inst.lowNote)));
        assert(((cast(*void)(*instance.highNote)) - cast(*void)(*instance)) == 4, "ma_dr_wav_inst.highNote has unexpected offset % instead of 4", ((cast(*void)(*instance.highNote)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_inst.highNote)) == 1, "ma_dr_wav_inst.highNote has unexpected size % instead of 1", size_of(type_of(ma_dr_wav_inst.highNote)));
        assert(((cast(*void)(*instance.lowVelocity)) - cast(*void)(*instance)) == 5, "ma_dr_wav_inst.lowVelocity has unexpected offset % instead of 5", ((cast(*void)(*instance.lowVelocity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_inst.lowVelocity)) == 1, "ma_dr_wav_inst.lowVelocity has unexpected size % instead of 1", size_of(type_of(ma_dr_wav_inst.lowVelocity)));
        assert(((cast(*void)(*instance.highVelocity)) - cast(*void)(*instance)) == 6, "ma_dr_wav_inst.highVelocity has unexpected offset % instead of 6", ((cast(*void)(*instance.highVelocity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_inst.highVelocity)) == 1, "ma_dr_wav_inst.highVelocity has unexpected size % instead of 1", size_of(type_of(ma_dr_wav_inst.highVelocity)));
        assert(size_of(ma_dr_wav_inst) == 7, "ma_dr_wav_inst has size % instead of 7", size_of(ma_dr_wav_inst));
    }

    {
        instance: ma_dr_wav_cue_point;
        assert(((cast(*void)(*instance.id)) - cast(*void)(*instance)) == 0, "ma_dr_wav_cue_point.id has unexpected offset % instead of 0", ((cast(*void)(*instance.id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_cue_point.id)) == 4, "ma_dr_wav_cue_point.id has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_cue_point.id)));
        assert(((cast(*void)(*instance.playOrderPosition)) - cast(*void)(*instance)) == 4, "ma_dr_wav_cue_point.playOrderPosition has unexpected offset % instead of 4", ((cast(*void)(*instance.playOrderPosition)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_cue_point.playOrderPosition)) == 4, "ma_dr_wav_cue_point.playOrderPosition has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_cue_point.playOrderPosition)));
        assert(((cast(*void)(*instance.dataChunkId)) - cast(*void)(*instance)) == 8, "ma_dr_wav_cue_point.dataChunkId has unexpected offset % instead of 8", ((cast(*void)(*instance.dataChunkId)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_cue_point.dataChunkId)) == 4, "ma_dr_wav_cue_point.dataChunkId has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_cue_point.dataChunkId)));
        assert(((cast(*void)(*instance.chunkStart)) - cast(*void)(*instance)) == 12, "ma_dr_wav_cue_point.chunkStart has unexpected offset % instead of 12", ((cast(*void)(*instance.chunkStart)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_cue_point.chunkStart)) == 4, "ma_dr_wav_cue_point.chunkStart has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_cue_point.chunkStart)));
        assert(((cast(*void)(*instance.blockStart)) - cast(*void)(*instance)) == 16, "ma_dr_wav_cue_point.blockStart has unexpected offset % instead of 16", ((cast(*void)(*instance.blockStart)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_cue_point.blockStart)) == 4, "ma_dr_wav_cue_point.blockStart has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_cue_point.blockStart)));
        assert(((cast(*void)(*instance.sampleByteOffset)) - cast(*void)(*instance)) == 20, "ma_dr_wav_cue_point.sampleByteOffset has unexpected offset % instead of 20", ((cast(*void)(*instance.sampleByteOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_cue_point.sampleByteOffset)) == 4, "ma_dr_wav_cue_point.sampleByteOffset has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_cue_point.sampleByteOffset)));
        assert(size_of(ma_dr_wav_cue_point) == 24, "ma_dr_wav_cue_point has size % instead of 24", size_of(ma_dr_wav_cue_point));
    }

    {
        instance: ma_dr_wav_cue;
        assert(((cast(*void)(*instance.cuePointCount)) - cast(*void)(*instance)) == 0, "ma_dr_wav_cue.cuePointCount has unexpected offset % instead of 0", ((cast(*void)(*instance.cuePointCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_cue.cuePointCount)) == 4, "ma_dr_wav_cue.cuePointCount has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_cue.cuePointCount)));
        assert(((cast(*void)(*instance.pCuePoints)) - cast(*void)(*instance)) == 8, "ma_dr_wav_cue.pCuePoints has unexpected offset % instead of 8", ((cast(*void)(*instance.pCuePoints)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_cue.pCuePoints)) == 8, "ma_dr_wav_cue.pCuePoints has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_cue.pCuePoints)));
        assert(size_of(ma_dr_wav_cue) == 16, "ma_dr_wav_cue has size % instead of 16", size_of(ma_dr_wav_cue));
    }

    {
        instance: ma_dr_wav_acid;
        assert(((cast(*void)(*instance.flags)) - cast(*void)(*instance)) == 0, "ma_dr_wav_acid.flags has unexpected offset % instead of 0", ((cast(*void)(*instance.flags)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_acid.flags)) == 4, "ma_dr_wav_acid.flags has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_acid.flags)));
        assert(((cast(*void)(*instance.midiUnityNote)) - cast(*void)(*instance)) == 4, "ma_dr_wav_acid.midiUnityNote has unexpected offset % instead of 4", ((cast(*void)(*instance.midiUnityNote)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_acid.midiUnityNote)) == 2, "ma_dr_wav_acid.midiUnityNote has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_acid.midiUnityNote)));
        assert(((cast(*void)(*instance.reserved1)) - cast(*void)(*instance)) == 6, "ma_dr_wav_acid.reserved1 has unexpected offset % instead of 6", ((cast(*void)(*instance.reserved1)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_acid.reserved1)) == 2, "ma_dr_wav_acid.reserved1 has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_acid.reserved1)));
        assert(((cast(*void)(*instance.reserved2)) - cast(*void)(*instance)) == 8, "ma_dr_wav_acid.reserved2 has unexpected offset % instead of 8", ((cast(*void)(*instance.reserved2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_acid.reserved2)) == 4, "ma_dr_wav_acid.reserved2 has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_acid.reserved2)));
        assert(((cast(*void)(*instance.numBeats)) - cast(*void)(*instance)) == 12, "ma_dr_wav_acid.numBeats has unexpected offset % instead of 12", ((cast(*void)(*instance.numBeats)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_acid.numBeats)) == 4, "ma_dr_wav_acid.numBeats has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_acid.numBeats)));
        assert(((cast(*void)(*instance.meterDenominator)) - cast(*void)(*instance)) == 16, "ma_dr_wav_acid.meterDenominator has unexpected offset % instead of 16", ((cast(*void)(*instance.meterDenominator)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_acid.meterDenominator)) == 2, "ma_dr_wav_acid.meterDenominator has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_acid.meterDenominator)));
        assert(((cast(*void)(*instance.meterNumerator)) - cast(*void)(*instance)) == 18, "ma_dr_wav_acid.meterNumerator has unexpected offset % instead of 18", ((cast(*void)(*instance.meterNumerator)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_acid.meterNumerator)) == 2, "ma_dr_wav_acid.meterNumerator has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_acid.meterNumerator)));
        assert(((cast(*void)(*instance.tempo)) - cast(*void)(*instance)) == 20, "ma_dr_wav_acid.tempo has unexpected offset % instead of 20", ((cast(*void)(*instance.tempo)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_acid.tempo)) == 4, "ma_dr_wav_acid.tempo has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_acid.tempo)));
        assert(size_of(ma_dr_wav_acid) == 24, "ma_dr_wav_acid has size % instead of 24", size_of(ma_dr_wav_acid));
    }

    {
        instance: ma_dr_wav_list_label_or_note;
        assert(((cast(*void)(*instance.cuePointId)) - cast(*void)(*instance)) == 0, "ma_dr_wav_list_label_or_note.cuePointId has unexpected offset % instead of 0", ((cast(*void)(*instance.cuePointId)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_label_or_note.cuePointId)) == 4, "ma_dr_wav_list_label_or_note.cuePointId has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_list_label_or_note.cuePointId)));
        assert(((cast(*void)(*instance.stringLength)) - cast(*void)(*instance)) == 4, "ma_dr_wav_list_label_or_note.stringLength has unexpected offset % instead of 4", ((cast(*void)(*instance.stringLength)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_label_or_note.stringLength)) == 4, "ma_dr_wav_list_label_or_note.stringLength has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_list_label_or_note.stringLength)));
        assert(((cast(*void)(*instance.pString)) - cast(*void)(*instance)) == 8, "ma_dr_wav_list_label_or_note.pString has unexpected offset % instead of 8", ((cast(*void)(*instance.pString)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_label_or_note.pString)) == 8, "ma_dr_wav_list_label_or_note.pString has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_list_label_or_note.pString)));
        assert(size_of(ma_dr_wav_list_label_or_note) == 16, "ma_dr_wav_list_label_or_note has size % instead of 16", size_of(ma_dr_wav_list_label_or_note));
    }

    {
        instance: ma_dr_wav_bext;
        assert(((cast(*void)(*instance.pDescription)) - cast(*void)(*instance)) == 0, "ma_dr_wav_bext.pDescription has unexpected offset % instead of 0", ((cast(*void)(*instance.pDescription)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.pDescription)) == 8, "ma_dr_wav_bext.pDescription has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_bext.pDescription)));
        assert(((cast(*void)(*instance.pOriginatorName)) - cast(*void)(*instance)) == 8, "ma_dr_wav_bext.pOriginatorName has unexpected offset % instead of 8", ((cast(*void)(*instance.pOriginatorName)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.pOriginatorName)) == 8, "ma_dr_wav_bext.pOriginatorName has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_bext.pOriginatorName)));
        assert(((cast(*void)(*instance.pOriginatorReference)) - cast(*void)(*instance)) == 16, "ma_dr_wav_bext.pOriginatorReference has unexpected offset % instead of 16", ((cast(*void)(*instance.pOriginatorReference)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.pOriginatorReference)) == 8, "ma_dr_wav_bext.pOriginatorReference has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_bext.pOriginatorReference)));
        assert(((cast(*void)(*instance.pOriginationDate)) - cast(*void)(*instance)) == 24, "ma_dr_wav_bext.pOriginationDate has unexpected offset % instead of 24", ((cast(*void)(*instance.pOriginationDate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.pOriginationDate)) == 10, "ma_dr_wav_bext.pOriginationDate has unexpected size % instead of 10", size_of(type_of(ma_dr_wav_bext.pOriginationDate)));
        assert(((cast(*void)(*instance.pOriginationTime)) - cast(*void)(*instance)) == 34, "ma_dr_wav_bext.pOriginationTime has unexpected offset % instead of 34", ((cast(*void)(*instance.pOriginationTime)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.pOriginationTime)) == 8, "ma_dr_wav_bext.pOriginationTime has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_bext.pOriginationTime)));
        assert(((cast(*void)(*instance.timeReference)) - cast(*void)(*instance)) == 48, "ma_dr_wav_bext.timeReference has unexpected offset % instead of 48", ((cast(*void)(*instance.timeReference)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.timeReference)) == 8, "ma_dr_wav_bext.timeReference has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_bext.timeReference)));
        assert(((cast(*void)(*instance.version)) - cast(*void)(*instance)) == 56, "ma_dr_wav_bext.version has unexpected offset % instead of 56", ((cast(*void)(*instance.version)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.version)) == 2, "ma_dr_wav_bext.version has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_bext.version)));
        assert(((cast(*void)(*instance.pCodingHistory)) - cast(*void)(*instance)) == 64, "ma_dr_wav_bext.pCodingHistory has unexpected offset % instead of 64", ((cast(*void)(*instance.pCodingHistory)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.pCodingHistory)) == 8, "ma_dr_wav_bext.pCodingHistory has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_bext.pCodingHistory)));
        assert(((cast(*void)(*instance.codingHistorySize)) - cast(*void)(*instance)) == 72, "ma_dr_wav_bext.codingHistorySize has unexpected offset % instead of 72", ((cast(*void)(*instance.codingHistorySize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.codingHistorySize)) == 4, "ma_dr_wav_bext.codingHistorySize has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_bext.codingHistorySize)));
        assert(((cast(*void)(*instance.pUMID)) - cast(*void)(*instance)) == 80, "ma_dr_wav_bext.pUMID has unexpected offset % instead of 80", ((cast(*void)(*instance.pUMID)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.pUMID)) == 8, "ma_dr_wav_bext.pUMID has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_bext.pUMID)));
        assert(((cast(*void)(*instance.loudnessValue)) - cast(*void)(*instance)) == 88, "ma_dr_wav_bext.loudnessValue has unexpected offset % instead of 88", ((cast(*void)(*instance.loudnessValue)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.loudnessValue)) == 2, "ma_dr_wav_bext.loudnessValue has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_bext.loudnessValue)));
        assert(((cast(*void)(*instance.loudnessRange)) - cast(*void)(*instance)) == 90, "ma_dr_wav_bext.loudnessRange has unexpected offset % instead of 90", ((cast(*void)(*instance.loudnessRange)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.loudnessRange)) == 2, "ma_dr_wav_bext.loudnessRange has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_bext.loudnessRange)));
        assert(((cast(*void)(*instance.maxTruePeakLevel)) - cast(*void)(*instance)) == 92, "ma_dr_wav_bext.maxTruePeakLevel has unexpected offset % instead of 92", ((cast(*void)(*instance.maxTruePeakLevel)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.maxTruePeakLevel)) == 2, "ma_dr_wav_bext.maxTruePeakLevel has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_bext.maxTruePeakLevel)));
        assert(((cast(*void)(*instance.maxMomentaryLoudness)) - cast(*void)(*instance)) == 94, "ma_dr_wav_bext.maxMomentaryLoudness has unexpected offset % instead of 94", ((cast(*void)(*instance.maxMomentaryLoudness)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.maxMomentaryLoudness)) == 2, "ma_dr_wav_bext.maxMomentaryLoudness has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_bext.maxMomentaryLoudness)));
        assert(((cast(*void)(*instance.maxShortTermLoudness)) - cast(*void)(*instance)) == 96, "ma_dr_wav_bext.maxShortTermLoudness has unexpected offset % instead of 96", ((cast(*void)(*instance.maxShortTermLoudness)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_bext.maxShortTermLoudness)) == 2, "ma_dr_wav_bext.maxShortTermLoudness has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_bext.maxShortTermLoudness)));
        assert(size_of(ma_dr_wav_bext) == 104, "ma_dr_wav_bext has size % instead of 104", size_of(ma_dr_wav_bext));
    }

    {
        instance: ma_dr_wav_list_info_text;
        assert(((cast(*void)(*instance.stringLength)) - cast(*void)(*instance)) == 0, "ma_dr_wav_list_info_text.stringLength has unexpected offset % instead of 0", ((cast(*void)(*instance.stringLength)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_info_text.stringLength)) == 4, "ma_dr_wav_list_info_text.stringLength has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_list_info_text.stringLength)));
        assert(((cast(*void)(*instance.pString)) - cast(*void)(*instance)) == 8, "ma_dr_wav_list_info_text.pString has unexpected offset % instead of 8", ((cast(*void)(*instance.pString)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_info_text.pString)) == 8, "ma_dr_wav_list_info_text.pString has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_list_info_text.pString)));
        assert(size_of(ma_dr_wav_list_info_text) == 16, "ma_dr_wav_list_info_text has size % instead of 16", size_of(ma_dr_wav_list_info_text));
    }

    {
        instance: ma_dr_wav_list_labelled_cue_region;
        assert(((cast(*void)(*instance.cuePointId)) - cast(*void)(*instance)) == 0, "ma_dr_wav_list_labelled_cue_region.cuePointId has unexpected offset % instead of 0", ((cast(*void)(*instance.cuePointId)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_labelled_cue_region.cuePointId)) == 4, "ma_dr_wav_list_labelled_cue_region.cuePointId has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_list_labelled_cue_region.cuePointId)));
        assert(((cast(*void)(*instance.sampleLength)) - cast(*void)(*instance)) == 4, "ma_dr_wav_list_labelled_cue_region.sampleLength has unexpected offset % instead of 4", ((cast(*void)(*instance.sampleLength)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_labelled_cue_region.sampleLength)) == 4, "ma_dr_wav_list_labelled_cue_region.sampleLength has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_list_labelled_cue_region.sampleLength)));
        assert(((cast(*void)(*instance.purposeId)) - cast(*void)(*instance)) == 8, "ma_dr_wav_list_labelled_cue_region.purposeId has unexpected offset % instead of 8", ((cast(*void)(*instance.purposeId)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_labelled_cue_region.purposeId)) == 4, "ma_dr_wav_list_labelled_cue_region.purposeId has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_list_labelled_cue_region.purposeId)));
        assert(((cast(*void)(*instance.country)) - cast(*void)(*instance)) == 12, "ma_dr_wav_list_labelled_cue_region.country has unexpected offset % instead of 12", ((cast(*void)(*instance.country)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_labelled_cue_region.country)) == 2, "ma_dr_wav_list_labelled_cue_region.country has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_list_labelled_cue_region.country)));
        assert(((cast(*void)(*instance.language)) - cast(*void)(*instance)) == 14, "ma_dr_wav_list_labelled_cue_region.language has unexpected offset % instead of 14", ((cast(*void)(*instance.language)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_labelled_cue_region.language)) == 2, "ma_dr_wav_list_labelled_cue_region.language has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_list_labelled_cue_region.language)));
        assert(((cast(*void)(*instance.dialect)) - cast(*void)(*instance)) == 16, "ma_dr_wav_list_labelled_cue_region.dialect has unexpected offset % instead of 16", ((cast(*void)(*instance.dialect)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_labelled_cue_region.dialect)) == 2, "ma_dr_wav_list_labelled_cue_region.dialect has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_list_labelled_cue_region.dialect)));
        assert(((cast(*void)(*instance.codePage)) - cast(*void)(*instance)) == 18, "ma_dr_wav_list_labelled_cue_region.codePage has unexpected offset % instead of 18", ((cast(*void)(*instance.codePage)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_labelled_cue_region.codePage)) == 2, "ma_dr_wav_list_labelled_cue_region.codePage has unexpected size % instead of 2", size_of(type_of(ma_dr_wav_list_labelled_cue_region.codePage)));
        assert(((cast(*void)(*instance.stringLength)) - cast(*void)(*instance)) == 20, "ma_dr_wav_list_labelled_cue_region.stringLength has unexpected offset % instead of 20", ((cast(*void)(*instance.stringLength)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_labelled_cue_region.stringLength)) == 4, "ma_dr_wav_list_labelled_cue_region.stringLength has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_list_labelled_cue_region.stringLength)));
        assert(((cast(*void)(*instance.pString)) - cast(*void)(*instance)) == 24, "ma_dr_wav_list_labelled_cue_region.pString has unexpected offset % instead of 24", ((cast(*void)(*instance.pString)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_list_labelled_cue_region.pString)) == 8, "ma_dr_wav_list_labelled_cue_region.pString has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_list_labelled_cue_region.pString)));
        assert(size_of(ma_dr_wav_list_labelled_cue_region) == 32, "ma_dr_wav_list_labelled_cue_region has size % instead of 32", size_of(ma_dr_wav_list_labelled_cue_region));
    }

    {
        instance: ma_dr_wav_unknown_metadata;
        assert(((cast(*void)(*instance.id)) - cast(*void)(*instance)) == 0, "ma_dr_wav_unknown_metadata.id has unexpected offset % instead of 0", ((cast(*void)(*instance.id)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_unknown_metadata.id)) == 4, "ma_dr_wav_unknown_metadata.id has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_unknown_metadata.id)));
        assert(((cast(*void)(*instance.chunkLocation)) - cast(*void)(*instance)) == 4, "ma_dr_wav_unknown_metadata.chunkLocation has unexpected offset % instead of 4", ((cast(*void)(*instance.chunkLocation)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_unknown_metadata.chunkLocation)) == 4, "ma_dr_wav_unknown_metadata.chunkLocation has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_unknown_metadata.chunkLocation)));
        assert(((cast(*void)(*instance.dataSizeInBytes)) - cast(*void)(*instance)) == 8, "ma_dr_wav_unknown_metadata.dataSizeInBytes has unexpected offset % instead of 8", ((cast(*void)(*instance.dataSizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_unknown_metadata.dataSizeInBytes)) == 4, "ma_dr_wav_unknown_metadata.dataSizeInBytes has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_unknown_metadata.dataSizeInBytes)));
        assert(((cast(*void)(*instance.pData)) - cast(*void)(*instance)) == 16, "ma_dr_wav_unknown_metadata.pData has unexpected offset % instead of 16", ((cast(*void)(*instance.pData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_unknown_metadata.pData)) == 8, "ma_dr_wav_unknown_metadata.pData has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_unknown_metadata.pData)));
        assert(size_of(ma_dr_wav_unknown_metadata) == 24, "ma_dr_wav_unknown_metadata has size % instead of 24", size_of(ma_dr_wav_unknown_metadata));
    }

    {
        instance: ma_dr_wav_metadata;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "ma_dr_wav_metadata.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_metadata.type)) == 4, "ma_dr_wav_metadata.type has unexpected size % instead of 4", size_of(type_of(ma_dr_wav_metadata.type)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 8, "ma_dr_wav_metadata.data has unexpected offset % instead of 8", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_metadata.data)) == 104, "ma_dr_wav_metadata.data has unexpected size % instead of 104", size_of(type_of(ma_dr_wav_metadata.data)));
        assert(size_of(ma_dr_wav_metadata) == 112, "ma_dr_wav_metadata has size % instead of 112", size_of(ma_dr_wav_metadata));
    }

    {
        instance: ma_dr_wav;
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 0, "ma_dr_wav.onRead has unexpected offset % instead of 0", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.onRead)) == 8, "ma_dr_wav.onRead has unexpected size % instead of 8", size_of(type_of(ma_dr_wav.onRead)));
        assert(((cast(*void)(*instance.onWrite)) - cast(*void)(*instance)) == 8, "ma_dr_wav.onWrite has unexpected offset % instead of 8", ((cast(*void)(*instance.onWrite)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.onWrite)) == 8, "ma_dr_wav.onWrite has unexpected size % instead of 8", size_of(type_of(ma_dr_wav.onWrite)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 16, "ma_dr_wav.onSeek has unexpected offset % instead of 16", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.onSeek)) == 8, "ma_dr_wav.onSeek has unexpected size % instead of 8", size_of(type_of(ma_dr_wav.onSeek)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 24, "ma_dr_wav.pUserData has unexpected offset % instead of 24", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.pUserData)) == 8, "ma_dr_wav.pUserData has unexpected size % instead of 8", size_of(type_of(ma_dr_wav.pUserData)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 32, "ma_dr_wav.allocationCallbacks has unexpected offset % instead of 32", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.allocationCallbacks)) == 32, "ma_dr_wav.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_dr_wav.allocationCallbacks)));
        assert(((cast(*void)(*instance.container)) - cast(*void)(*instance)) == 64, "ma_dr_wav.container has unexpected offset % instead of 64", ((cast(*void)(*instance.container)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.container)) == 4, "ma_dr_wav.container has unexpected size % instead of 4", size_of(type_of(ma_dr_wav.container)));
        assert(((cast(*void)(*instance.fmt)) - cast(*void)(*instance)) == 68, "ma_dr_wav.fmt has unexpected offset % instead of 68", ((cast(*void)(*instance.fmt)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.fmt)) == 40, "ma_dr_wav.fmt has unexpected size % instead of 40", size_of(type_of(ma_dr_wav.fmt)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 108, "ma_dr_wav.sampleRate has unexpected offset % instead of 108", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.sampleRate)) == 4, "ma_dr_wav.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_dr_wav.sampleRate)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 112, "ma_dr_wav.channels has unexpected offset % instead of 112", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.channels)) == 2, "ma_dr_wav.channels has unexpected size % instead of 2", size_of(type_of(ma_dr_wav.channels)));
        assert(((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)) == 114, "ma_dr_wav.bitsPerSample has unexpected offset % instead of 114", ((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.bitsPerSample)) == 2, "ma_dr_wav.bitsPerSample has unexpected size % instead of 2", size_of(type_of(ma_dr_wav.bitsPerSample)));
        assert(((cast(*void)(*instance.translatedFormatTag)) - cast(*void)(*instance)) == 116, "ma_dr_wav.translatedFormatTag has unexpected offset % instead of 116", ((cast(*void)(*instance.translatedFormatTag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.translatedFormatTag)) == 2, "ma_dr_wav.translatedFormatTag has unexpected size % instead of 2", size_of(type_of(ma_dr_wav.translatedFormatTag)));
        assert(((cast(*void)(*instance.totalPCMFrameCount)) - cast(*void)(*instance)) == 120, "ma_dr_wav.totalPCMFrameCount has unexpected offset % instead of 120", ((cast(*void)(*instance.totalPCMFrameCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.totalPCMFrameCount)) == 8, "ma_dr_wav.totalPCMFrameCount has unexpected size % instead of 8", size_of(type_of(ma_dr_wav.totalPCMFrameCount)));
        assert(((cast(*void)(*instance.dataChunkDataSize)) - cast(*void)(*instance)) == 128, "ma_dr_wav.dataChunkDataSize has unexpected offset % instead of 128", ((cast(*void)(*instance.dataChunkDataSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.dataChunkDataSize)) == 8, "ma_dr_wav.dataChunkDataSize has unexpected size % instead of 8", size_of(type_of(ma_dr_wav.dataChunkDataSize)));
        assert(((cast(*void)(*instance.dataChunkDataPos)) - cast(*void)(*instance)) == 136, "ma_dr_wav.dataChunkDataPos has unexpected offset % instead of 136", ((cast(*void)(*instance.dataChunkDataPos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.dataChunkDataPos)) == 8, "ma_dr_wav.dataChunkDataPos has unexpected size % instead of 8", size_of(type_of(ma_dr_wav.dataChunkDataPos)));
        assert(((cast(*void)(*instance.bytesRemaining)) - cast(*void)(*instance)) == 144, "ma_dr_wav.bytesRemaining has unexpected offset % instead of 144", ((cast(*void)(*instance.bytesRemaining)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.bytesRemaining)) == 8, "ma_dr_wav.bytesRemaining has unexpected size % instead of 8", size_of(type_of(ma_dr_wav.bytesRemaining)));
        assert(((cast(*void)(*instance.readCursorInPCMFrames)) - cast(*void)(*instance)) == 152, "ma_dr_wav.readCursorInPCMFrames has unexpected offset % instead of 152", ((cast(*void)(*instance.readCursorInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.readCursorInPCMFrames)) == 8, "ma_dr_wav.readCursorInPCMFrames has unexpected size % instead of 8", size_of(type_of(ma_dr_wav.readCursorInPCMFrames)));
        assert(((cast(*void)(*instance.dataChunkDataSizeTargetWrite)) - cast(*void)(*instance)) == 160, "ma_dr_wav.dataChunkDataSizeTargetWrite has unexpected offset % instead of 160", ((cast(*void)(*instance.dataChunkDataSizeTargetWrite)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.dataChunkDataSizeTargetWrite)) == 8, "ma_dr_wav.dataChunkDataSizeTargetWrite has unexpected size % instead of 8", size_of(type_of(ma_dr_wav.dataChunkDataSizeTargetWrite)));
        assert(((cast(*void)(*instance.isSequentialWrite)) - cast(*void)(*instance)) == 168, "ma_dr_wav.isSequentialWrite has unexpected offset % instead of 168", ((cast(*void)(*instance.isSequentialWrite)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.isSequentialWrite)) == 4, "ma_dr_wav.isSequentialWrite has unexpected size % instead of 4", size_of(type_of(ma_dr_wav.isSequentialWrite)));
        assert(((cast(*void)(*instance.pMetadata)) - cast(*void)(*instance)) == 176, "ma_dr_wav.pMetadata has unexpected offset % instead of 176", ((cast(*void)(*instance.pMetadata)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.pMetadata)) == 8, "ma_dr_wav.pMetadata has unexpected size % instead of 8", size_of(type_of(ma_dr_wav.pMetadata)));
        assert(((cast(*void)(*instance.metadataCount)) - cast(*void)(*instance)) == 184, "ma_dr_wav.metadataCount has unexpected offset % instead of 184", ((cast(*void)(*instance.metadataCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.metadataCount)) == 4, "ma_dr_wav.metadataCount has unexpected size % instead of 4", size_of(type_of(ma_dr_wav.metadataCount)));
        assert(((cast(*void)(*instance.memoryStream)) - cast(*void)(*instance)) == 192, "ma_dr_wav.memoryStream has unexpected offset % instead of 192", ((cast(*void)(*instance.memoryStream)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.memoryStream)) == 24, "ma_dr_wav.memoryStream has unexpected size % instead of 24", size_of(type_of(ma_dr_wav.memoryStream)));
        assert(((cast(*void)(*instance.memoryStreamWrite)) - cast(*void)(*instance)) == 216, "ma_dr_wav.memoryStreamWrite has unexpected offset % instead of 216", ((cast(*void)(*instance.memoryStreamWrite)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.memoryStreamWrite)) == 40, "ma_dr_wav.memoryStreamWrite has unexpected size % instead of 40", size_of(type_of(ma_dr_wav.memoryStreamWrite)));
        assert(((cast(*void)(*instance.msadpcm)) - cast(*void)(*instance)) == 256, "ma_dr_wav.msadpcm has unexpected offset % instead of 256", ((cast(*void)(*instance.msadpcm)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.msadpcm)) == 52, "ma_dr_wav.msadpcm has unexpected size % instead of 52", size_of(type_of(ma_dr_wav.msadpcm)));
        assert(((cast(*void)(*instance.ima)) - cast(*void)(*instance)) == 308, "ma_dr_wav.ima has unexpected offset % instead of 308", ((cast(*void)(*instance.ima)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.ima)) == 88, "ma_dr_wav.ima has unexpected size % instead of 88", size_of(type_of(ma_dr_wav.ima)));
        assert(((cast(*void)(*instance.aiff)) - cast(*void)(*instance)) == 396, "ma_dr_wav.aiff has unexpected offset % instead of 396", ((cast(*void)(*instance.aiff)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav.aiff)) == 2, "ma_dr_wav.aiff has unexpected size % instead of 2", size_of(type_of(ma_dr_wav.aiff)));
        assert(size_of(ma_dr_wav) == 400, "ma_dr_wav has size % instead of 400", size_of(ma_dr_wav));
    }

    {
        instance: ma_dr_flac_seekpoint;
        assert(((cast(*void)(*instance.firstPCMFrame)) - cast(*void)(*instance)) == 0, "ma_dr_flac_seekpoint.firstPCMFrame has unexpected offset % instead of 0", ((cast(*void)(*instance.firstPCMFrame)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_seekpoint.firstPCMFrame)) == 8, "ma_dr_flac_seekpoint.firstPCMFrame has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_seekpoint.firstPCMFrame)));
        assert(((cast(*void)(*instance.flacFrameOffset)) - cast(*void)(*instance)) == 8, "ma_dr_flac_seekpoint.flacFrameOffset has unexpected offset % instead of 8", ((cast(*void)(*instance.flacFrameOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_seekpoint.flacFrameOffset)) == 8, "ma_dr_flac_seekpoint.flacFrameOffset has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_seekpoint.flacFrameOffset)));
        assert(((cast(*void)(*instance.pcmFrameCount)) - cast(*void)(*instance)) == 16, "ma_dr_flac_seekpoint.pcmFrameCount has unexpected offset % instead of 16", ((cast(*void)(*instance.pcmFrameCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_seekpoint.pcmFrameCount)) == 2, "ma_dr_flac_seekpoint.pcmFrameCount has unexpected size % instead of 2", size_of(type_of(ma_dr_flac_seekpoint.pcmFrameCount)));
        assert(size_of(ma_dr_flac_seekpoint) == 24, "ma_dr_flac_seekpoint has size % instead of 24", size_of(ma_dr_flac_seekpoint));
    }

    {
        instance: ma_dr_flac_streaminfo;
        assert(((cast(*void)(*instance.minBlockSizeInPCMFrames)) - cast(*void)(*instance)) == 0, "ma_dr_flac_streaminfo.minBlockSizeInPCMFrames has unexpected offset % instead of 0", ((cast(*void)(*instance.minBlockSizeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_streaminfo.minBlockSizeInPCMFrames)) == 2, "ma_dr_flac_streaminfo.minBlockSizeInPCMFrames has unexpected size % instead of 2", size_of(type_of(ma_dr_flac_streaminfo.minBlockSizeInPCMFrames)));
        assert(((cast(*void)(*instance.maxBlockSizeInPCMFrames)) - cast(*void)(*instance)) == 2, "ma_dr_flac_streaminfo.maxBlockSizeInPCMFrames has unexpected offset % instead of 2", ((cast(*void)(*instance.maxBlockSizeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_streaminfo.maxBlockSizeInPCMFrames)) == 2, "ma_dr_flac_streaminfo.maxBlockSizeInPCMFrames has unexpected size % instead of 2", size_of(type_of(ma_dr_flac_streaminfo.maxBlockSizeInPCMFrames)));
        assert(((cast(*void)(*instance.minFrameSizeInPCMFrames)) - cast(*void)(*instance)) == 4, "ma_dr_flac_streaminfo.minFrameSizeInPCMFrames has unexpected offset % instead of 4", ((cast(*void)(*instance.minFrameSizeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_streaminfo.minFrameSizeInPCMFrames)) == 4, "ma_dr_flac_streaminfo.minFrameSizeInPCMFrames has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_streaminfo.minFrameSizeInPCMFrames)));
        assert(((cast(*void)(*instance.maxFrameSizeInPCMFrames)) - cast(*void)(*instance)) == 8, "ma_dr_flac_streaminfo.maxFrameSizeInPCMFrames has unexpected offset % instead of 8", ((cast(*void)(*instance.maxFrameSizeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_streaminfo.maxFrameSizeInPCMFrames)) == 4, "ma_dr_flac_streaminfo.maxFrameSizeInPCMFrames has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_streaminfo.maxFrameSizeInPCMFrames)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 12, "ma_dr_flac_streaminfo.sampleRate has unexpected offset % instead of 12", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_streaminfo.sampleRate)) == 4, "ma_dr_flac_streaminfo.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_streaminfo.sampleRate)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 16, "ma_dr_flac_streaminfo.channels has unexpected offset % instead of 16", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_streaminfo.channels)) == 1, "ma_dr_flac_streaminfo.channels has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_streaminfo.channels)));
        assert(((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)) == 17, "ma_dr_flac_streaminfo.bitsPerSample has unexpected offset % instead of 17", ((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_streaminfo.bitsPerSample)) == 1, "ma_dr_flac_streaminfo.bitsPerSample has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_streaminfo.bitsPerSample)));
        assert(((cast(*void)(*instance.totalPCMFrameCount)) - cast(*void)(*instance)) == 24, "ma_dr_flac_streaminfo.totalPCMFrameCount has unexpected offset % instead of 24", ((cast(*void)(*instance.totalPCMFrameCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_streaminfo.totalPCMFrameCount)) == 8, "ma_dr_flac_streaminfo.totalPCMFrameCount has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_streaminfo.totalPCMFrameCount)));
        assert(((cast(*void)(*instance.md5)) - cast(*void)(*instance)) == 32, "ma_dr_flac_streaminfo.md5 has unexpected offset % instead of 32", ((cast(*void)(*instance.md5)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_streaminfo.md5)) == 16, "ma_dr_flac_streaminfo.md5 has unexpected size % instead of 16", size_of(type_of(ma_dr_flac_streaminfo.md5)));
        assert(size_of(ma_dr_flac_streaminfo) == 48, "ma_dr_flac_streaminfo has size % instead of 48", size_of(ma_dr_flac_streaminfo));
    }

    {
        instance: ma_dr_flac_metadata;
        assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "ma_dr_flac_metadata.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_metadata.type)) == 4, "ma_dr_flac_metadata.type has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_metadata.type)));
        assert(((cast(*void)(*instance.pRawData)) - cast(*void)(*instance)) == 8, "ma_dr_flac_metadata.pRawData has unexpected offset % instead of 8", ((cast(*void)(*instance.pRawData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_metadata.pRawData)) == 8, "ma_dr_flac_metadata.pRawData has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_metadata.pRawData)));
        assert(((cast(*void)(*instance.rawDataSize)) - cast(*void)(*instance)) == 16, "ma_dr_flac_metadata.rawDataSize has unexpected offset % instead of 16", ((cast(*void)(*instance.rawDataSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_metadata.rawDataSize)) == 4, "ma_dr_flac_metadata.rawDataSize has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_metadata.rawDataSize)));
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 24, "ma_dr_flac_metadata.data has unexpected offset % instead of 24", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_metadata.data)) == 152, "ma_dr_flac_metadata.data has unexpected size % instead of 152", size_of(type_of(ma_dr_flac_metadata.data)));
        assert(size_of(ma_dr_flac_metadata) == 176, "ma_dr_flac_metadata has size % instead of 176", size_of(ma_dr_flac_metadata));
    }

    {
        instance: ma_dr_flac__memory_stream;
        assert(((cast(*void)(*instance.data)) - cast(*void)(*instance)) == 0, "ma_dr_flac__memory_stream.data has unexpected offset % instead of 0", ((cast(*void)(*instance.data)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac__memory_stream.data)) == 8, "ma_dr_flac__memory_stream.data has unexpected size % instead of 8", size_of(type_of(ma_dr_flac__memory_stream.data)));
        assert(((cast(*void)(*instance.dataSize)) - cast(*void)(*instance)) == 8, "ma_dr_flac__memory_stream.dataSize has unexpected offset % instead of 8", ((cast(*void)(*instance.dataSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac__memory_stream.dataSize)) == 8, "ma_dr_flac__memory_stream.dataSize has unexpected size % instead of 8", size_of(type_of(ma_dr_flac__memory_stream.dataSize)));
        assert(((cast(*void)(*instance.currentReadPos)) - cast(*void)(*instance)) == 16, "ma_dr_flac__memory_stream.currentReadPos has unexpected offset % instead of 16", ((cast(*void)(*instance.currentReadPos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac__memory_stream.currentReadPos)) == 8, "ma_dr_flac__memory_stream.currentReadPos has unexpected size % instead of 8", size_of(type_of(ma_dr_flac__memory_stream.currentReadPos)));
        assert(size_of(ma_dr_flac__memory_stream) == 24, "ma_dr_flac__memory_stream has size % instead of 24", size_of(ma_dr_flac__memory_stream));
    }

    {
        instance: ma_dr_flac_bs;
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 0, "ma_dr_flac_bs.onRead has unexpected offset % instead of 0", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.onRead)) == 8, "ma_dr_flac_bs.onRead has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_bs.onRead)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 8, "ma_dr_flac_bs.onSeek has unexpected offset % instead of 8", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.onSeek)) == 8, "ma_dr_flac_bs.onSeek has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_bs.onSeek)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 16, "ma_dr_flac_bs.pUserData has unexpected offset % instead of 16", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.pUserData)) == 8, "ma_dr_flac_bs.pUserData has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_bs.pUserData)));
        assert(((cast(*void)(*instance.unalignedByteCount)) - cast(*void)(*instance)) == 24, "ma_dr_flac_bs.unalignedByteCount has unexpected offset % instead of 24", ((cast(*void)(*instance.unalignedByteCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.unalignedByteCount)) == 8, "ma_dr_flac_bs.unalignedByteCount has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_bs.unalignedByteCount)));
        assert(((cast(*void)(*instance.unalignedCache)) - cast(*void)(*instance)) == 32, "ma_dr_flac_bs.unalignedCache has unexpected offset % instead of 32", ((cast(*void)(*instance.unalignedCache)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.unalignedCache)) == 8, "ma_dr_flac_bs.unalignedCache has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_bs.unalignedCache)));
        assert(((cast(*void)(*instance.nextL2Line)) - cast(*void)(*instance)) == 40, "ma_dr_flac_bs.nextL2Line has unexpected offset % instead of 40", ((cast(*void)(*instance.nextL2Line)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.nextL2Line)) == 4, "ma_dr_flac_bs.nextL2Line has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_bs.nextL2Line)));
        assert(((cast(*void)(*instance.consumedBits)) - cast(*void)(*instance)) == 44, "ma_dr_flac_bs.consumedBits has unexpected offset % instead of 44", ((cast(*void)(*instance.consumedBits)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.consumedBits)) == 4, "ma_dr_flac_bs.consumedBits has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_bs.consumedBits)));
        assert(((cast(*void)(*instance.cacheL2)) - cast(*void)(*instance)) == 48, "ma_dr_flac_bs.cacheL2 has unexpected offset % instead of 48", ((cast(*void)(*instance.cacheL2)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.cacheL2)) == 4096, "ma_dr_flac_bs.cacheL2 has unexpected size % instead of 4096", size_of(type_of(ma_dr_flac_bs.cacheL2)));
        assert(((cast(*void)(*instance.cache)) - cast(*void)(*instance)) == 4144, "ma_dr_flac_bs.cache has unexpected offset % instead of 4144", ((cast(*void)(*instance.cache)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.cache)) == 8, "ma_dr_flac_bs.cache has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_bs.cache)));
        assert(((cast(*void)(*instance.crc16)) - cast(*void)(*instance)) == 4152, "ma_dr_flac_bs.crc16 has unexpected offset % instead of 4152", ((cast(*void)(*instance.crc16)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.crc16)) == 2, "ma_dr_flac_bs.crc16 has unexpected size % instead of 2", size_of(type_of(ma_dr_flac_bs.crc16)));
        assert(((cast(*void)(*instance.crc16Cache)) - cast(*void)(*instance)) == 4160, "ma_dr_flac_bs.crc16Cache has unexpected offset % instead of 4160", ((cast(*void)(*instance.crc16Cache)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.crc16Cache)) == 8, "ma_dr_flac_bs.crc16Cache has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_bs.crc16Cache)));
        assert(((cast(*void)(*instance.crc16CacheIgnoredBytes)) - cast(*void)(*instance)) == 4168, "ma_dr_flac_bs.crc16CacheIgnoredBytes has unexpected offset % instead of 4168", ((cast(*void)(*instance.crc16CacheIgnoredBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_bs.crc16CacheIgnoredBytes)) == 4, "ma_dr_flac_bs.crc16CacheIgnoredBytes has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_bs.crc16CacheIgnoredBytes)));
        assert(size_of(ma_dr_flac_bs) == 4176, "ma_dr_flac_bs has size % instead of 4176", size_of(ma_dr_flac_bs));
    }

    {
        instance: ma_dr_flac_subframe;
        assert(((cast(*void)(*instance.subframeType)) - cast(*void)(*instance)) == 0, "ma_dr_flac_subframe.subframeType has unexpected offset % instead of 0", ((cast(*void)(*instance.subframeType)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_subframe.subframeType)) == 1, "ma_dr_flac_subframe.subframeType has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_subframe.subframeType)));
        assert(((cast(*void)(*instance.wastedBitsPerSample)) - cast(*void)(*instance)) == 1, "ma_dr_flac_subframe.wastedBitsPerSample has unexpected offset % instead of 1", ((cast(*void)(*instance.wastedBitsPerSample)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_subframe.wastedBitsPerSample)) == 1, "ma_dr_flac_subframe.wastedBitsPerSample has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_subframe.wastedBitsPerSample)));
        assert(((cast(*void)(*instance.lpcOrder)) - cast(*void)(*instance)) == 2, "ma_dr_flac_subframe.lpcOrder has unexpected offset % instead of 2", ((cast(*void)(*instance.lpcOrder)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_subframe.lpcOrder)) == 1, "ma_dr_flac_subframe.lpcOrder has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_subframe.lpcOrder)));
        assert(((cast(*void)(*instance.pSamplesS32)) - cast(*void)(*instance)) == 8, "ma_dr_flac_subframe.pSamplesS32 has unexpected offset % instead of 8", ((cast(*void)(*instance.pSamplesS32)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_subframe.pSamplesS32)) == 8, "ma_dr_flac_subframe.pSamplesS32 has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_subframe.pSamplesS32)));
        assert(size_of(ma_dr_flac_subframe) == 16, "ma_dr_flac_subframe has size % instead of 16", size_of(ma_dr_flac_subframe));
    }

    {
        instance: ma_dr_flac_frame_header;
        assert(((cast(*void)(*instance.pcmFrameNumber)) - cast(*void)(*instance)) == 0, "ma_dr_flac_frame_header.pcmFrameNumber has unexpected offset % instead of 0", ((cast(*void)(*instance.pcmFrameNumber)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_frame_header.pcmFrameNumber)) == 8, "ma_dr_flac_frame_header.pcmFrameNumber has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_frame_header.pcmFrameNumber)));
        assert(((cast(*void)(*instance.flacFrameNumber)) - cast(*void)(*instance)) == 8, "ma_dr_flac_frame_header.flacFrameNumber has unexpected offset % instead of 8", ((cast(*void)(*instance.flacFrameNumber)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_frame_header.flacFrameNumber)) == 4, "ma_dr_flac_frame_header.flacFrameNumber has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_frame_header.flacFrameNumber)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 12, "ma_dr_flac_frame_header.sampleRate has unexpected offset % instead of 12", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_frame_header.sampleRate)) == 4, "ma_dr_flac_frame_header.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_frame_header.sampleRate)));
        assert(((cast(*void)(*instance.blockSizeInPCMFrames)) - cast(*void)(*instance)) == 16, "ma_dr_flac_frame_header.blockSizeInPCMFrames has unexpected offset % instead of 16", ((cast(*void)(*instance.blockSizeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_frame_header.blockSizeInPCMFrames)) == 2, "ma_dr_flac_frame_header.blockSizeInPCMFrames has unexpected size % instead of 2", size_of(type_of(ma_dr_flac_frame_header.blockSizeInPCMFrames)));
        assert(((cast(*void)(*instance.channelAssignment)) - cast(*void)(*instance)) == 18, "ma_dr_flac_frame_header.channelAssignment has unexpected offset % instead of 18", ((cast(*void)(*instance.channelAssignment)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_frame_header.channelAssignment)) == 1, "ma_dr_flac_frame_header.channelAssignment has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_frame_header.channelAssignment)));
        assert(((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)) == 19, "ma_dr_flac_frame_header.bitsPerSample has unexpected offset % instead of 19", ((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_frame_header.bitsPerSample)) == 1, "ma_dr_flac_frame_header.bitsPerSample has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_frame_header.bitsPerSample)));
        assert(((cast(*void)(*instance.crc8)) - cast(*void)(*instance)) == 20, "ma_dr_flac_frame_header.crc8 has unexpected offset % instead of 20", ((cast(*void)(*instance.crc8)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_frame_header.crc8)) == 1, "ma_dr_flac_frame_header.crc8 has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_frame_header.crc8)));
        assert(size_of(ma_dr_flac_frame_header) == 24, "ma_dr_flac_frame_header has size % instead of 24", size_of(ma_dr_flac_frame_header));
    }

    {
        instance: ma_dr_flac_frame;
        assert(((cast(*void)(*instance.header)) - cast(*void)(*instance)) == 0, "ma_dr_flac_frame.header has unexpected offset % instead of 0", ((cast(*void)(*instance.header)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_frame.header)) == 24, "ma_dr_flac_frame.header has unexpected size % instead of 24", size_of(type_of(ma_dr_flac_frame.header)));
        assert(((cast(*void)(*instance.pcmFramesRemaining)) - cast(*void)(*instance)) == 24, "ma_dr_flac_frame.pcmFramesRemaining has unexpected offset % instead of 24", ((cast(*void)(*instance.pcmFramesRemaining)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_frame.pcmFramesRemaining)) == 4, "ma_dr_flac_frame.pcmFramesRemaining has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_frame.pcmFramesRemaining)));
        assert(((cast(*void)(*instance.subframes)) - cast(*void)(*instance)) == 32, "ma_dr_flac_frame.subframes has unexpected offset % instead of 32", ((cast(*void)(*instance.subframes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_frame.subframes)) == 128, "ma_dr_flac_frame.subframes has unexpected size % instead of 128", size_of(type_of(ma_dr_flac_frame.subframes)));
        assert(size_of(ma_dr_flac_frame) == 160, "ma_dr_flac_frame has size % instead of 160", size_of(ma_dr_flac_frame));
    }

    {
        instance: ma_dr_flac;
        assert(((cast(*void)(*instance.onMeta)) - cast(*void)(*instance)) == 0, "ma_dr_flac.onMeta has unexpected offset % instead of 0", ((cast(*void)(*instance.onMeta)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.onMeta)) == 8, "ma_dr_flac.onMeta has unexpected size % instead of 8", size_of(type_of(ma_dr_flac.onMeta)));
        assert(((cast(*void)(*instance.pUserDataMD)) - cast(*void)(*instance)) == 8, "ma_dr_flac.pUserDataMD has unexpected offset % instead of 8", ((cast(*void)(*instance.pUserDataMD)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.pUserDataMD)) == 8, "ma_dr_flac.pUserDataMD has unexpected size % instead of 8", size_of(type_of(ma_dr_flac.pUserDataMD)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 16, "ma_dr_flac.allocationCallbacks has unexpected offset % instead of 16", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.allocationCallbacks)) == 32, "ma_dr_flac.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_dr_flac.allocationCallbacks)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 48, "ma_dr_flac.sampleRate has unexpected offset % instead of 48", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.sampleRate)) == 4, "ma_dr_flac.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_dr_flac.sampleRate)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 52, "ma_dr_flac.channels has unexpected offset % instead of 52", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.channels)) == 1, "ma_dr_flac.channels has unexpected size % instead of 1", size_of(type_of(ma_dr_flac.channels)));
        assert(((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)) == 53, "ma_dr_flac.bitsPerSample has unexpected offset % instead of 53", ((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.bitsPerSample)) == 1, "ma_dr_flac.bitsPerSample has unexpected size % instead of 1", size_of(type_of(ma_dr_flac.bitsPerSample)));
        assert(((cast(*void)(*instance.maxBlockSizeInPCMFrames)) - cast(*void)(*instance)) == 54, "ma_dr_flac.maxBlockSizeInPCMFrames has unexpected offset % instead of 54", ((cast(*void)(*instance.maxBlockSizeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.maxBlockSizeInPCMFrames)) == 2, "ma_dr_flac.maxBlockSizeInPCMFrames has unexpected size % instead of 2", size_of(type_of(ma_dr_flac.maxBlockSizeInPCMFrames)));
        assert(((cast(*void)(*instance.totalPCMFrameCount)) - cast(*void)(*instance)) == 56, "ma_dr_flac.totalPCMFrameCount has unexpected offset % instead of 56", ((cast(*void)(*instance.totalPCMFrameCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.totalPCMFrameCount)) == 8, "ma_dr_flac.totalPCMFrameCount has unexpected size % instead of 8", size_of(type_of(ma_dr_flac.totalPCMFrameCount)));
        assert(((cast(*void)(*instance.container)) - cast(*void)(*instance)) == 64, "ma_dr_flac.container has unexpected offset % instead of 64", ((cast(*void)(*instance.container)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.container)) == 4, "ma_dr_flac.container has unexpected size % instead of 4", size_of(type_of(ma_dr_flac.container)));
        assert(((cast(*void)(*instance.seekpointCount)) - cast(*void)(*instance)) == 68, "ma_dr_flac.seekpointCount has unexpected offset % instead of 68", ((cast(*void)(*instance.seekpointCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.seekpointCount)) == 4, "ma_dr_flac.seekpointCount has unexpected size % instead of 4", size_of(type_of(ma_dr_flac.seekpointCount)));
        assert(((cast(*void)(*instance.currentFLACFrame)) - cast(*void)(*instance)) == 72, "ma_dr_flac.currentFLACFrame has unexpected offset % instead of 72", ((cast(*void)(*instance.currentFLACFrame)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.currentFLACFrame)) == 160, "ma_dr_flac.currentFLACFrame has unexpected size % instead of 160", size_of(type_of(ma_dr_flac.currentFLACFrame)));
        assert(((cast(*void)(*instance.currentPCMFrame)) - cast(*void)(*instance)) == 232, "ma_dr_flac.currentPCMFrame has unexpected offset % instead of 232", ((cast(*void)(*instance.currentPCMFrame)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.currentPCMFrame)) == 8, "ma_dr_flac.currentPCMFrame has unexpected size % instead of 8", size_of(type_of(ma_dr_flac.currentPCMFrame)));
        assert(((cast(*void)(*instance.firstFLACFramePosInBytes)) - cast(*void)(*instance)) == 240, "ma_dr_flac.firstFLACFramePosInBytes has unexpected offset % instead of 240", ((cast(*void)(*instance.firstFLACFramePosInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.firstFLACFramePosInBytes)) == 8, "ma_dr_flac.firstFLACFramePosInBytes has unexpected size % instead of 8", size_of(type_of(ma_dr_flac.firstFLACFramePosInBytes)));
        assert(((cast(*void)(*instance.memoryStream)) - cast(*void)(*instance)) == 248, "ma_dr_flac.memoryStream has unexpected offset % instead of 248", ((cast(*void)(*instance.memoryStream)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.memoryStream)) == 24, "ma_dr_flac.memoryStream has unexpected size % instead of 24", size_of(type_of(ma_dr_flac.memoryStream)));
        assert(((cast(*void)(*instance.pDecodedSamples)) - cast(*void)(*instance)) == 272, "ma_dr_flac.pDecodedSamples has unexpected offset % instead of 272", ((cast(*void)(*instance.pDecodedSamples)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.pDecodedSamples)) == 8, "ma_dr_flac.pDecodedSamples has unexpected size % instead of 8", size_of(type_of(ma_dr_flac.pDecodedSamples)));
        assert(((cast(*void)(*instance.pSeekpoints)) - cast(*void)(*instance)) == 280, "ma_dr_flac.pSeekpoints has unexpected offset % instead of 280", ((cast(*void)(*instance.pSeekpoints)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.pSeekpoints)) == 8, "ma_dr_flac.pSeekpoints has unexpected size % instead of 8", size_of(type_of(ma_dr_flac.pSeekpoints)));
        assert(((cast(*void)(*instance._oggbs)) - cast(*void)(*instance)) == 288, "ma_dr_flac._oggbs has unexpected offset % instead of 288", ((cast(*void)(*instance._oggbs)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac._oggbs)) == 8, "ma_dr_flac._oggbs has unexpected size % instead of 8", size_of(type_of(ma_dr_flac._oggbs)));
        assert(((cast(*void)(*instance.__bitfield)) - cast(*void)(*instance)) == 296, "ma_dr_flac.__bitfield has unexpected offset % instead of 296", ((cast(*void)(*instance.__bitfield)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.__bitfield)) == 1, "ma_dr_flac.__bitfield has unexpected size % instead of 1", size_of(type_of(ma_dr_flac.__bitfield)));
        assert(((cast(*void)(*instance.bs)) - cast(*void)(*instance)) == 304, "ma_dr_flac.bs has unexpected offset % instead of 304", ((cast(*void)(*instance.bs)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.bs)) == 4176, "ma_dr_flac.bs has unexpected size % instead of 4176", size_of(type_of(ma_dr_flac.bs)));
        assert(((cast(*void)(*instance.pExtraData)) - cast(*void)(*instance)) == 4480, "ma_dr_flac.pExtraData has unexpected offset % instead of 4480", ((cast(*void)(*instance.pExtraData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac.pExtraData)) == 1, "ma_dr_flac.pExtraData has unexpected size % instead of 1", size_of(type_of(ma_dr_flac.pExtraData)));
        assert(size_of(ma_dr_flac) == 4488, "ma_dr_flac has size % instead of 4488", size_of(ma_dr_flac));
    }

    {
        instance: ma_dr_flac_vorbis_comment_iterator;
        assert(((cast(*void)(*instance.countRemaining)) - cast(*void)(*instance)) == 0, "ma_dr_flac_vorbis_comment_iterator.countRemaining has unexpected offset % instead of 0", ((cast(*void)(*instance.countRemaining)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_vorbis_comment_iterator.countRemaining)) == 4, "ma_dr_flac_vorbis_comment_iterator.countRemaining has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_vorbis_comment_iterator.countRemaining)));
        assert(((cast(*void)(*instance.pRunningData)) - cast(*void)(*instance)) == 8, "ma_dr_flac_vorbis_comment_iterator.pRunningData has unexpected offset % instead of 8", ((cast(*void)(*instance.pRunningData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_vorbis_comment_iterator.pRunningData)) == 8, "ma_dr_flac_vorbis_comment_iterator.pRunningData has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_vorbis_comment_iterator.pRunningData)));
        assert(size_of(ma_dr_flac_vorbis_comment_iterator) == 16, "ma_dr_flac_vorbis_comment_iterator has size % instead of 16", size_of(ma_dr_flac_vorbis_comment_iterator));
    }

    {
        instance: ma_dr_flac_cuesheet_track_iterator;
        assert(((cast(*void)(*instance.countRemaining)) - cast(*void)(*instance)) == 0, "ma_dr_flac_cuesheet_track_iterator.countRemaining has unexpected offset % instead of 0", ((cast(*void)(*instance.countRemaining)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track_iterator.countRemaining)) == 4, "ma_dr_flac_cuesheet_track_iterator.countRemaining has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_cuesheet_track_iterator.countRemaining)));
        assert(((cast(*void)(*instance.pRunningData)) - cast(*void)(*instance)) == 8, "ma_dr_flac_cuesheet_track_iterator.pRunningData has unexpected offset % instead of 8", ((cast(*void)(*instance.pRunningData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track_iterator.pRunningData)) == 8, "ma_dr_flac_cuesheet_track_iterator.pRunningData has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_cuesheet_track_iterator.pRunningData)));
        assert(size_of(ma_dr_flac_cuesheet_track_iterator) == 16, "ma_dr_flac_cuesheet_track_iterator has size % instead of 16", size_of(ma_dr_flac_cuesheet_track_iterator));
    }

    {
        instance: ma_dr_flac_cuesheet_track_index;
        assert(((cast(*void)(*instance.offset)) - cast(*void)(*instance)) == 0, "ma_dr_flac_cuesheet_track_index.offset has unexpected offset % instead of 0", ((cast(*void)(*instance.offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track_index.offset)) == 8, "ma_dr_flac_cuesheet_track_index.offset has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_cuesheet_track_index.offset)));
        assert(((cast(*void)(*instance.index)) - cast(*void)(*instance)) == 8, "ma_dr_flac_cuesheet_track_index.index has unexpected offset % instead of 8", ((cast(*void)(*instance.index)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track_index.index)) == 1, "ma_dr_flac_cuesheet_track_index.index has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_cuesheet_track_index.index)));
        assert(((cast(*void)(*instance.reserved)) - cast(*void)(*instance)) == 9, "ma_dr_flac_cuesheet_track_index.reserved has unexpected offset % instead of 9", ((cast(*void)(*instance.reserved)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track_index.reserved)) == 3, "ma_dr_flac_cuesheet_track_index.reserved has unexpected size % instead of 3", size_of(type_of(ma_dr_flac_cuesheet_track_index.reserved)));
        assert(size_of(ma_dr_flac_cuesheet_track_index) == 16, "ma_dr_flac_cuesheet_track_index has size % instead of 16", size_of(ma_dr_flac_cuesheet_track_index));
    }

    {
        instance: ma_dr_flac_cuesheet_track;
        assert(((cast(*void)(*instance.offset)) - cast(*void)(*instance)) == 0, "ma_dr_flac_cuesheet_track.offset has unexpected offset % instead of 0", ((cast(*void)(*instance.offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track.offset)) == 8, "ma_dr_flac_cuesheet_track.offset has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_cuesheet_track.offset)));
        assert(((cast(*void)(*instance.trackNumber)) - cast(*void)(*instance)) == 8, "ma_dr_flac_cuesheet_track.trackNumber has unexpected offset % instead of 8", ((cast(*void)(*instance.trackNumber)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track.trackNumber)) == 1, "ma_dr_flac_cuesheet_track.trackNumber has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_cuesheet_track.trackNumber)));
        assert(((cast(*void)(*instance.ISRC)) - cast(*void)(*instance)) == 9, "ma_dr_flac_cuesheet_track.ISRC has unexpected offset % instead of 9", ((cast(*void)(*instance.ISRC)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track.ISRC)) == 12, "ma_dr_flac_cuesheet_track.ISRC has unexpected size % instead of 12", size_of(type_of(ma_dr_flac_cuesheet_track.ISRC)));
        assert(((cast(*void)(*instance.isAudio)) - cast(*void)(*instance)) == 21, "ma_dr_flac_cuesheet_track.isAudio has unexpected offset % instead of 21", ((cast(*void)(*instance.isAudio)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track.isAudio)) == 1, "ma_dr_flac_cuesheet_track.isAudio has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_cuesheet_track.isAudio)));
        assert(((cast(*void)(*instance.preEmphasis)) - cast(*void)(*instance)) == 22, "ma_dr_flac_cuesheet_track.preEmphasis has unexpected offset % instead of 22", ((cast(*void)(*instance.preEmphasis)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track.preEmphasis)) == 1, "ma_dr_flac_cuesheet_track.preEmphasis has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_cuesheet_track.preEmphasis)));
        assert(((cast(*void)(*instance.indexCount)) - cast(*void)(*instance)) == 23, "ma_dr_flac_cuesheet_track.indexCount has unexpected offset % instead of 23", ((cast(*void)(*instance.indexCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track.indexCount)) == 1, "ma_dr_flac_cuesheet_track.indexCount has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_cuesheet_track.indexCount)));
        assert(((cast(*void)(*instance.pIndexPoints)) - cast(*void)(*instance)) == 24, "ma_dr_flac_cuesheet_track.pIndexPoints has unexpected offset % instead of 24", ((cast(*void)(*instance.pIndexPoints)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_cuesheet_track.pIndexPoints)) == 8, "ma_dr_flac_cuesheet_track.pIndexPoints has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_cuesheet_track.pIndexPoints)));
        assert(size_of(ma_dr_flac_cuesheet_track) == 32, "ma_dr_flac_cuesheet_track has size % instead of 32", size_of(ma_dr_flac_cuesheet_track));
    }

    {
        instance: ma_dr_mp3dec_frame_info;
        assert(((cast(*void)(*instance.frame_bytes)) - cast(*void)(*instance)) == 0, "ma_dr_mp3dec_frame_info.frame_bytes has unexpected offset % instead of 0", ((cast(*void)(*instance.frame_bytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_frame_info.frame_bytes)) == 4, "ma_dr_mp3dec_frame_info.frame_bytes has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3dec_frame_info.frame_bytes)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 4, "ma_dr_mp3dec_frame_info.channels has unexpected offset % instead of 4", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_frame_info.channels)) == 4, "ma_dr_mp3dec_frame_info.channels has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3dec_frame_info.channels)));
        assert(((cast(*void)(*instance.hz)) - cast(*void)(*instance)) == 8, "ma_dr_mp3dec_frame_info.hz has unexpected offset % instead of 8", ((cast(*void)(*instance.hz)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_frame_info.hz)) == 4, "ma_dr_mp3dec_frame_info.hz has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3dec_frame_info.hz)));
        assert(((cast(*void)(*instance.layer)) - cast(*void)(*instance)) == 12, "ma_dr_mp3dec_frame_info.layer has unexpected offset % instead of 12", ((cast(*void)(*instance.layer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_frame_info.layer)) == 4, "ma_dr_mp3dec_frame_info.layer has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3dec_frame_info.layer)));
        assert(((cast(*void)(*instance.bitrate_kbps)) - cast(*void)(*instance)) == 16, "ma_dr_mp3dec_frame_info.bitrate_kbps has unexpected offset % instead of 16", ((cast(*void)(*instance.bitrate_kbps)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_frame_info.bitrate_kbps)) == 4, "ma_dr_mp3dec_frame_info.bitrate_kbps has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3dec_frame_info.bitrate_kbps)));
        assert(size_of(ma_dr_mp3dec_frame_info) == 20, "ma_dr_mp3dec_frame_info has size % instead of 20", size_of(ma_dr_mp3dec_frame_info));
    }

    {
        instance: ma_dr_mp3dec;
        assert(((cast(*void)(*instance.mdct_overlap)) - cast(*void)(*instance)) == 0, "ma_dr_mp3dec.mdct_overlap has unexpected offset % instead of 0", ((cast(*void)(*instance.mdct_overlap)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec.mdct_overlap)) == 2304, "ma_dr_mp3dec.mdct_overlap has unexpected size % instead of 2304", size_of(type_of(ma_dr_mp3dec.mdct_overlap)));
        assert(((cast(*void)(*instance.qmf_state)) - cast(*void)(*instance)) == 2304, "ma_dr_mp3dec.qmf_state has unexpected offset % instead of 2304", ((cast(*void)(*instance.qmf_state)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec.qmf_state)) == 3840, "ma_dr_mp3dec.qmf_state has unexpected size % instead of 3840", size_of(type_of(ma_dr_mp3dec.qmf_state)));
        assert(((cast(*void)(*instance.reserv)) - cast(*void)(*instance)) == 6144, "ma_dr_mp3dec.reserv has unexpected offset % instead of 6144", ((cast(*void)(*instance.reserv)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec.reserv)) == 4, "ma_dr_mp3dec.reserv has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3dec.reserv)));
        assert(((cast(*void)(*instance.free_format_bytes)) - cast(*void)(*instance)) == 6148, "ma_dr_mp3dec.free_format_bytes has unexpected offset % instead of 6148", ((cast(*void)(*instance.free_format_bytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec.free_format_bytes)) == 4, "ma_dr_mp3dec.free_format_bytes has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3dec.free_format_bytes)));
        assert(((cast(*void)(*instance.header)) - cast(*void)(*instance)) == 6152, "ma_dr_mp3dec.header has unexpected offset % instead of 6152", ((cast(*void)(*instance.header)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec.header)) == 4, "ma_dr_mp3dec.header has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3dec.header)));
        assert(((cast(*void)(*instance.reserv_buf)) - cast(*void)(*instance)) == 6156, "ma_dr_mp3dec.reserv_buf has unexpected offset % instead of 6156", ((cast(*void)(*instance.reserv_buf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec.reserv_buf)) == 511, "ma_dr_mp3dec.reserv_buf has unexpected size % instead of 511", size_of(type_of(ma_dr_mp3dec.reserv_buf)));
        assert(size_of(ma_dr_mp3dec) == 6668, "ma_dr_mp3dec has size % instead of 6668", size_of(ma_dr_mp3dec));
    }

    {
        instance: ma_dr_mp3_seek_point;
        assert(((cast(*void)(*instance.seekPosInBytes)) - cast(*void)(*instance)) == 0, "ma_dr_mp3_seek_point.seekPosInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.seekPosInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_seek_point.seekPosInBytes)) == 8, "ma_dr_mp3_seek_point.seekPosInBytes has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3_seek_point.seekPosInBytes)));
        assert(((cast(*void)(*instance.pcmFrameIndex)) - cast(*void)(*instance)) == 8, "ma_dr_mp3_seek_point.pcmFrameIndex has unexpected offset % instead of 8", ((cast(*void)(*instance.pcmFrameIndex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_seek_point.pcmFrameIndex)) == 8, "ma_dr_mp3_seek_point.pcmFrameIndex has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3_seek_point.pcmFrameIndex)));
        assert(((cast(*void)(*instance.mp3FramesToDiscard)) - cast(*void)(*instance)) == 16, "ma_dr_mp3_seek_point.mp3FramesToDiscard has unexpected offset % instead of 16", ((cast(*void)(*instance.mp3FramesToDiscard)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_seek_point.mp3FramesToDiscard)) == 2, "ma_dr_mp3_seek_point.mp3FramesToDiscard has unexpected size % instead of 2", size_of(type_of(ma_dr_mp3_seek_point.mp3FramesToDiscard)));
        assert(((cast(*void)(*instance.pcmFramesToDiscard)) - cast(*void)(*instance)) == 18, "ma_dr_mp3_seek_point.pcmFramesToDiscard has unexpected offset % instead of 18", ((cast(*void)(*instance.pcmFramesToDiscard)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_seek_point.pcmFramesToDiscard)) == 2, "ma_dr_mp3_seek_point.pcmFramesToDiscard has unexpected size % instead of 2", size_of(type_of(ma_dr_mp3_seek_point.pcmFramesToDiscard)));
        assert(size_of(ma_dr_mp3_seek_point) == 24, "ma_dr_mp3_seek_point has size % instead of 24", size_of(ma_dr_mp3_seek_point));
    }

    {
        instance: ma_dr_mp3_config;
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 0, "ma_dr_mp3_config.channels has unexpected offset % instead of 0", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_config.channels)) == 4, "ma_dr_mp3_config.channels has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3_config.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 4, "ma_dr_mp3_config.sampleRate has unexpected offset % instead of 4", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_config.sampleRate)) == 4, "ma_dr_mp3_config.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3_config.sampleRate)));
        assert(size_of(ma_dr_mp3_config) == 8, "ma_dr_mp3_config has size % instead of 8", size_of(ma_dr_mp3_config));
    }

    {
        instance: ma_dr_mp3;
        assert(((cast(*void)(*instance.decoder)) - cast(*void)(*instance)) == 0, "ma_dr_mp3.decoder has unexpected offset % instead of 0", ((cast(*void)(*instance.decoder)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.decoder)) == 6668, "ma_dr_mp3.decoder has unexpected size % instead of 6668", size_of(type_of(ma_dr_mp3.decoder)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 6668, "ma_dr_mp3.channels has unexpected offset % instead of 6668", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.channels)) == 4, "ma_dr_mp3.channels has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3.channels)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 6672, "ma_dr_mp3.sampleRate has unexpected offset % instead of 6672", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.sampleRate)) == 4, "ma_dr_mp3.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3.sampleRate)));
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 6680, "ma_dr_mp3.onRead has unexpected offset % instead of 6680", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.onRead)) == 8, "ma_dr_mp3.onRead has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3.onRead)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 6688, "ma_dr_mp3.onSeek has unexpected offset % instead of 6688", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.onSeek)) == 8, "ma_dr_mp3.onSeek has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3.onSeek)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 6696, "ma_dr_mp3.pUserData has unexpected offset % instead of 6696", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.pUserData)) == 8, "ma_dr_mp3.pUserData has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3.pUserData)));
        assert(((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)) == 6704, "ma_dr_mp3.allocationCallbacks has unexpected offset % instead of 6704", ((cast(*void)(*instance.allocationCallbacks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.allocationCallbacks)) == 32, "ma_dr_mp3.allocationCallbacks has unexpected size % instead of 32", size_of(type_of(ma_dr_mp3.allocationCallbacks)));
        assert(((cast(*void)(*instance.mp3FrameChannels)) - cast(*void)(*instance)) == 6736, "ma_dr_mp3.mp3FrameChannels has unexpected offset % instead of 6736", ((cast(*void)(*instance.mp3FrameChannels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.mp3FrameChannels)) == 4, "ma_dr_mp3.mp3FrameChannels has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3.mp3FrameChannels)));
        assert(((cast(*void)(*instance.mp3FrameSampleRate)) - cast(*void)(*instance)) == 6740, "ma_dr_mp3.mp3FrameSampleRate has unexpected offset % instead of 6740", ((cast(*void)(*instance.mp3FrameSampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.mp3FrameSampleRate)) == 4, "ma_dr_mp3.mp3FrameSampleRate has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3.mp3FrameSampleRate)));
        assert(((cast(*void)(*instance.pcmFramesConsumedInMP3Frame)) - cast(*void)(*instance)) == 6744, "ma_dr_mp3.pcmFramesConsumedInMP3Frame has unexpected offset % instead of 6744", ((cast(*void)(*instance.pcmFramesConsumedInMP3Frame)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.pcmFramesConsumedInMP3Frame)) == 4, "ma_dr_mp3.pcmFramesConsumedInMP3Frame has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3.pcmFramesConsumedInMP3Frame)));
        assert(((cast(*void)(*instance.pcmFramesRemainingInMP3Frame)) - cast(*void)(*instance)) == 6748, "ma_dr_mp3.pcmFramesRemainingInMP3Frame has unexpected offset % instead of 6748", ((cast(*void)(*instance.pcmFramesRemainingInMP3Frame)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.pcmFramesRemainingInMP3Frame)) == 4, "ma_dr_mp3.pcmFramesRemainingInMP3Frame has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3.pcmFramesRemainingInMP3Frame)));
        assert(((cast(*void)(*instance.pcmFrames)) - cast(*void)(*instance)) == 6752, "ma_dr_mp3.pcmFrames has unexpected offset % instead of 6752", ((cast(*void)(*instance.pcmFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.pcmFrames)) == 9216, "ma_dr_mp3.pcmFrames has unexpected size % instead of 9216", size_of(type_of(ma_dr_mp3.pcmFrames)));
        assert(((cast(*void)(*instance.currentPCMFrame)) - cast(*void)(*instance)) == 15968, "ma_dr_mp3.currentPCMFrame has unexpected offset % instead of 15968", ((cast(*void)(*instance.currentPCMFrame)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.currentPCMFrame)) == 8, "ma_dr_mp3.currentPCMFrame has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3.currentPCMFrame)));
        assert(((cast(*void)(*instance.streamCursor)) - cast(*void)(*instance)) == 15976, "ma_dr_mp3.streamCursor has unexpected offset % instead of 15976", ((cast(*void)(*instance.streamCursor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.streamCursor)) == 8, "ma_dr_mp3.streamCursor has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3.streamCursor)));
        assert(((cast(*void)(*instance.pSeekPoints)) - cast(*void)(*instance)) == 15984, "ma_dr_mp3.pSeekPoints has unexpected offset % instead of 15984", ((cast(*void)(*instance.pSeekPoints)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.pSeekPoints)) == 8, "ma_dr_mp3.pSeekPoints has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3.pSeekPoints)));
        assert(((cast(*void)(*instance.seekPointCount)) - cast(*void)(*instance)) == 15992, "ma_dr_mp3.seekPointCount has unexpected offset % instead of 15992", ((cast(*void)(*instance.seekPointCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.seekPointCount)) == 4, "ma_dr_mp3.seekPointCount has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3.seekPointCount)));
        assert(((cast(*void)(*instance.dataSize)) - cast(*void)(*instance)) == 16000, "ma_dr_mp3.dataSize has unexpected offset % instead of 16000", ((cast(*void)(*instance.dataSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.dataSize)) == 8, "ma_dr_mp3.dataSize has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3.dataSize)));
        assert(((cast(*void)(*instance.dataCapacity)) - cast(*void)(*instance)) == 16008, "ma_dr_mp3.dataCapacity has unexpected offset % instead of 16008", ((cast(*void)(*instance.dataCapacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.dataCapacity)) == 8, "ma_dr_mp3.dataCapacity has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3.dataCapacity)));
        assert(((cast(*void)(*instance.dataConsumed)) - cast(*void)(*instance)) == 16016, "ma_dr_mp3.dataConsumed has unexpected offset % instead of 16016", ((cast(*void)(*instance.dataConsumed)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.dataConsumed)) == 8, "ma_dr_mp3.dataConsumed has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3.dataConsumed)));
        assert(((cast(*void)(*instance.pData)) - cast(*void)(*instance)) == 16024, "ma_dr_mp3.pData has unexpected offset % instead of 16024", ((cast(*void)(*instance.pData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.pData)) == 8, "ma_dr_mp3.pData has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3.pData)));
        assert(((cast(*void)(*instance.atEnd)) - cast(*void)(*instance)) == 16032, "ma_dr_mp3.atEnd has unexpected offset % instead of 16032", ((cast(*void)(*instance.atEnd)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.atEnd)) == 1, "ma_dr_mp3.atEnd has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3.atEnd)));
        assert(((cast(*void)(*instance.memory)) - cast(*void)(*instance)) == 16040, "ma_dr_mp3.memory has unexpected offset % instead of 16040", ((cast(*void)(*instance.memory)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3.memory)) == 24, "ma_dr_mp3.memory has unexpected size % instead of 24", size_of(type_of(ma_dr_mp3.memory)));
        assert(size_of(ma_dr_mp3) == 16064, "ma_dr_mp3 has size % instead of 16064", size_of(ma_dr_mp3));
    }

    {
        instance: ma_wav;
        assert(((cast(*void)(*instance.ds)) - cast(*void)(*instance)) == 0, "ma_wav.ds has unexpected offset % instead of 0", ((cast(*void)(*instance.ds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_wav.ds)) == 72, "ma_wav.ds has unexpected size % instead of 72", size_of(type_of(ma_wav.ds)));
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 72, "ma_wav.onRead has unexpected offset % instead of 72", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_wav.onRead)) == 8, "ma_wav.onRead has unexpected size % instead of 8", size_of(type_of(ma_wav.onRead)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 80, "ma_wav.onSeek has unexpected offset % instead of 80", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_wav.onSeek)) == 8, "ma_wav.onSeek has unexpected size % instead of 8", size_of(type_of(ma_wav.onSeek)));
        assert(((cast(*void)(*instance.onTell)) - cast(*void)(*instance)) == 88, "ma_wav.onTell has unexpected offset % instead of 88", ((cast(*void)(*instance.onTell)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_wav.onTell)) == 8, "ma_wav.onTell has unexpected size % instead of 8", size_of(type_of(ma_wav.onTell)));
        assert(((cast(*void)(*instance.pReadSeekTellUserData)) - cast(*void)(*instance)) == 96, "ma_wav.pReadSeekTellUserData has unexpected offset % instead of 96", ((cast(*void)(*instance.pReadSeekTellUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_wav.pReadSeekTellUserData)) == 8, "ma_wav.pReadSeekTellUserData has unexpected size % instead of 8", size_of(type_of(ma_wav.pReadSeekTellUserData)));
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 104, "ma_wav.format has unexpected offset % instead of 104", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_wav.format)) == 4, "ma_wav.format has unexpected size % instead of 4", size_of(type_of(ma_wav.format)));
        assert(((cast(*void)(*instance.dr)) - cast(*void)(*instance)) == 112, "ma_wav.dr has unexpected offset % instead of 112", ((cast(*void)(*instance.dr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_wav.dr)) == 400, "ma_wav.dr has unexpected size % instead of 400", size_of(type_of(ma_wav.dr)));
        assert(size_of(ma_wav) == 512, "ma_wav has size % instead of 512", size_of(ma_wav));
    }

    {
        instance: ma_flac;
        assert(((cast(*void)(*instance.ds)) - cast(*void)(*instance)) == 0, "ma_flac.ds has unexpected offset % instead of 0", ((cast(*void)(*instance.ds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_flac.ds)) == 72, "ma_flac.ds has unexpected size % instead of 72", size_of(type_of(ma_flac.ds)));
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 72, "ma_flac.onRead has unexpected offset % instead of 72", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_flac.onRead)) == 8, "ma_flac.onRead has unexpected size % instead of 8", size_of(type_of(ma_flac.onRead)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 80, "ma_flac.onSeek has unexpected offset % instead of 80", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_flac.onSeek)) == 8, "ma_flac.onSeek has unexpected size % instead of 8", size_of(type_of(ma_flac.onSeek)));
        assert(((cast(*void)(*instance.onTell)) - cast(*void)(*instance)) == 88, "ma_flac.onTell has unexpected offset % instead of 88", ((cast(*void)(*instance.onTell)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_flac.onTell)) == 8, "ma_flac.onTell has unexpected size % instead of 8", size_of(type_of(ma_flac.onTell)));
        assert(((cast(*void)(*instance.pReadSeekTellUserData)) - cast(*void)(*instance)) == 96, "ma_flac.pReadSeekTellUserData has unexpected offset % instead of 96", ((cast(*void)(*instance.pReadSeekTellUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_flac.pReadSeekTellUserData)) == 8, "ma_flac.pReadSeekTellUserData has unexpected size % instead of 8", size_of(type_of(ma_flac.pReadSeekTellUserData)));
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 104, "ma_flac.format has unexpected offset % instead of 104", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_flac.format)) == 4, "ma_flac.format has unexpected size % instead of 4", size_of(type_of(ma_flac.format)));
        assert(((cast(*void)(*instance.dr)) - cast(*void)(*instance)) == 112, "ma_flac.dr has unexpected offset % instead of 112", ((cast(*void)(*instance.dr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_flac.dr)) == 8, "ma_flac.dr has unexpected size % instead of 8", size_of(type_of(ma_flac.dr)));
        assert(size_of(ma_flac) == 120, "ma_flac has size % instead of 120", size_of(ma_flac));
    }

    {
        instance: ma_mp3;
        assert(((cast(*void)(*instance.ds)) - cast(*void)(*instance)) == 0, "ma_mp3.ds has unexpected offset % instead of 0", ((cast(*void)(*instance.ds)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_mp3.ds)) == 72, "ma_mp3.ds has unexpected size % instead of 72", size_of(type_of(ma_mp3.ds)));
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 72, "ma_mp3.onRead has unexpected offset % instead of 72", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_mp3.onRead)) == 8, "ma_mp3.onRead has unexpected size % instead of 8", size_of(type_of(ma_mp3.onRead)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 80, "ma_mp3.onSeek has unexpected offset % instead of 80", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_mp3.onSeek)) == 8, "ma_mp3.onSeek has unexpected size % instead of 8", size_of(type_of(ma_mp3.onSeek)));
        assert(((cast(*void)(*instance.onTell)) - cast(*void)(*instance)) == 88, "ma_mp3.onTell has unexpected offset % instead of 88", ((cast(*void)(*instance.onTell)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_mp3.onTell)) == 8, "ma_mp3.onTell has unexpected size % instead of 8", size_of(type_of(ma_mp3.onTell)));
        assert(((cast(*void)(*instance.pReadSeekTellUserData)) - cast(*void)(*instance)) == 96, "ma_mp3.pReadSeekTellUserData has unexpected offset % instead of 96", ((cast(*void)(*instance.pReadSeekTellUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_mp3.pReadSeekTellUserData)) == 8, "ma_mp3.pReadSeekTellUserData has unexpected size % instead of 8", size_of(type_of(ma_mp3.pReadSeekTellUserData)));
        assert(((cast(*void)(*instance.format)) - cast(*void)(*instance)) == 104, "ma_mp3.format has unexpected offset % instead of 104", ((cast(*void)(*instance.format)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_mp3.format)) == 4, "ma_mp3.format has unexpected size % instead of 4", size_of(type_of(ma_mp3.format)));
        assert(((cast(*void)(*instance.dr)) - cast(*void)(*instance)) == 112, "ma_mp3.dr has unexpected offset % instead of 112", ((cast(*void)(*instance.dr)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_mp3.dr)) == 16064, "ma_mp3.dr has unexpected size % instead of 16064", size_of(type_of(ma_mp3.dr)));
        assert(((cast(*void)(*instance.seekPointCount)) - cast(*void)(*instance)) == 16176, "ma_mp3.seekPointCount has unexpected offset % instead of 16176", ((cast(*void)(*instance.seekPointCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_mp3.seekPointCount)) == 4, "ma_mp3.seekPointCount has unexpected size % instead of 4", size_of(type_of(ma_mp3.seekPointCount)));
        assert(((cast(*void)(*instance.pSeekPoints)) - cast(*void)(*instance)) == 16184, "ma_mp3.pSeekPoints has unexpected offset % instead of 16184", ((cast(*void)(*instance.pSeekPoints)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_mp3.pSeekPoints)) == 8, "ma_mp3.pSeekPoints has unexpected size % instead of 8", size_of(type_of(ma_mp3.pSeekPoints)));
        assert(size_of(ma_mp3) == 16192, "ma_mp3 has size % instead of 16192", size_of(ma_mp3));
    }

    {
        instance: ma_noise_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_noise_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise_heap_layout.sizeInBytes)) == 8, "ma_noise_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_noise_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.pink)) - cast(*void)(*instance)) == 8, "ma_noise_heap_layout.pink has unexpected offset % instead of 8", ((cast(*void)(*instance.pink)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise_heap_layout.pink)) == 24, "ma_noise_heap_layout.pink has unexpected size % instead of 24", size_of(type_of(ma_noise_heap_layout.pink)));
        assert(((cast(*void)(*instance.brownian)) - cast(*void)(*instance)) == 32, "ma_noise_heap_layout.brownian has unexpected offset % instead of 32", ((cast(*void)(*instance.brownian)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_noise_heap_layout.brownian)) == 8, "ma_noise_heap_layout.brownian has unexpected size % instead of 8", size_of(type_of(ma_noise_heap_layout.brownian)));
        assert(size_of(ma_noise_heap_layout) == 40, "ma_noise_heap_layout has size % instead of 40", size_of(ma_noise_heap_layout));
    }

    {
        instance: ma_resource_manager_inline_notification;
        assert(((cast(*void)(*instance.backend)) - cast(*void)(*instance)) == 0, "ma_resource_manager_inline_notification.backend has unexpected offset % instead of 0", ((cast(*void)(*instance.backend)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_inline_notification.backend)) == 128, "ma_resource_manager_inline_notification.backend has unexpected size % instead of 128", size_of(type_of(ma_resource_manager_inline_notification.backend)));
        assert(((cast(*void)(*instance.pResourceManager)) - cast(*void)(*instance)) == 128, "ma_resource_manager_inline_notification.pResourceManager has unexpected offset % instead of 128", ((cast(*void)(*instance.pResourceManager)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_resource_manager_inline_notification.pResourceManager)) == 8, "ma_resource_manager_inline_notification.pResourceManager has unexpected size % instead of 8", size_of(type_of(ma_resource_manager_inline_notification.pResourceManager)));
        assert(size_of(ma_resource_manager_inline_notification) == 136, "ma_resource_manager_inline_notification has size % instead of 136", size_of(ma_resource_manager_inline_notification));
    }

    {
        instance: ma_node_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_node_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_heap_layout.sizeInBytes)) == 8, "ma_node_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_node_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.inputBusOffset)) - cast(*void)(*instance)) == 8, "ma_node_heap_layout.inputBusOffset has unexpected offset % instead of 8", ((cast(*void)(*instance.inputBusOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_heap_layout.inputBusOffset)) == 8, "ma_node_heap_layout.inputBusOffset has unexpected size % instead of 8", size_of(type_of(ma_node_heap_layout.inputBusOffset)));
        assert(((cast(*void)(*instance.outputBusOffset)) - cast(*void)(*instance)) == 16, "ma_node_heap_layout.outputBusOffset has unexpected offset % instead of 16", ((cast(*void)(*instance.outputBusOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_heap_layout.outputBusOffset)) == 8, "ma_node_heap_layout.outputBusOffset has unexpected size % instead of 8", size_of(type_of(ma_node_heap_layout.outputBusOffset)));
        assert(((cast(*void)(*instance.cachedDataOffset)) - cast(*void)(*instance)) == 24, "ma_node_heap_layout.cachedDataOffset has unexpected offset % instead of 24", ((cast(*void)(*instance.cachedDataOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_heap_layout.cachedDataOffset)) == 8, "ma_node_heap_layout.cachedDataOffset has unexpected size % instead of 8", size_of(type_of(ma_node_heap_layout.cachedDataOffset)));
        assert(((cast(*void)(*instance.inputBusCount)) - cast(*void)(*instance)) == 32, "ma_node_heap_layout.inputBusCount has unexpected offset % instead of 32", ((cast(*void)(*instance.inputBusCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_heap_layout.inputBusCount)) == 4, "ma_node_heap_layout.inputBusCount has unexpected size % instead of 4", size_of(type_of(ma_node_heap_layout.inputBusCount)));
        assert(((cast(*void)(*instance.outputBusCount)) - cast(*void)(*instance)) == 36, "ma_node_heap_layout.outputBusCount has unexpected offset % instead of 36", ((cast(*void)(*instance.outputBusCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_node_heap_layout.outputBusCount)) == 4, "ma_node_heap_layout.outputBusCount has unexpected size % instead of 4", size_of(type_of(ma_node_heap_layout.outputBusCount)));
        assert(size_of(ma_node_heap_layout) == 40, "ma_node_heap_layout has size % instead of 40", size_of(ma_node_heap_layout));
    }

    {
        instance: ma_engine_node_heap_layout;
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 0, "ma_engine_node_heap_layout.sizeInBytes has unexpected offset % instead of 0", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_heap_layout.sizeInBytes)) == 8, "ma_engine_node_heap_layout.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_engine_node_heap_layout.sizeInBytes)));
        assert(((cast(*void)(*instance.baseNodeOffset)) - cast(*void)(*instance)) == 8, "ma_engine_node_heap_layout.baseNodeOffset has unexpected offset % instead of 8", ((cast(*void)(*instance.baseNodeOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_heap_layout.baseNodeOffset)) == 8, "ma_engine_node_heap_layout.baseNodeOffset has unexpected size % instead of 8", size_of(type_of(ma_engine_node_heap_layout.baseNodeOffset)));
        assert(((cast(*void)(*instance.resamplerOffset)) - cast(*void)(*instance)) == 16, "ma_engine_node_heap_layout.resamplerOffset has unexpected offset % instead of 16", ((cast(*void)(*instance.resamplerOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_heap_layout.resamplerOffset)) == 8, "ma_engine_node_heap_layout.resamplerOffset has unexpected size % instead of 8", size_of(type_of(ma_engine_node_heap_layout.resamplerOffset)));
        assert(((cast(*void)(*instance.spatializerOffset)) - cast(*void)(*instance)) == 24, "ma_engine_node_heap_layout.spatializerOffset has unexpected offset % instead of 24", ((cast(*void)(*instance.spatializerOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_heap_layout.spatializerOffset)) == 8, "ma_engine_node_heap_layout.spatializerOffset has unexpected size % instead of 8", size_of(type_of(ma_engine_node_heap_layout.spatializerOffset)));
        assert(((cast(*void)(*instance.gainerOffset)) - cast(*void)(*instance)) == 32, "ma_engine_node_heap_layout.gainerOffset has unexpected offset % instead of 32", ((cast(*void)(*instance.gainerOffset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_engine_node_heap_layout.gainerOffset)) == 8, "ma_engine_node_heap_layout.gainerOffset has unexpected size % instead of 8", size_of(type_of(ma_engine_node_heap_layout.gainerOffset)));
        assert(size_of(ma_engine_node_heap_layout) == 40, "ma_engine_node_heap_layout has size % instead of 40", size_of(ma_engine_node_heap_layout));
    }

    {
        instance: ma_dr_wav__metadata_parser;
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 0, "ma_dr_wav__metadata_parser.onRead has unexpected offset % instead of 0", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__metadata_parser.onRead)) == 8, "ma_dr_wav__metadata_parser.onRead has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__metadata_parser.onRead)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 8, "ma_dr_wav__metadata_parser.onSeek has unexpected offset % instead of 8", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__metadata_parser.onSeek)) == 8, "ma_dr_wav__metadata_parser.onSeek has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__metadata_parser.onSeek)));
        assert(((cast(*void)(*instance.pReadSeekUserData)) - cast(*void)(*instance)) == 16, "ma_dr_wav__metadata_parser.pReadSeekUserData has unexpected offset % instead of 16", ((cast(*void)(*instance.pReadSeekUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__metadata_parser.pReadSeekUserData)) == 8, "ma_dr_wav__metadata_parser.pReadSeekUserData has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__metadata_parser.pReadSeekUserData)));
        assert(((cast(*void)(*instance.stage)) - cast(*void)(*instance)) == 24, "ma_dr_wav__metadata_parser.stage has unexpected offset % instead of 24", ((cast(*void)(*instance.stage)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__metadata_parser.stage)) == 4, "ma_dr_wav__metadata_parser.stage has unexpected size % instead of 4", size_of(type_of(ma_dr_wav__metadata_parser.stage)));
        assert(((cast(*void)(*instance.pMetadata)) - cast(*void)(*instance)) == 32, "ma_dr_wav__metadata_parser.pMetadata has unexpected offset % instead of 32", ((cast(*void)(*instance.pMetadata)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__metadata_parser.pMetadata)) == 8, "ma_dr_wav__metadata_parser.pMetadata has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__metadata_parser.pMetadata)));
        assert(((cast(*void)(*instance.metadataCount)) - cast(*void)(*instance)) == 40, "ma_dr_wav__metadata_parser.metadataCount has unexpected offset % instead of 40", ((cast(*void)(*instance.metadataCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__metadata_parser.metadataCount)) == 4, "ma_dr_wav__metadata_parser.metadataCount has unexpected size % instead of 4", size_of(type_of(ma_dr_wav__metadata_parser.metadataCount)));
        assert(((cast(*void)(*instance.pData)) - cast(*void)(*instance)) == 48, "ma_dr_wav__metadata_parser.pData has unexpected offset % instead of 48", ((cast(*void)(*instance.pData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__metadata_parser.pData)) == 8, "ma_dr_wav__metadata_parser.pData has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__metadata_parser.pData)));
        assert(((cast(*void)(*instance.pDataCursor)) - cast(*void)(*instance)) == 56, "ma_dr_wav__metadata_parser.pDataCursor has unexpected offset % instead of 56", ((cast(*void)(*instance.pDataCursor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__metadata_parser.pDataCursor)) == 8, "ma_dr_wav__metadata_parser.pDataCursor has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__metadata_parser.pDataCursor)));
        assert(((cast(*void)(*instance.metadataCursor)) - cast(*void)(*instance)) == 64, "ma_dr_wav__metadata_parser.metadataCursor has unexpected offset % instead of 64", ((cast(*void)(*instance.metadataCursor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__metadata_parser.metadataCursor)) == 8, "ma_dr_wav__metadata_parser.metadataCursor has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__metadata_parser.metadataCursor)));
        assert(((cast(*void)(*instance.extraCapacity)) - cast(*void)(*instance)) == 72, "ma_dr_wav__metadata_parser.extraCapacity has unexpected offset % instead of 72", ((cast(*void)(*instance.extraCapacity)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav__metadata_parser.extraCapacity)) == 8, "ma_dr_wav__metadata_parser.extraCapacity has unexpected size % instead of 8", size_of(type_of(ma_dr_wav__metadata_parser.extraCapacity)));
        assert(size_of(ma_dr_wav__metadata_parser) == 80, "ma_dr_wav__metadata_parser has size % instead of 80", size_of(ma_dr_wav__metadata_parser));
    }

    {
        instance: ma_dr_wav_buffer_reader;
        assert(((cast(*void)(*instance.pBuffer)) - cast(*void)(*instance)) == 0, "ma_dr_wav_buffer_reader.pBuffer has unexpected offset % instead of 0", ((cast(*void)(*instance.pBuffer)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_buffer_reader.pBuffer)) == 8, "ma_dr_wav_buffer_reader.pBuffer has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_buffer_reader.pBuffer)));
        assert(((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)) == 8, "ma_dr_wav_buffer_reader.sizeInBytes has unexpected offset % instead of 8", ((cast(*void)(*instance.sizeInBytes)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_buffer_reader.sizeInBytes)) == 8, "ma_dr_wav_buffer_reader.sizeInBytes has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_buffer_reader.sizeInBytes)));
        assert(((cast(*void)(*instance.cursor)) - cast(*void)(*instance)) == 16, "ma_dr_wav_buffer_reader.cursor has unexpected offset % instead of 16", ((cast(*void)(*instance.cursor)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_wav_buffer_reader.cursor)) == 8, "ma_dr_wav_buffer_reader.cursor has unexpected size % instead of 8", size_of(type_of(ma_dr_wav_buffer_reader.cursor)));
        assert(size_of(ma_dr_wav_buffer_reader) == 24, "ma_dr_wav_buffer_reader has size % instead of 24", size_of(ma_dr_wav_buffer_reader));
    }

    {
        instance: ma_dr_flac_ogg_page_header;
        assert(((cast(*void)(*instance.capturePattern)) - cast(*void)(*instance)) == 0, "ma_dr_flac_ogg_page_header.capturePattern has unexpected offset % instead of 0", ((cast(*void)(*instance.capturePattern)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_ogg_page_header.capturePattern)) == 4, "ma_dr_flac_ogg_page_header.capturePattern has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_ogg_page_header.capturePattern)));
        assert(((cast(*void)(*instance.structureVersion)) - cast(*void)(*instance)) == 4, "ma_dr_flac_ogg_page_header.structureVersion has unexpected offset % instead of 4", ((cast(*void)(*instance.structureVersion)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_ogg_page_header.structureVersion)) == 1, "ma_dr_flac_ogg_page_header.structureVersion has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_ogg_page_header.structureVersion)));
        assert(((cast(*void)(*instance.headerType)) - cast(*void)(*instance)) == 5, "ma_dr_flac_ogg_page_header.headerType has unexpected offset % instead of 5", ((cast(*void)(*instance.headerType)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_ogg_page_header.headerType)) == 1, "ma_dr_flac_ogg_page_header.headerType has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_ogg_page_header.headerType)));
        assert(((cast(*void)(*instance.granulePosition)) - cast(*void)(*instance)) == 8, "ma_dr_flac_ogg_page_header.granulePosition has unexpected offset % instead of 8", ((cast(*void)(*instance.granulePosition)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_ogg_page_header.granulePosition)) == 8, "ma_dr_flac_ogg_page_header.granulePosition has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_ogg_page_header.granulePosition)));
        assert(((cast(*void)(*instance.serialNumber)) - cast(*void)(*instance)) == 16, "ma_dr_flac_ogg_page_header.serialNumber has unexpected offset % instead of 16", ((cast(*void)(*instance.serialNumber)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_ogg_page_header.serialNumber)) == 4, "ma_dr_flac_ogg_page_header.serialNumber has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_ogg_page_header.serialNumber)));
        assert(((cast(*void)(*instance.sequenceNumber)) - cast(*void)(*instance)) == 20, "ma_dr_flac_ogg_page_header.sequenceNumber has unexpected offset % instead of 20", ((cast(*void)(*instance.sequenceNumber)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_ogg_page_header.sequenceNumber)) == 4, "ma_dr_flac_ogg_page_header.sequenceNumber has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_ogg_page_header.sequenceNumber)));
        assert(((cast(*void)(*instance.checksum)) - cast(*void)(*instance)) == 24, "ma_dr_flac_ogg_page_header.checksum has unexpected offset % instead of 24", ((cast(*void)(*instance.checksum)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_ogg_page_header.checksum)) == 4, "ma_dr_flac_ogg_page_header.checksum has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_ogg_page_header.checksum)));
        assert(((cast(*void)(*instance.segmentCount)) - cast(*void)(*instance)) == 28, "ma_dr_flac_ogg_page_header.segmentCount has unexpected offset % instead of 28", ((cast(*void)(*instance.segmentCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_ogg_page_header.segmentCount)) == 1, "ma_dr_flac_ogg_page_header.segmentCount has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_ogg_page_header.segmentCount)));
        assert(((cast(*void)(*instance.segmentTable)) - cast(*void)(*instance)) == 29, "ma_dr_flac_ogg_page_header.segmentTable has unexpected offset % instead of 29", ((cast(*void)(*instance.segmentTable)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_ogg_page_header.segmentTable)) == 255, "ma_dr_flac_ogg_page_header.segmentTable has unexpected size % instead of 255", size_of(type_of(ma_dr_flac_ogg_page_header.segmentTable)));
        assert(size_of(ma_dr_flac_ogg_page_header) == 288, "ma_dr_flac_ogg_page_header has size % instead of 288", size_of(ma_dr_flac_ogg_page_header));
    }

    {
        instance: ma_dr_flac_init_info;
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 0, "ma_dr_flac_init_info.onRead has unexpected offset % instead of 0", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.onRead)) == 8, "ma_dr_flac_init_info.onRead has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_init_info.onRead)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 8, "ma_dr_flac_init_info.onSeek has unexpected offset % instead of 8", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.onSeek)) == 8, "ma_dr_flac_init_info.onSeek has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_init_info.onSeek)));
        assert(((cast(*void)(*instance.onMeta)) - cast(*void)(*instance)) == 16, "ma_dr_flac_init_info.onMeta has unexpected offset % instead of 16", ((cast(*void)(*instance.onMeta)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.onMeta)) == 8, "ma_dr_flac_init_info.onMeta has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_init_info.onMeta)));
        assert(((cast(*void)(*instance.container)) - cast(*void)(*instance)) == 24, "ma_dr_flac_init_info.container has unexpected offset % instead of 24", ((cast(*void)(*instance.container)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.container)) == 4, "ma_dr_flac_init_info.container has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_init_info.container)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 32, "ma_dr_flac_init_info.pUserData has unexpected offset % instead of 32", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.pUserData)) == 8, "ma_dr_flac_init_info.pUserData has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_init_info.pUserData)));
        assert(((cast(*void)(*instance.pUserDataMD)) - cast(*void)(*instance)) == 40, "ma_dr_flac_init_info.pUserDataMD has unexpected offset % instead of 40", ((cast(*void)(*instance.pUserDataMD)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.pUserDataMD)) == 8, "ma_dr_flac_init_info.pUserDataMD has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_init_info.pUserDataMD)));
        assert(((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)) == 48, "ma_dr_flac_init_info.sampleRate has unexpected offset % instead of 48", ((cast(*void)(*instance.sampleRate)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.sampleRate)) == 4, "ma_dr_flac_init_info.sampleRate has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_init_info.sampleRate)));
        assert(((cast(*void)(*instance.channels)) - cast(*void)(*instance)) == 52, "ma_dr_flac_init_info.channels has unexpected offset % instead of 52", ((cast(*void)(*instance.channels)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.channels)) == 1, "ma_dr_flac_init_info.channels has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_init_info.channels)));
        assert(((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)) == 53, "ma_dr_flac_init_info.bitsPerSample has unexpected offset % instead of 53", ((cast(*void)(*instance.bitsPerSample)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.bitsPerSample)) == 1, "ma_dr_flac_init_info.bitsPerSample has unexpected size % instead of 1", size_of(type_of(ma_dr_flac_init_info.bitsPerSample)));
        assert(((cast(*void)(*instance.totalPCMFrameCount)) - cast(*void)(*instance)) == 56, "ma_dr_flac_init_info.totalPCMFrameCount has unexpected offset % instead of 56", ((cast(*void)(*instance.totalPCMFrameCount)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.totalPCMFrameCount)) == 8, "ma_dr_flac_init_info.totalPCMFrameCount has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_init_info.totalPCMFrameCount)));
        assert(((cast(*void)(*instance.maxBlockSizeInPCMFrames)) - cast(*void)(*instance)) == 64, "ma_dr_flac_init_info.maxBlockSizeInPCMFrames has unexpected offset % instead of 64", ((cast(*void)(*instance.maxBlockSizeInPCMFrames)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.maxBlockSizeInPCMFrames)) == 2, "ma_dr_flac_init_info.maxBlockSizeInPCMFrames has unexpected size % instead of 2", size_of(type_of(ma_dr_flac_init_info.maxBlockSizeInPCMFrames)));
        assert(((cast(*void)(*instance.runningFilePos)) - cast(*void)(*instance)) == 72, "ma_dr_flac_init_info.runningFilePos has unexpected offset % instead of 72", ((cast(*void)(*instance.runningFilePos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.runningFilePos)) == 8, "ma_dr_flac_init_info.runningFilePos has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_init_info.runningFilePos)));
        assert(((cast(*void)(*instance.hasStreamInfoBlock)) - cast(*void)(*instance)) == 80, "ma_dr_flac_init_info.hasStreamInfoBlock has unexpected offset % instead of 80", ((cast(*void)(*instance.hasStreamInfoBlock)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.hasStreamInfoBlock)) == 4, "ma_dr_flac_init_info.hasStreamInfoBlock has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_init_info.hasStreamInfoBlock)));
        assert(((cast(*void)(*instance.hasMetadataBlocks)) - cast(*void)(*instance)) == 84, "ma_dr_flac_init_info.hasMetadataBlocks has unexpected offset % instead of 84", ((cast(*void)(*instance.hasMetadataBlocks)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.hasMetadataBlocks)) == 4, "ma_dr_flac_init_info.hasMetadataBlocks has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_init_info.hasMetadataBlocks)));
        assert(((cast(*void)(*instance.bs)) - cast(*void)(*instance)) == 88, "ma_dr_flac_init_info.bs has unexpected offset % instead of 88", ((cast(*void)(*instance.bs)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.bs)) == 4176, "ma_dr_flac_init_info.bs has unexpected size % instead of 4176", size_of(type_of(ma_dr_flac_init_info.bs)));
        assert(((cast(*void)(*instance.firstFrameHeader)) - cast(*void)(*instance)) == 4264, "ma_dr_flac_init_info.firstFrameHeader has unexpected offset % instead of 4264", ((cast(*void)(*instance.firstFrameHeader)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.firstFrameHeader)) == 24, "ma_dr_flac_init_info.firstFrameHeader has unexpected size % instead of 24", size_of(type_of(ma_dr_flac_init_info.firstFrameHeader)));
        assert(((cast(*void)(*instance.oggSerial)) - cast(*void)(*instance)) == 4288, "ma_dr_flac_init_info.oggSerial has unexpected offset % instead of 4288", ((cast(*void)(*instance.oggSerial)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.oggSerial)) == 4, "ma_dr_flac_init_info.oggSerial has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_init_info.oggSerial)));
        assert(((cast(*void)(*instance.oggFirstBytePos)) - cast(*void)(*instance)) == 4296, "ma_dr_flac_init_info.oggFirstBytePos has unexpected offset % instead of 4296", ((cast(*void)(*instance.oggFirstBytePos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.oggFirstBytePos)) == 8, "ma_dr_flac_init_info.oggFirstBytePos has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_init_info.oggFirstBytePos)));
        assert(((cast(*void)(*instance.oggBosHeader)) - cast(*void)(*instance)) == 4304, "ma_dr_flac_init_info.oggBosHeader has unexpected offset % instead of 4304", ((cast(*void)(*instance.oggBosHeader)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_init_info.oggBosHeader)) == 288, "ma_dr_flac_init_info.oggBosHeader has unexpected size % instead of 288", size_of(type_of(ma_dr_flac_init_info.oggBosHeader)));
        assert(size_of(ma_dr_flac_init_info) == 4592, "ma_dr_flac_init_info has size % instead of 4592", size_of(ma_dr_flac_init_info));
    }

    {
        instance: ma_dr_flac_oggbs;
        assert(((cast(*void)(*instance.onRead)) - cast(*void)(*instance)) == 0, "ma_dr_flac_oggbs.onRead has unexpected offset % instead of 0", ((cast(*void)(*instance.onRead)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_oggbs.onRead)) == 8, "ma_dr_flac_oggbs.onRead has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_oggbs.onRead)));
        assert(((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)) == 8, "ma_dr_flac_oggbs.onSeek has unexpected offset % instead of 8", ((cast(*void)(*instance.onSeek)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_oggbs.onSeek)) == 8, "ma_dr_flac_oggbs.onSeek has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_oggbs.onSeek)));
        assert(((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)) == 16, "ma_dr_flac_oggbs.pUserData has unexpected offset % instead of 16", ((cast(*void)(*instance.pUserData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_oggbs.pUserData)) == 8, "ma_dr_flac_oggbs.pUserData has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_oggbs.pUserData)));
        assert(((cast(*void)(*instance.currentBytePos)) - cast(*void)(*instance)) == 24, "ma_dr_flac_oggbs.currentBytePos has unexpected offset % instead of 24", ((cast(*void)(*instance.currentBytePos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_oggbs.currentBytePos)) == 8, "ma_dr_flac_oggbs.currentBytePos has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_oggbs.currentBytePos)));
        assert(((cast(*void)(*instance.firstBytePos)) - cast(*void)(*instance)) == 32, "ma_dr_flac_oggbs.firstBytePos has unexpected offset % instead of 32", ((cast(*void)(*instance.firstBytePos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_oggbs.firstBytePos)) == 8, "ma_dr_flac_oggbs.firstBytePos has unexpected size % instead of 8", size_of(type_of(ma_dr_flac_oggbs.firstBytePos)));
        assert(((cast(*void)(*instance.serialNumber)) - cast(*void)(*instance)) == 40, "ma_dr_flac_oggbs.serialNumber has unexpected offset % instead of 40", ((cast(*void)(*instance.serialNumber)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_oggbs.serialNumber)) == 4, "ma_dr_flac_oggbs.serialNumber has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_oggbs.serialNumber)));
        assert(((cast(*void)(*instance.bosPageHeader)) - cast(*void)(*instance)) == 48, "ma_dr_flac_oggbs.bosPageHeader has unexpected offset % instead of 48", ((cast(*void)(*instance.bosPageHeader)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_oggbs.bosPageHeader)) == 288, "ma_dr_flac_oggbs.bosPageHeader has unexpected size % instead of 288", size_of(type_of(ma_dr_flac_oggbs.bosPageHeader)));
        assert(((cast(*void)(*instance.currentPageHeader)) - cast(*void)(*instance)) == 336, "ma_dr_flac_oggbs.currentPageHeader has unexpected offset % instead of 336", ((cast(*void)(*instance.currentPageHeader)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_oggbs.currentPageHeader)) == 288, "ma_dr_flac_oggbs.currentPageHeader has unexpected size % instead of 288", size_of(type_of(ma_dr_flac_oggbs.currentPageHeader)));
        assert(((cast(*void)(*instance.bytesRemainingInPage)) - cast(*void)(*instance)) == 624, "ma_dr_flac_oggbs.bytesRemainingInPage has unexpected offset % instead of 624", ((cast(*void)(*instance.bytesRemainingInPage)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_oggbs.bytesRemainingInPage)) == 4, "ma_dr_flac_oggbs.bytesRemainingInPage has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_oggbs.bytesRemainingInPage)));
        assert(((cast(*void)(*instance.pageDataSize)) - cast(*void)(*instance)) == 628, "ma_dr_flac_oggbs.pageDataSize has unexpected offset % instead of 628", ((cast(*void)(*instance.pageDataSize)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_oggbs.pageDataSize)) == 4, "ma_dr_flac_oggbs.pageDataSize has unexpected size % instead of 4", size_of(type_of(ma_dr_flac_oggbs.pageDataSize)));
        assert(((cast(*void)(*instance.pageData)) - cast(*void)(*instance)) == 632, "ma_dr_flac_oggbs.pageData has unexpected offset % instead of 632", ((cast(*void)(*instance.pageData)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_flac_oggbs.pageData)) == 65307, "ma_dr_flac_oggbs.pageData has unexpected size % instead of 65307", size_of(type_of(ma_dr_flac_oggbs.pageData)));
        assert(size_of(ma_dr_flac_oggbs) == 65944, "ma_dr_flac_oggbs has size % instead of 65944", size_of(ma_dr_flac_oggbs));
    }

    {
        instance: ma_dr_mp3_bs;
        assert(((cast(*void)(*instance.buf)) - cast(*void)(*instance)) == 0, "ma_dr_mp3_bs.buf has unexpected offset % instead of 0", ((cast(*void)(*instance.buf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_bs.buf)) == 8, "ma_dr_mp3_bs.buf has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3_bs.buf)));
        assert(((cast(*void)(*instance.pos)) - cast(*void)(*instance)) == 8, "ma_dr_mp3_bs.pos has unexpected offset % instead of 8", ((cast(*void)(*instance.pos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_bs.pos)) == 4, "ma_dr_mp3_bs.pos has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3_bs.pos)));
        assert(((cast(*void)(*instance.limit)) - cast(*void)(*instance)) == 12, "ma_dr_mp3_bs.limit has unexpected offset % instead of 12", ((cast(*void)(*instance.limit)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_bs.limit)) == 4, "ma_dr_mp3_bs.limit has unexpected size % instead of 4", size_of(type_of(ma_dr_mp3_bs.limit)));
        assert(size_of(ma_dr_mp3_bs) == 16, "ma_dr_mp3_bs has size % instead of 16", size_of(ma_dr_mp3_bs));
    }

    {
        instance: ma_dr_mp3_L12_scale_info;
        assert(((cast(*void)(*instance.scf)) - cast(*void)(*instance)) == 0, "ma_dr_mp3_L12_scale_info.scf has unexpected offset % instead of 0", ((cast(*void)(*instance.scf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L12_scale_info.scf)) == 768, "ma_dr_mp3_L12_scale_info.scf has unexpected size % instead of 768", size_of(type_of(ma_dr_mp3_L12_scale_info.scf)));
        assert(((cast(*void)(*instance.total_bands)) - cast(*void)(*instance)) == 768, "ma_dr_mp3_L12_scale_info.total_bands has unexpected offset % instead of 768", ((cast(*void)(*instance.total_bands)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L12_scale_info.total_bands)) == 1, "ma_dr_mp3_L12_scale_info.total_bands has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L12_scale_info.total_bands)));
        assert(((cast(*void)(*instance.stereo_bands)) - cast(*void)(*instance)) == 769, "ma_dr_mp3_L12_scale_info.stereo_bands has unexpected offset % instead of 769", ((cast(*void)(*instance.stereo_bands)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L12_scale_info.stereo_bands)) == 1, "ma_dr_mp3_L12_scale_info.stereo_bands has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L12_scale_info.stereo_bands)));
        assert(((cast(*void)(*instance.bitalloc)) - cast(*void)(*instance)) == 770, "ma_dr_mp3_L12_scale_info.bitalloc has unexpected offset % instead of 770", ((cast(*void)(*instance.bitalloc)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L12_scale_info.bitalloc)) == 64, "ma_dr_mp3_L12_scale_info.bitalloc has unexpected size % instead of 64", size_of(type_of(ma_dr_mp3_L12_scale_info.bitalloc)));
        assert(((cast(*void)(*instance.scfcod)) - cast(*void)(*instance)) == 834, "ma_dr_mp3_L12_scale_info.scfcod has unexpected offset % instead of 834", ((cast(*void)(*instance.scfcod)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L12_scale_info.scfcod)) == 64, "ma_dr_mp3_L12_scale_info.scfcod has unexpected size % instead of 64", size_of(type_of(ma_dr_mp3_L12_scale_info.scfcod)));
        assert(size_of(ma_dr_mp3_L12_scale_info) == 900, "ma_dr_mp3_L12_scale_info has size % instead of 900", size_of(ma_dr_mp3_L12_scale_info));
    }

    {
        instance: ma_dr_mp3_L12_subband_alloc;
        assert(((cast(*void)(*instance.tab_offset)) - cast(*void)(*instance)) == 0, "ma_dr_mp3_L12_subband_alloc.tab_offset has unexpected offset % instead of 0", ((cast(*void)(*instance.tab_offset)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L12_subband_alloc.tab_offset)) == 1, "ma_dr_mp3_L12_subband_alloc.tab_offset has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L12_subband_alloc.tab_offset)));
        assert(((cast(*void)(*instance.code_tab_width)) - cast(*void)(*instance)) == 1, "ma_dr_mp3_L12_subband_alloc.code_tab_width has unexpected offset % instead of 1", ((cast(*void)(*instance.code_tab_width)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L12_subband_alloc.code_tab_width)) == 1, "ma_dr_mp3_L12_subband_alloc.code_tab_width has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L12_subband_alloc.code_tab_width)));
        assert(((cast(*void)(*instance.band_count)) - cast(*void)(*instance)) == 2, "ma_dr_mp3_L12_subband_alloc.band_count has unexpected offset % instead of 2", ((cast(*void)(*instance.band_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L12_subband_alloc.band_count)) == 1, "ma_dr_mp3_L12_subband_alloc.band_count has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L12_subband_alloc.band_count)));
        assert(size_of(ma_dr_mp3_L12_subband_alloc) == 3, "ma_dr_mp3_L12_subband_alloc has size % instead of 3", size_of(ma_dr_mp3_L12_subband_alloc));
    }

    {
        instance: ma_dr_mp3_L3_gr_info;
        assert(((cast(*void)(*instance.sfbtab)) - cast(*void)(*instance)) == 0, "ma_dr_mp3_L3_gr_info.sfbtab has unexpected offset % instead of 0", ((cast(*void)(*instance.sfbtab)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.sfbtab)) == 8, "ma_dr_mp3_L3_gr_info.sfbtab has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3_L3_gr_info.sfbtab)));
        assert(((cast(*void)(*instance.part_23_length)) - cast(*void)(*instance)) == 8, "ma_dr_mp3_L3_gr_info.part_23_length has unexpected offset % instead of 8", ((cast(*void)(*instance.part_23_length)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.part_23_length)) == 2, "ma_dr_mp3_L3_gr_info.part_23_length has unexpected size % instead of 2", size_of(type_of(ma_dr_mp3_L3_gr_info.part_23_length)));
        assert(((cast(*void)(*instance.big_values)) - cast(*void)(*instance)) == 10, "ma_dr_mp3_L3_gr_info.big_values has unexpected offset % instead of 10", ((cast(*void)(*instance.big_values)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.big_values)) == 2, "ma_dr_mp3_L3_gr_info.big_values has unexpected size % instead of 2", size_of(type_of(ma_dr_mp3_L3_gr_info.big_values)));
        assert(((cast(*void)(*instance.scalefac_compress)) - cast(*void)(*instance)) == 12, "ma_dr_mp3_L3_gr_info.scalefac_compress has unexpected offset % instead of 12", ((cast(*void)(*instance.scalefac_compress)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.scalefac_compress)) == 2, "ma_dr_mp3_L3_gr_info.scalefac_compress has unexpected size % instead of 2", size_of(type_of(ma_dr_mp3_L3_gr_info.scalefac_compress)));
        assert(((cast(*void)(*instance.global_gain)) - cast(*void)(*instance)) == 14, "ma_dr_mp3_L3_gr_info.global_gain has unexpected offset % instead of 14", ((cast(*void)(*instance.global_gain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.global_gain)) == 1, "ma_dr_mp3_L3_gr_info.global_gain has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L3_gr_info.global_gain)));
        assert(((cast(*void)(*instance.block_type)) - cast(*void)(*instance)) == 15, "ma_dr_mp3_L3_gr_info.block_type has unexpected offset % instead of 15", ((cast(*void)(*instance.block_type)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.block_type)) == 1, "ma_dr_mp3_L3_gr_info.block_type has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L3_gr_info.block_type)));
        assert(((cast(*void)(*instance.mixed_block_flag)) - cast(*void)(*instance)) == 16, "ma_dr_mp3_L3_gr_info.mixed_block_flag has unexpected offset % instead of 16", ((cast(*void)(*instance.mixed_block_flag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.mixed_block_flag)) == 1, "ma_dr_mp3_L3_gr_info.mixed_block_flag has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L3_gr_info.mixed_block_flag)));
        assert(((cast(*void)(*instance.n_long_sfb)) - cast(*void)(*instance)) == 17, "ma_dr_mp3_L3_gr_info.n_long_sfb has unexpected offset % instead of 17", ((cast(*void)(*instance.n_long_sfb)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.n_long_sfb)) == 1, "ma_dr_mp3_L3_gr_info.n_long_sfb has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L3_gr_info.n_long_sfb)));
        assert(((cast(*void)(*instance.n_short_sfb)) - cast(*void)(*instance)) == 18, "ma_dr_mp3_L3_gr_info.n_short_sfb has unexpected offset % instead of 18", ((cast(*void)(*instance.n_short_sfb)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.n_short_sfb)) == 1, "ma_dr_mp3_L3_gr_info.n_short_sfb has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L3_gr_info.n_short_sfb)));
        assert(((cast(*void)(*instance.table_select)) - cast(*void)(*instance)) == 19, "ma_dr_mp3_L3_gr_info.table_select has unexpected offset % instead of 19", ((cast(*void)(*instance.table_select)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.table_select)) == 3, "ma_dr_mp3_L3_gr_info.table_select has unexpected size % instead of 3", size_of(type_of(ma_dr_mp3_L3_gr_info.table_select)));
        assert(((cast(*void)(*instance.region_count)) - cast(*void)(*instance)) == 22, "ma_dr_mp3_L3_gr_info.region_count has unexpected offset % instead of 22", ((cast(*void)(*instance.region_count)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.region_count)) == 3, "ma_dr_mp3_L3_gr_info.region_count has unexpected size % instead of 3", size_of(type_of(ma_dr_mp3_L3_gr_info.region_count)));
        assert(((cast(*void)(*instance.subblock_gain)) - cast(*void)(*instance)) == 25, "ma_dr_mp3_L3_gr_info.subblock_gain has unexpected offset % instead of 25", ((cast(*void)(*instance.subblock_gain)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.subblock_gain)) == 3, "ma_dr_mp3_L3_gr_info.subblock_gain has unexpected size % instead of 3", size_of(type_of(ma_dr_mp3_L3_gr_info.subblock_gain)));
        assert(((cast(*void)(*instance.preflag)) - cast(*void)(*instance)) == 28, "ma_dr_mp3_L3_gr_info.preflag has unexpected offset % instead of 28", ((cast(*void)(*instance.preflag)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.preflag)) == 1, "ma_dr_mp3_L3_gr_info.preflag has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L3_gr_info.preflag)));
        assert(((cast(*void)(*instance.scalefac_scale)) - cast(*void)(*instance)) == 29, "ma_dr_mp3_L3_gr_info.scalefac_scale has unexpected offset % instead of 29", ((cast(*void)(*instance.scalefac_scale)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.scalefac_scale)) == 1, "ma_dr_mp3_L3_gr_info.scalefac_scale has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L3_gr_info.scalefac_scale)));
        assert(((cast(*void)(*instance.count1_table)) - cast(*void)(*instance)) == 30, "ma_dr_mp3_L3_gr_info.count1_table has unexpected offset % instead of 30", ((cast(*void)(*instance.count1_table)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.count1_table)) == 1, "ma_dr_mp3_L3_gr_info.count1_table has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L3_gr_info.count1_table)));
        assert(((cast(*void)(*instance.scfsi)) - cast(*void)(*instance)) == 31, "ma_dr_mp3_L3_gr_info.scfsi has unexpected offset % instead of 31", ((cast(*void)(*instance.scfsi)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3_L3_gr_info.scfsi)) == 1, "ma_dr_mp3_L3_gr_info.scfsi has unexpected size % instead of 1", size_of(type_of(ma_dr_mp3_L3_gr_info.scfsi)));
        assert(size_of(ma_dr_mp3_L3_gr_info) == 32, "ma_dr_mp3_L3_gr_info has size % instead of 32", size_of(ma_dr_mp3_L3_gr_info));
    }

    {
        instance: ma_dr_mp3dec_scratch;
        assert(((cast(*void)(*instance.bs)) - cast(*void)(*instance)) == 0, "ma_dr_mp3dec_scratch.bs has unexpected offset % instead of 0", ((cast(*void)(*instance.bs)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_scratch.bs)) == 16, "ma_dr_mp3dec_scratch.bs has unexpected size % instead of 16", size_of(type_of(ma_dr_mp3dec_scratch.bs)));
        assert(((cast(*void)(*instance.maindata)) - cast(*void)(*instance)) == 16, "ma_dr_mp3dec_scratch.maindata has unexpected offset % instead of 16", ((cast(*void)(*instance.maindata)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_scratch.maindata)) == 2815, "ma_dr_mp3dec_scratch.maindata has unexpected size % instead of 2815", size_of(type_of(ma_dr_mp3dec_scratch.maindata)));
        assert(((cast(*void)(*instance.gr_info)) - cast(*void)(*instance)) == 2832, "ma_dr_mp3dec_scratch.gr_info has unexpected offset % instead of 2832", ((cast(*void)(*instance.gr_info)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_scratch.gr_info)) == 128, "ma_dr_mp3dec_scratch.gr_info has unexpected size % instead of 128", size_of(type_of(ma_dr_mp3dec_scratch.gr_info)));
        assert(((cast(*void)(*instance.grbuf)) - cast(*void)(*instance)) == 2960, "ma_dr_mp3dec_scratch.grbuf has unexpected offset % instead of 2960", ((cast(*void)(*instance.grbuf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_scratch.grbuf)) == 4608, "ma_dr_mp3dec_scratch.grbuf has unexpected size % instead of 4608", size_of(type_of(ma_dr_mp3dec_scratch.grbuf)));
        assert(((cast(*void)(*instance.scf)) - cast(*void)(*instance)) == 7568, "ma_dr_mp3dec_scratch.scf has unexpected offset % instead of 7568", ((cast(*void)(*instance.scf)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_scratch.scf)) == 160, "ma_dr_mp3dec_scratch.scf has unexpected size % instead of 160", size_of(type_of(ma_dr_mp3dec_scratch.scf)));
        assert(((cast(*void)(*instance.syn)) - cast(*void)(*instance)) == 7728, "ma_dr_mp3dec_scratch.syn has unexpected offset % instead of 7728", ((cast(*void)(*instance.syn)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_scratch.syn)) == 8448, "ma_dr_mp3dec_scratch.syn has unexpected size % instead of 8448", size_of(type_of(ma_dr_mp3dec_scratch.syn)));
        assert(((cast(*void)(*instance.ist_pos)) - cast(*void)(*instance)) == 16176, "ma_dr_mp3dec_scratch.ist_pos has unexpected offset % instead of 16176", ((cast(*void)(*instance.ist_pos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3dec_scratch.ist_pos)) == 78, "ma_dr_mp3dec_scratch.ist_pos has unexpected size % instead of 78", size_of(type_of(ma_dr_mp3dec_scratch.ist_pos)));
        assert(size_of(ma_dr_mp3dec_scratch) == 16256, "ma_dr_mp3dec_scratch has size % instead of 16256", size_of(ma_dr_mp3dec_scratch));
    }

    {
        instance: ma_dr_mp3__seeking_mp3_frame_info;
        assert(((cast(*void)(*instance.bytePos)) - cast(*void)(*instance)) == 0, "ma_dr_mp3__seeking_mp3_frame_info.bytePos has unexpected offset % instead of 0", ((cast(*void)(*instance.bytePos)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3__seeking_mp3_frame_info.bytePos)) == 8, "ma_dr_mp3__seeking_mp3_frame_info.bytePos has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3__seeking_mp3_frame_info.bytePos)));
        assert(((cast(*void)(*instance.pcmFrameIndex)) - cast(*void)(*instance)) == 8, "ma_dr_mp3__seeking_mp3_frame_info.pcmFrameIndex has unexpected offset % instead of 8", ((cast(*void)(*instance.pcmFrameIndex)) - cast(*void)(*instance)));
        assert(size_of(type_of(ma_dr_mp3__seeking_mp3_frame_info.pcmFrameIndex)) == 8, "ma_dr_mp3__seeking_mp3_frame_info.pcmFrameIndex has unexpected size % instead of 8", size_of(type_of(ma_dr_mp3__seeking_mp3_frame_info.pcmFrameIndex)));
        assert(size_of(ma_dr_mp3__seeking_mp3_frame_info) == 16, "ma_dr_mp3__seeking_mp3_frame_info has size % instead of 16", size_of(ma_dr_mp3__seeking_mp3_frame_info));
    }
}


#if OS == .MACOS {
    miniaudio :: #library "macos/miniaudio";
} else {
    #assert false;
}

